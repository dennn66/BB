
KeyboardMouseRaw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00002874  00002908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  0080013a  0080013a  00002942  2**0
                  ALLOC
  3 .debug_aranges 00000730  00000000  00000000  00002942  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000012b7  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a7c5  00000000  00000000  00004329  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002bc8  00000000  00000000  0000eaee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008e17  00000000  00000000  000116b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  0001a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000423b  00000000  00000000  0001b010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049cb  00000000  00000000  0001f24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000980  00000000  00000000  00023c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    return 0;
}

/* send LED state to keyboard */
void ps2_host_set_led(uint8_t led)
{
       0:	f8 c0       	rjmp	.+496    	; 0x1f2 <__ctors_end>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
       2:	00 00       	nop
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       a:	00 00       	nop
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c1       	rjmp	.+516    	; 0x22a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_10>
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c0       	rjmp	.+484    	; 0x22a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop

000000ac <MouseReport>:
      ac:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
      bc:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
      cc:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
      dc:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
      ec:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000000f9 <KeyboardReport>:
      f9:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     109:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     119:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     129:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

00000138 <GenericReport>:
     138:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     148:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

00000158 <DeviceDescriptor>:
     158:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     168:	00 01                                               ..

0000016a <ConfigurationDescriptor>:
     16a:	09 02 54 00 03 01 00 c0 32 09 04 00 00 01 03 01     ..T.....2.......
     17a:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     18a:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     19a:	01 22 4d 00 07 05 83 03 08 00 05 09 04 02 00 01     ."M.............
     1aa:	03 00 00 00 09 21 11 01 00 01 22 20 00 07 05 87     .....!...." ....
     1ba:	03 08 00 05                                         ....

000001be <LanguageString>:
     1be:	04 03 09 04                                         ....

000001c2 <ManufacturerString>:
     1c2:	10 03 55 00 6e 00 6e 00 61 00 6d 00 65 00 64 00     ..U.n.n.a.m.e.d.
     1d2:	00 00                                               ..

000001d4 <ProductString>:
     1d4:	14 03 42 00 42 00 20 00 44 00 6f 00 6e 00 67 00     ..B.B. .D.o.n.g.
     1e4:	6c 00 65 00 00 00                                   l.e...

000001ea <__c.1533>:
     1ea:	78 25 30 32 58 0a 00 00                             x%02X...

000001f2 <__ctors_end>:
     1f2:	11 24       	eor	r1, r1
     1f4:	1f be       	out	0x3f, r1	; 63
     1f6:	cf ef       	ldi	r28, 0xFF	; 255
     1f8:	da e0       	ldi	r29, 0x0A	; 10
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	cd bf       	out	0x3d, r28	; 61

000001fe <__do_copy_data>:
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	e4 e7       	ldi	r30, 0x74	; 116
     206:	f8 e2       	ldi	r31, 0x28	; 40
     208:	02 c0       	rjmp	.+4      	; 0x20e <.do_copy_data_start>

0000020a <.do_copy_data_loop>:
     20a:	05 90       	lpm	r0, Z+
     20c:	0d 92       	st	X+, r0

0000020e <.do_copy_data_start>:
     20e:	aa 33       	cpi	r26, 0x3A	; 58
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <.do_copy_data_loop>

00000214 <__do_clear_bss>:
     214:	11 e0       	ldi	r17, 0x01	; 1
     216:	aa e3       	ldi	r26, 0x3A	; 58
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	af 38       	cpi	r26, 0x8F	; 143
     220:	b1 07       	cpc	r27, r17
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	49 d4       	rcall	.+2194   	; 0xab8 <main>
     226:	0c 94 38 14 	jmp	0x2870	; 0x2870 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <xputc>:
     22c:	ff 93       	push	r31
     22e:	ef 93       	push	r30
     230:	e0 91 78 01 	lds	r30, 0x0178
     234:	f0 91 79 01 	lds	r31, 0x0179
     238:	30 97       	sbiw	r30, 0x00	; 0
     23a:	09 f0       	breq	.+2      	; 0x23e <xputc+0x12>
     23c:	09 95       	icall
     23e:	ef 91       	pop	r30
     240:	ff 91       	pop	r31
     242:	08 95       	ret

00000244 <xputs>:
     244:	fc 01       	movw	r30, r24
     246:	85 91       	lpm	r24, Z+
     248:	80 30       	cpi	r24, 0x00	; 0
     24a:	11 f0       	breq	.+4      	; 0x250 <xputs+0xc>
     24c:	ef df       	rcall	.-34     	; 0x22c <xputc>
     24e:	fb cf       	rjmp	.-10     	; 0x246 <xputs+0x2>
     250:	08 95       	ret

00000252 <xitoa>:
     252:	ff 27       	eor	r31, r31
     254:	e0 e2       	ldi	r30, 0x20	; 32
     256:	30 e2       	ldi	r19, 0x20	; 32
     258:	47 ff       	sbrs	r20, 7
     25a:	0c c0       	rjmp	.+24     	; 0x274 <xitoa+0x22>
     25c:	41 95       	neg	r20
     25e:	97 ff       	sbrs	r25, 7
     260:	09 c0       	rjmp	.+18     	; 0x274 <xitoa+0x22>
     262:	ed e2       	ldi	r30, 0x2D	; 45
     264:	60 95       	com	r22
     266:	70 95       	com	r23
     268:	80 95       	com	r24
     26a:	90 95       	com	r25
     26c:	61 1d       	adc	r22, r1
     26e:	71 1d       	adc	r23, r1
     270:	81 1d       	adc	r24, r1
     272:	91 1d       	adc	r25, r1
     274:	27 ff       	sbrs	r18, 7
     276:	02 c0       	rjmp	.+4      	; 0x27c <xitoa+0x2a>
     278:	21 95       	neg	r18
     27a:	30 e3       	ldi	r19, 0x30	; 48
     27c:	50 e2       	ldi	r21, 0x20	; 32
     27e:	aa 27       	eor	r26, r26
     280:	66 0f       	add	r22, r22
     282:	77 1f       	adc	r23, r23
     284:	88 1f       	adc	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	aa 1f       	adc	r26, r26
     28a:	a4 17       	cp	r26, r20
     28c:	10 f0       	brcs	.+4      	; 0x292 <xitoa+0x40>
     28e:	a4 1b       	sub	r26, r20
     290:	63 95       	inc	r22
     292:	5a 95       	dec	r21
     294:	a9 f7       	brne	.-22     	; 0x280 <xitoa+0x2e>
     296:	aa 30       	cpi	r26, 0x0A	; 10
     298:	08 f0       	brcs	.+2      	; 0x29c <xitoa+0x4a>
     29a:	a9 5f       	subi	r26, 0xF9	; 249
     29c:	a0 5d       	subi	r26, 0xD0	; 208
     29e:	af 93       	push	r26
     2a0:	f3 95       	inc	r31
     2a2:	61 15       	cp	r22, r1
     2a4:	71 05       	cpc	r23, r1
     2a6:	81 05       	cpc	r24, r1
     2a8:	91 05       	cpc	r25, r1
     2aa:	41 f7       	brne	.-48     	; 0x27c <xitoa+0x2a>
     2ac:	ed 32       	cpi	r30, 0x2D	; 45
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <xitoa+0x62>
     2b0:	ef 93       	push	r30
     2b2:	f3 95       	inc	r31
     2b4:	f2 17       	cp	r31, r18
     2b6:	18 f4       	brcc	.+6      	; 0x2be <xitoa+0x6c>
     2b8:	3f 93       	push	r19
     2ba:	f3 95       	inc	r31
     2bc:	fb cf       	rjmp	.-10     	; 0x2b4 <xitoa+0x62>
     2be:	8f 91       	pop	r24
     2c0:	b5 df       	rcall	.-150    	; 0x22c <xputc>
     2c2:	fa 95       	dec	r31
     2c4:	e1 f7       	brne	.-8      	; 0x2be <xitoa+0x6c>
     2c6:	08 95       	ret

000002c8 <xvprintf>:
     2c8:	e9 91       	ld	r30, Y+
     2ca:	f9 91       	ld	r31, Y+
     2cc:	85 91       	lpm	r24, Z+
     2ce:	80 30       	cpi	r24, 0x00	; 0
     2d0:	21 f0       	breq	.+8      	; 0x2da <xvprintf+0x12>
     2d2:	85 32       	cpi	r24, 0x25	; 37
     2d4:	19 f0       	breq	.+6      	; 0x2dc <xvprintf+0x14>
     2d6:	aa df       	rcall	.-172    	; 0x22c <xputc>
     2d8:	f9 cf       	rjmp	.-14     	; 0x2cc <xvprintf+0x4>
     2da:	08 95       	ret
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	e8 94       	clt
     2e0:	55 91       	lpm	r21, Z+
     2e2:	55 32       	cpi	r21, 0x25	; 37
     2e4:	c1 f3       	breq	.-16     	; 0x2d6 <xvprintf+0xe>
     2e6:	50 33       	cpi	r21, 0x30	; 48
     2e8:	11 f4       	brne	.+4      	; 0x2ee <xvprintf+0x26>
     2ea:	68 94       	set
     2ec:	55 91       	lpm	r21, Z+
     2ee:	5a 33       	cpi	r21, 0x3A	; 58
     2f0:	48 f4       	brcc	.+18     	; 0x304 <xvprintf+0x3c>
     2f2:	50 53       	subi	r21, 0x30	; 48
     2f4:	90 f3       	brcs	.-28     	; 0x2da <xvprintf+0x12>
     2f6:	22 0f       	add	r18, r18
     2f8:	02 2e       	mov	r0, r18
     2fa:	22 0f       	add	r18, r18
     2fc:	22 0f       	add	r18, r18
     2fe:	20 0d       	add	r18, r0
     300:	25 0f       	add	r18, r21
     302:	f4 cf       	rjmp	.-24     	; 0x2ec <xvprintf+0x24>
     304:	0e f4       	brtc	.+2      	; 0x308 <xvprintf+0x40>
     306:	21 95       	neg	r18
     308:	89 91       	ld	r24, Y+
     30a:	99 91       	ld	r25, Y+
     30c:	53 36       	cpi	r21, 0x63	; 99
     30e:	19 f3       	breq	.-58     	; 0x2d6 <xvprintf+0xe>
     310:	53 37       	cpi	r21, 0x73	; 115
     312:	29 f1       	breq	.+74     	; 0x35e <xvprintf+0x96>
     314:	53 35       	cpi	r21, 0x53	; 83
     316:	59 f1       	breq	.+86     	; 0x36e <xvprintf+0xa6>
     318:	bc 01       	movw	r22, r24
     31a:	88 27       	eor	r24, r24
     31c:	99 27       	eor	r25, r25
     31e:	e8 94       	clt
     320:	5c 36       	cpi	r21, 0x6C	; 108
     322:	21 f4       	brne	.+8      	; 0x32c <xvprintf+0x64>
     324:	89 91       	ld	r24, Y+
     326:	99 91       	ld	r25, Y+
     328:	68 94       	set
     32a:	55 91       	lpm	r21, Z+
     32c:	54 36       	cpi	r21, 0x64	; 100
     32e:	39 f4       	brne	.+14     	; 0x33e <xvprintf+0x76>
     330:	46 ef       	ldi	r20, 0xF6	; 246
     332:	7e f0       	brts	.+30     	; 0x352 <xvprintf+0x8a>
     334:	77 ff       	sbrs	r23, 7
     336:	0d c0       	rjmp	.+26     	; 0x352 <xvprintf+0x8a>
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	0a c0       	rjmp	.+20     	; 0x352 <xvprintf+0x8a>
     33e:	55 37       	cpi	r21, 0x75	; 117
     340:	4a e0       	ldi	r20, 0x0A	; 10
     342:	39 f0       	breq	.+14     	; 0x352 <xvprintf+0x8a>
     344:	58 35       	cpi	r21, 0x58	; 88
     346:	40 e1       	ldi	r20, 0x10	; 16
     348:	21 f0       	breq	.+8      	; 0x352 <xvprintf+0x8a>
     34a:	52 36       	cpi	r21, 0x62	; 98
     34c:	42 e0       	ldi	r20, 0x02	; 2
     34e:	09 f0       	breq	.+2      	; 0x352 <xvprintf+0x8a>
     350:	08 95       	ret
     352:	ff 93       	push	r31
     354:	ef 93       	push	r30
     356:	7d df       	rcall	.-262    	; 0x252 <xitoa>
     358:	ef 91       	pop	r30
     35a:	ff 91       	pop	r31
     35c:	b7 cf       	rjmp	.-146    	; 0x2cc <xvprintf+0x4>
     35e:	ff 93       	push	r31
     360:	ef 93       	push	r30
     362:	fc 01       	movw	r30, r24
     364:	81 91       	ld	r24, Z+
     366:	80 30       	cpi	r24, 0x00	; 0
     368:	b9 f3       	breq	.-18     	; 0x358 <xvprintf+0x90>
     36a:	60 df       	rcall	.-320    	; 0x22c <xputc>
     36c:	fb cf       	rjmp	.-10     	; 0x364 <xvprintf+0x9c>
     36e:	ff 93       	push	r31
     370:	ef 93       	push	r30
     372:	68 df       	rcall	.-304    	; 0x244 <xputs>
     374:	f1 cf       	rjmp	.-30     	; 0x358 <xvprintf+0x90>

00000376 <__xprintf>:
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	25 96       	adiw	r28, 0x05	; 5
     380:	a3 df       	rcall	.-186    	; 0x2c8 <xvprintf>
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <LEDs_TurnOnLEDs>:
				PORTC &= ~LEDS_PORTC_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTB |=  (LEDMask & LEDS_PORTB_LEDS);
     388:	25 b1       	in	r18, 0x05	; 5
     38a:	98 2f       	mov	r25, r24
     38c:	91 70       	andi	r25, 0x01	; 1
     38e:	92 2b       	or	r25, r18
     390:	95 b9       	out	0x05, r25	; 5
				PORTD |=  (LEDMask & LEDS_PORTD_LEDS);
     392:	2b b1       	in	r18, 0x0b	; 11
     394:	98 2f       	mov	r25, r24
     396:	90 72       	andi	r25, 0x20	; 32
     398:	92 2b       	or	r25, r18
     39a:	9b b9       	out	0x0b, r25	; 11
				PORTC |=  (LEDMask & LEDS_PORTC_LEDS);
     39c:	98 b1       	in	r25, 0x08	; 8
     39e:	80 78       	andi	r24, 0x80	; 128
     3a0:	98 2b       	or	r25, r24
     3a2:	98 b9       	out	0x08, r25	; 8
			}
     3a4:	08 95       	ret

000003a6 <LEDs_TurnOffLEDs>:

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTB &= ~(LEDMask & LEDS_PORTB_LEDS);
     3a6:	25 b1       	in	r18, 0x05	; 5
     3a8:	98 2f       	mov	r25, r24
     3aa:	91 70       	andi	r25, 0x01	; 1
     3ac:	90 95       	com	r25
     3ae:	92 23       	and	r25, r18
     3b0:	95 b9       	out	0x05, r25	; 5
				PORTD &= ~(LEDMask & LEDS_PORTD_LEDS);
     3b2:	2b b1       	in	r18, 0x0b	; 11
     3b4:	98 2f       	mov	r25, r24
     3b6:	90 72       	andi	r25, 0x20	; 32
     3b8:	90 95       	com	r25
     3ba:	92 23       	and	r25, r18
     3bc:	9b b9       	out	0x0b, r25	; 11
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
     3be:	98 b1       	in	r25, 0x08	; 8
     3c0:	80 78       	andi	r24, 0x80	; 128
     3c2:	80 95       	com	r24
     3c4:	98 23       	and	r25, r24
     3c6:	98 b9       	out	0x08, r25	; 8
			}
     3c8:	08 95       	ret

000003ca <List_Find_Node>:
				.PrevReportINBufferSize       = sizeof(PrevHIDReportBuffer),
			},
	};


Button_Task_Sheduler_t * List_Find_Node(uint8_t KeyCode){
     3ca:	48 2f       	mov	r20, r24
	Button_Task_Sheduler_t * Button=0;
	
	Button = Buttons;
     3cc:	e0 91 40 01 	lds	r30, 0x0140
     3d0:	f0 91 41 01 	lds	r31, 0x0141
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <List_Find_Node+0x1a>
	while(Button !=0) {
		if(Button->Code == KeyCode) return Button;
     3d6:	80 81       	ld	r24, Z
     3d8:	84 17       	cp	r24, r20
     3da:	31 f0       	breq	.+12     	; 0x3e8 <List_Find_Node+0x1e>
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     3dc:	84 85       	ldd	r24, Z+12	; 0x0c
     3de:	95 85       	ldd	r25, Z+13	; 0x0d
     3e0:	9c 01       	movw	r18, r24
     3e2:	f9 01       	movw	r30, r18

Button_Task_Sheduler_t * List_Find_Node(uint8_t KeyCode){
	Button_Task_Sheduler_t * Button=0;
	
	Button = Buttons;
	while(Button !=0) {
     3e4:	30 97       	sbiw	r30, 0x00	; 0
     3e6:	b9 f7       	brne	.-18     	; 0x3d6 <List_Find_Node+0xc>
		if(Button->Code == KeyCode) return Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}
	return (Button_Task_Sheduler_t *) 0;
}
     3e8:	cf 01       	movw	r24, r30
     3ea:	08 95       	ret

000003ec <Check_All_Coditions>:
	}
	Button->condition = 0;
}

uint8_t Check_All_Coditions(Button_Task_Sheduler_t * Button){
	Button_Task_Condition_t * Condition = Button->condition;
     3ec:	fc 01       	movw	r30, r24
     3ee:	a2 85       	ldd	r26, Z+10	; 0x0a
     3f0:	b3 85       	ldd	r27, Z+11	; 0x0b
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	1f c0       	rjmp	.+62     	; 0x434 <Check_All_Coditions+0x48>
	uint8_t match=1;
	while(Condition !=0){
		if(Params[Condition->Type] > 100) match = 0;
     3f6:	ec 91       	ld	r30, X
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e0 5d       	subi	r30, 0xD0	; 208
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	e0 81       	ld	r30, Z
     400:	e5 36       	cpi	r30, 0x65	; 101
     402:	08 f0       	brcs	.+2      	; 0x406 <Check_All_Coditions+0x1a>
     404:	40 e0       	ldi	r20, 0x00	; 0
		if((Condition->Min < 101) && (Condition->Min > Params[Condition->Type]))  match = 0;
     406:	11 96       	adiw	r26, 0x01	; 1
     408:	8c 91       	ld	r24, X
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	85 36       	cpi	r24, 0x65	; 101
     40e:	18 f4       	brcc	.+6      	; 0x416 <Check_All_Coditions+0x2a>
     410:	e8 17       	cp	r30, r24
     412:	08 f4       	brcc	.+2      	; 0x416 <Check_All_Coditions+0x2a>
     414:	40 e0       	ldi	r20, 0x00	; 0
		if((Condition->Max < 101) && (Condition->Max < Params[Condition->Type]))  match = 0;
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	8c 91       	ld	r24, X
     41a:	12 97       	sbiw	r26, 0x02	; 2
     41c:	85 36       	cpi	r24, 0x65	; 101
     41e:	18 f4       	brcc	.+6      	; 0x426 <Check_All_Coditions+0x3a>
     420:	8e 17       	cp	r24, r30
     422:	08 f4       	brcc	.+2      	; 0x426 <Check_All_Coditions+0x3a>
     424:	40 e0       	ldi	r20, 0x00	; 0
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	8c 91       	ld	r24, X
     42a:	13 97       	sbiw	r26, 0x03	; 3
     42c:	14 96       	adiw	r26, 0x04	; 4
     42e:	9c 91       	ld	r25, X
     430:	9c 01       	movw	r18, r24
     432:	d9 01       	movw	r26, r18
}

uint8_t Check_All_Coditions(Button_Task_Sheduler_t * Button){
	Button_Task_Condition_t * Condition = Button->condition;
	uint8_t match=1;
	while(Condition !=0){
     434:	10 97       	sbiw	r26, 0x00	; 0
     436:	f9 f6       	brne	.-66     	; 0x3f6 <Check_All_Coditions+0xa>
		if((Condition->Min < 101) && (Condition->Min > Params[Condition->Type]))  match = 0;
		if((Condition->Max < 101) && (Condition->Max < Params[Condition->Type]))  match = 0;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
	}
	return match;
}
     438:	84 2f       	mov	r24, r20
     43a:	08 95       	ret

0000043c <PS2_to_USB_mouse_send>:
		HID_Device_USBTask(&Generic_HID_Interface);
		USB_USBTask();
	}
}

PS2_to_USB_mouse_send(report_mouse_t *mouse_report){
     43c:	fc 01       	movw	r30, r24
    report_mouse_t* newMouseReport =  (report_mouse_t*)newMouseHIDReportBuffer;
    if(expectMouseReport == 0 ){
     43e:	80 91 3d 01 	lds	r24, 0x013D
     442:	88 23       	and	r24, r24
     444:	91 f4       	brne	.+36     	; 0x46a <PS2_to_USB_mouse_send+0x2e>
	newMouseReport->x = mouse_report->x;
     446:	81 81       	ldd	r24, Z+1	; 0x01
     448:	80 93 4c 01 	sts	0x014C, r24
	newMouseReport->y = mouse_report->y;
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	80 93 4d 01 	sts	0x014D, r24
	newMouseReport->v = mouse_report->v;
     452:	83 81       	ldd	r24, Z+3	; 0x03
     454:	80 93 4e 01 	sts	0x014E, r24
	newMouseReport->h = mouse_report->h;
     458:	84 81       	ldd	r24, Z+4	; 0x04
     45a:	80 93 4f 01 	sts	0x014F, r24
	newMouseReport->buttons = mouse_report->buttons; //|= (1 << 0);
     45e:	80 81       	ld	r24, Z
     460:	80 93 4b 01 	sts	0x014B, r24
	expectMouseReport = 1;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 3d 01 	sts	0x013D, r24
    }
}
     46a:	08 95       	ret

0000046c <led_indicator_task>:

//ISR(TIMER0_COMPA_vect, ISR_BLOCK)
void led_indicator_task(uint16_t time_delta)
{
     46c:	9c 01       	movw	r18, r24
	//Button_Task_Sheduler_t * PrevButton;

	// Control device state LED
	if(deviceState == 0){
     46e:	80 91 3e 01 	lds	r24, 0x013E
     472:	88 23       	and	r24, r24
     474:	b1 f4       	brne	.+44     	; 0x4a2 <led_indicator_task+0x36>
		toggleCounter+=time_delta;
     476:	80 91 46 01 	lds	r24, 0x0146
     47a:	90 91 47 01 	lds	r25, 0x0147
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	90 93 47 01 	sts	0x0147, r25
     486:	80 93 46 01 	sts	0x0146, r24
		if(toggleCounter >= TOGGLEIDLE){
     48a:	88 5e       	subi	r24, 0xE8	; 232
     48c:	93 40       	sbci	r25, 0x03	; 3
     48e:	58 f0       	brcs	.+22     	; 0x4a6 <led_indicator_task+0x3a>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
     490:	13 b8       	out	0x03, r1	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	89 b9       	out	0x09, r24	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
     496:	16 b8       	out	0x06, r1	; 6
			LEDs_ToggleLEDs(LEDS_LED2);
			toggleCounter = 0;
     498:	10 92 47 01 	sts	0x0147, r1
     49c:	10 92 46 01 	sts	0x0146, r1
     4a0:	08 95       	ret
		}
	} else {
		LEDs_TurnOnLEDs(LEDS_LED2);
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	71 cf       	rjmp	.-286    	; 0x388 <LEDs_TurnOnLEDs>
     4a6:	08 95       	ret

000004a8 <EVENT_USB_Device_Connect>:
	OCR0A  = (F_CPU / 1024 / 200); //200Hz	
#else
	#error Unsupported F_CPU	
#endif
*/
}
     4a8:	08 95       	ret

000004aa <EVENT_USB_Device_Disconnect>:
/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 //   LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	/* Stop Millisecond Timer Interrupt */
	TCCR0B = 0;
     4aa:	15 bc       	out	0x25, r1	; 37

}
     4ac:	08 95       	ret

000004ae <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     4ae:	80 91 0e 01 	lds	r24, 0x010E
     4b2:	90 91 0f 01 	lds	r25, 0x010F
     4b6:	00 97       	sbiw	r24, 0x00	; 0
     4b8:	29 f0       	breq	.+10     	; 0x4c4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	90 93 0f 01 	sts	0x010F, r25
     4c0:	80 93 0e 01 	sts	0x010E, r24
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     4c4:	80 91 1e 01 	lds	r24, 0x011E
     4c8:	90 91 1f 01 	lds	r25, 0x011F
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	29 f0       	breq	.+10     	; 0x4da <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	90 93 1f 01 	sts	0x011F, r25
     4d6:	80 93 1e 01 	sts	0x011E, r24
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     4da:	80 91 2e 01 	lds	r24, 0x012E
     4de:	90 91 2f 01 	lds	r25, 0x012F
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <EVENT_USB_Device_StartOfFrame+0x42>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	90 93 2f 01 	sts	0x012F, r25
     4ec:	80 93 2e 01 	sts	0x012E, r24
     4f0:	08 95       	ret

000004f2 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	d9 01       	movw	r26, r18
     4fc:	a8 01       	movw	r20, r16
	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	80 30       	cpi	r24, 0x00	; 0
     502:	92 07       	cpc	r25, r18
     504:	d9 f5       	brne	.+118    	; 0x57c <CALLBACK_HID_Device_CreateHIDReport+0x8a>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
		USB_KeyboardReport_Data_t* newKeyboardReport = (USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer;

		KeyboardReport->Modifier = 0x00;
     506:	1c 92       	st	X, r1
		memset( KeyboardReport->KeyCode, 0x00, sizeof(KeyboardReport->KeyCode) );
     508:	cd 01       	movw	r24, r26
     50a:	02 96       	adiw	r24, 0x02	; 2
     50c:	fc 01       	movw	r30, r24
     50e:	86 e0       	ldi	r24, 0x06	; 6
     510:	ef 01       	movw	r28, r30
     512:	19 92       	st	Y+, r1
     514:	8a 95       	dec	r24
     516:	e9 f7       	brne	.-6      	; 0x512 <CALLBACK_HID_Device_CreateHIDReport+0x20>

		// Create keyboard report 
		if (expectKeyboardReport != 0) {	
     518:	80 91 3f 01 	lds	r24, 0x013F
     51c:	88 23       	and	r24, r24
     51e:	41 f1       	breq	.+80     	; 0x570 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
			if (deviceState==1) {
     520:	80 91 3e 01 	lds	r24, 0x013E
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	21 f4       	brne	.+8      	; 0x530 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
				KeyboardReport->Modifier = newKeyboardReport->Modifier;
     528:	80 91 50 01 	lds	r24, 0x0150
     52c:	8c 93       	st	X, r24
     52e:	01 c0       	rjmp	.+2      	; 0x532 <CALLBACK_HID_Device_CreateHIDReport+0x40>
			} else {
				KeyboardReport->Modifier = 0;			
     530:	1c 92       	st	X, r1
			}
//			memcpy_P( newKeyboardReport->KeyCode, KeyboardReport->KeyCode, sizeof(KeyboardReport->KeyCode) ); 
			KeyboardReport->KeyCode[0] = newKeyboardReport->KeyCode[0];
     532:	80 91 52 01 	lds	r24, 0x0152
     536:	12 96       	adiw	r26, 0x02	; 2
     538:	8c 93       	st	X, r24
     53a:	12 97       	sbiw	r26, 0x02	; 2
			KeyboardReport->KeyCode[1] = newKeyboardReport->KeyCode[1];
     53c:	80 91 53 01 	lds	r24, 0x0153
     540:	13 96       	adiw	r26, 0x03	; 3
     542:	8c 93       	st	X, r24
     544:	13 97       	sbiw	r26, 0x03	; 3
			KeyboardReport->KeyCode[2] = newKeyboardReport->KeyCode[2];
     546:	80 91 54 01 	lds	r24, 0x0154
     54a:	14 96       	adiw	r26, 0x04	; 4
     54c:	8c 93       	st	X, r24
     54e:	14 97       	sbiw	r26, 0x04	; 4
			KeyboardReport->KeyCode[3] = newKeyboardReport->KeyCode[3];
     550:	80 91 55 01 	lds	r24, 0x0155
     554:	15 96       	adiw	r26, 0x05	; 5
     556:	8c 93       	st	X, r24
     558:	15 97       	sbiw	r26, 0x05	; 5
			KeyboardReport->KeyCode[4] = newKeyboardReport->KeyCode[4];
     55a:	80 91 56 01 	lds	r24, 0x0156
     55e:	16 96       	adiw	r26, 0x06	; 6
     560:	8c 93       	st	X, r24
     562:	16 97       	sbiw	r26, 0x06	; 6
			KeyboardReport->KeyCode[5] = newKeyboardReport->KeyCode[5]; //0x22 == "5";
     564:	80 91 57 01 	lds	r24, 0x0157
     568:	17 96       	adiw	r26, 0x07	; 7
     56a:	8c 93       	st	X, r24

			expectKeyboardReport = 0;
     56c:	10 92 3f 01 	sts	0x013F, r1
		};	
	
		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     570:	88 e0       	ldi	r24, 0x08	; 8
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	fa 01       	movw	r30, r20
     576:	91 83       	std	Z+1, r25	; 0x01
     578:	80 83       	st	Z, r24
     57a:	3f c0       	rjmp	.+126    	; 0x5fa <CALLBACK_HID_Device_CreateHIDReport+0x108>
		return false;
	}
	else if (HIDInterfaceInfo == &Mouse_HID_Interface)
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	80 31       	cpi	r24, 0x10	; 16
     580:	9f 07       	cpc	r25, r31
     582:	81 f5       	brne	.+96     	; 0x5e4 <CALLBACK_HID_Device_CreateHIDReport+0xf2>
	{
		report_mouse_t* MouseReport = (report_mouse_t*)ReportData;
		report_mouse_t* newMouseReport = (report_mouse_t*)newMouseHIDReportBuffer;

		MouseReport->x = 0x00;
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	1c 92       	st	X, r1
     588:	11 97       	sbiw	r26, 0x01	; 1
		MouseReport->y = 0x00;
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	1c 92       	st	X, r1
     58e:	12 97       	sbiw	r26, 0x02	; 2
		MouseReport->h = 0x00;
     590:	14 96       	adiw	r26, 0x04	; 4
     592:	1c 92       	st	X, r1
     594:	14 97       	sbiw	r26, 0x04	; 4
		MouseReport->v = 0x00;
     596:	13 96       	adiw	r26, 0x03	; 3
     598:	1c 92       	st	X, r1
     59a:	13 97       	sbiw	r26, 0x03	; 3
		//MouseReport->buttons = 0x00;

		// Create mouse report 
		if (expectMouseReport != 0) {	
     59c:	80 91 3d 01 	lds	r24, 0x013D
     5a0:	88 23       	and	r24, r24
     5a2:	c9 f0       	breq	.+50     	; 0x5d6 <CALLBACK_HID_Device_CreateHIDReport+0xe4>
			MouseReport->x = newMouseReport->x;
     5a4:	80 91 4c 01 	lds	r24, 0x014C
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	8c 93       	st	X, r24
     5ac:	11 97       	sbiw	r26, 0x01	; 1
			MouseReport->y = newMouseReport->y;
     5ae:	80 91 4d 01 	lds	r24, 0x014D
     5b2:	12 96       	adiw	r26, 0x02	; 2
     5b4:	8c 93       	st	X, r24
     5b6:	12 97       	sbiw	r26, 0x02	; 2
			MouseReport->v = newMouseReport->v;
     5b8:	80 91 4e 01 	lds	r24, 0x014E
     5bc:	13 96       	adiw	r26, 0x03	; 3
     5be:	8c 93       	st	X, r24
     5c0:	13 97       	sbiw	r26, 0x03	; 3
			MouseReport->h = newMouseReport->h;
     5c2:	80 91 4f 01 	lds	r24, 0x014F
     5c6:	14 96       	adiw	r26, 0x04	; 4
     5c8:	8c 93       	st	X, r24
     5ca:	14 97       	sbiw	r26, 0x04	; 4
			MouseReport->buttons = newMouseReport->buttons;
     5cc:	80 91 4b 01 	lds	r24, 0x014B
     5d0:	8c 93       	st	X, r24
			expectMouseReport = 0;
     5d2:	10 92 3d 01 	sts	0x013D, r1
		};	
		*ReportSize = sizeof(report_mouse_t);
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	ea 01       	movw	r28, r20
     5dc:	99 83       	std	Y+1, r25	; 0x01
     5de:	88 83       	st	Y, r24
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0c c0       	rjmp	.+24     	; 0x5fc <CALLBACK_HID_Device_CreateHIDReport+0x10a>
		return true;
	}
	else if (HIDInterfaceInfo == &Generic_HID_Interface)
     5e4:	80 52       	subi	r24, 0x20	; 32
     5e6:	91 40       	sbci	r25, 0x01	; 1
     5e8:	41 f4       	brne	.+16     	; 0x5fa <CALLBACK_HID_Device_CreateHIDReport+0x108>
	{
		uint8_t *RawReport = (uint8_t*)ReportData;
		
		/* Return status of device */
		RawReport[0] = deviceState;
     5ea:	80 91 3e 01 	lds	r24, 0x013E
     5ee:	8c 93       	st	X, r24
		*ReportSize = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	e8 01       	movw	r28, r16
     5f6:	99 83       	std	Y+1, r25	; 0x01
     5f8:	88 83       	st	Y, r24
     5fa:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return false;
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <CreateKMReport>:
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
	}
	return match;
}

void CreateKMReport(Button_Task_Sheduler_t * Button){
     606:	2f 92       	push	r2
     608:	3f 92       	push	r3
     60a:	4f 92       	push	r4
     60c:	5f 92       	push	r5
     60e:	6f 92       	push	r6
     610:	7f 92       	push	r7
     612:	8f 92       	push	r8
     614:	9f 92       	push	r9
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	00 d0       	rcall	.+0      	; 0x62c <CreateKMReport+0x26>
     62c:	00 d0       	rcall	.+0      	; 0x62e <CreateKMReport+0x28>
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	9c 83       	std	Y+4, r25	; 0x04
     634:	8b 83       	std	Y+3, r24	; 0x03
				Button->timer=0;			
			}
			break;
		case READY:
		case RELEASED:
			if((Button->timer==0)&& (PauseTimer==0) && (deviceState != 0) && (Check_All_Coditions(Button) == 1)){
     636:	20 90 3e 01 	lds	r2, 0x013E
     63a:	30 90 40 01 	lds	r3, 0x0140
     63e:	40 90 41 01 	lds	r4, 0x0141
     642:	80 90 3f 01 	lds	r8, 0x013F
     646:	50 90 3d 01 	lds	r5, 0x013D
     64a:	c0 90 42 01 	lds	r12, 0x0142
     64e:	d0 90 43 01 	lds	r13, 0x0143
     652:	e0 90 44 01 	lds	r14, 0x0144
     656:	f0 90 45 01 	lds	r15, 0x0145
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	1a 82       	std	Y+2, r1	; 0x02
     660:	19 82       	std	Y+1, r1	; 0x01
     662:	aa 24       	eor	r10, r10
     664:	bb 24       	eor	r11, r11
     666:	99 24       	eor	r9, r9
						// Create mouse report 
					newMouseReport->x = 0x00;
					newMouseReport->y = 0x00;
					newMouseReport->buttons |= (1 << 0);
					Button->state = PRESSED;
					PauseTimer = Button->PauseTime*500; //500 ms grade
     668:	84 ef       	ldi	r24, 0xF4	; 244
     66a:	68 2e       	mov	r6, r24
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	78 2e       	mov	r7, r24
     670:	f7 c0       	rjmp	.+494    	; 0x860 <CreateKMReport+0x25a>

	USB_KeyboardReport_Data_t* newKeyboardReport = (USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer;
	uint8_t cursor = 0;

	while(Button != 0){
		switch(Button->state){
     672:	eb 81       	ldd	r30, Y+3	; 0x03
     674:	fc 81       	ldd	r31, Y+4	; 0x04
     676:	85 81       	ldd	r24, Z+5	; 0x05
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	09 f4       	brne	.+2      	; 0x67e <CreateKMReport+0x78>
     67c:	cc c0       	rjmp	.+408    	; 0x816 <CreateKMReport+0x210>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	18 f1       	brcs	.+70     	; 0x6c8 <CreateKMReport+0xc2>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	21 f0       	breq	.+8      	; 0x68e <CreateKMReport+0x88>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	09 f0       	breq	.+2      	; 0x68c <CreateKMReport+0x86>
     68a:	e2 c0       	rjmp	.+452    	; 0x850 <CreateKMReport+0x24a>
     68c:	1d c0       	rjmp	.+58     	; 0x6c8 <CreateKMReport+0xc2>
		case IDLE:
			if(Check_All_Coditions(Button) == 1){				
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	9c 81       	ldd	r25, Y+4	; 0x04
     692:	ac de       	rcall	.-680    	; 0x3ec <Check_All_Coditions>
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	71 f4       	brne	.+28     	; 0x6b4 <CreateKMReport+0xae>
				if(Button->timer==0){
     698:	eb 81       	ldd	r30, Y+3	; 0x03
     69a:	fc 81       	ldd	r31, Y+4	; 0x04
     69c:	86 81       	ldd	r24, Z+6	; 0x06
     69e:	97 81       	ldd	r25, Z+7	; 0x07
     6a0:	a0 85       	ldd	r26, Z+8	; 0x08
     6a2:	b1 85       	ldd	r27, Z+9	; 0x09
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	a1 05       	cpc	r26, r1
     6a8:	b1 05       	cpc	r27, r1
     6aa:	09 f0       	breq	.+2      	; 0x6ae <CreateKMReport+0xa8>
     6ac:	d1 c0       	rjmp	.+418    	; 0x850 <CreateKMReport+0x24a>
					Button->state = READY;
     6ae:	23 e0       	ldi	r18, 0x03	; 3
     6b0:	25 83       	std	Z+5, r18	; 0x05
     6b2:	ce c0       	rjmp	.+412    	; 0x850 <CreateKMReport+0x24a>
				}
			} else {
				Button->state = RELEASED;
     6b4:	eb 81       	ldd	r30, Y+3	; 0x03
     6b6:	fc 81       	ldd	r31, Y+4	; 0x04
     6b8:	15 82       	std	Z+5, r1	; 0x05
				Button->timer=0;			
     6ba:	eb 81       	ldd	r30, Y+3	; 0x03
     6bc:	fc 81       	ldd	r31, Y+4	; 0x04
     6be:	16 82       	std	Z+6, r1	; 0x06
     6c0:	17 82       	std	Z+7, r1	; 0x07
     6c2:	10 86       	std	Z+8, r1	; 0x08
     6c4:	11 86       	std	Z+9, r1	; 0x09
     6c6:	c4 c0       	rjmp	.+392    	; 0x850 <CreateKMReport+0x24a>
			}
			break;
		case READY:
		case RELEASED:
			if((Button->timer==0)&& (PauseTimer==0) && (deviceState != 0) && (Check_All_Coditions(Button) == 1)){
     6c8:	eb 81       	ldd	r30, Y+3	; 0x03
     6ca:	fc 81       	ldd	r31, Y+4	; 0x04
     6cc:	86 81       	ldd	r24, Z+6	; 0x06
     6ce:	97 81       	ldd	r25, Z+7	; 0x07
     6d0:	a0 85       	ldd	r26, Z+8	; 0x08
     6d2:	b1 85       	ldd	r27, Z+9	; 0x09
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	a1 05       	cpc	r26, r1
     6d8:	b1 05       	cpc	r27, r1
     6da:	09 f0       	breq	.+2      	; 0x6de <CreateKMReport+0xd8>
     6dc:	b9 c0       	rjmp	.+370    	; 0x850 <CreateKMReport+0x24a>
     6de:	c1 14       	cp	r12, r1
     6e0:	d1 04       	cpc	r13, r1
     6e2:	e1 04       	cpc	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	09 f0       	breq	.+2      	; 0x6ea <CreateKMReport+0xe4>
     6e8:	b3 c0       	rjmp	.+358    	; 0x850 <CreateKMReport+0x24a>
     6ea:	22 20       	and	r2, r2
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <CreateKMReport+0xea>
     6ee:	b0 c0       	rjmp	.+352    	; 0x850 <CreateKMReport+0x24a>
     6f0:	cf 01       	movw	r24, r30
     6f2:	7c de       	rcall	.-776    	; 0x3ec <Check_All_Coditions>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	09 f0       	breq	.+2      	; 0x6fa <CreateKMReport+0xf4>
     6f8:	ab c0       	rjmp	.+342    	; 0x850 <CreateKMReport+0x24a>
				if((Button->ConditionTime != 0) && (Button->state == RELEASED)){
     6fa:	eb 81       	ldd	r30, Y+3	; 0x03
     6fc:	fc 81       	ldd	r31, Y+4	; 0x04
     6fe:	94 81       	ldd	r25, Z+4	; 0x04
     700:	99 23       	and	r25, r25
     702:	d1 f0       	breq	.+52     	; 0x738 <CreateKMReport+0x132>
     704:	85 81       	ldd	r24, Z+5	; 0x05
     706:	88 23       	and	r24, r24
     708:	b9 f4       	brne	.+46     	; 0x738 <CreateKMReport+0x132>
					Button->state = IDLE;
     70a:	22 e0       	ldi	r18, 0x02	; 2
     70c:	25 83       	std	Z+5, r18	; 0x05
					Button->timer = Button->ConditionTime*500; //500 ms grade	
     70e:	89 2f       	mov	r24, r25
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	e6 9d       	mul	r30, r6
     716:	c0 01       	movw	r24, r0
     718:	e7 9d       	mul	r30, r7
     71a:	90 0d       	add	r25, r0
     71c:	f6 9d       	mul	r31, r6
     71e:	90 0d       	add	r25, r0
     720:	11 24       	eor	r1, r1
     722:	aa 27       	eor	r26, r26
     724:	97 fd       	sbrc	r25, 7
     726:	a0 95       	com	r26
     728:	ba 2f       	mov	r27, r26
     72a:	eb 81       	ldd	r30, Y+3	; 0x03
     72c:	fc 81       	ldd	r31, Y+4	; 0x04
     72e:	86 83       	std	Z+6, r24	; 0x06
     730:	97 83       	std	Z+7, r25	; 0x07
     732:	a0 87       	std	Z+8, r26	; 0x08
     734:	b1 87       	std	Z+9, r27	; 0x09
     736:	8c c0       	rjmp	.+280    	; 0x850 <CreateKMReport+0x24a>
					break;
				}
				if(Button->Code != 0xFF) {
     738:	eb 81       	ldd	r30, Y+3	; 0x03
     73a:	fc 81       	ldd	r31, Y+4	; 0x04
     73c:	80 81       	ld	r24, Z
     73e:	8f 3f       	cpi	r24, 0xFF	; 255
     740:	09 f4       	brne	.+2      	; 0x744 <CreateKMReport+0x13e>
     742:	4c c0       	rjmp	.+152    	; 0x7dc <CreateKMReport+0x1d6>
					if(cursor < 6){ 
     744:	f5 e0       	ldi	r31, 0x05	; 5
     746:	f9 15       	cp	r31, r9
     748:	08 f4       	brcc	.+2      	; 0x74c <CreateKMReport+0x146>
     74a:	82 c0       	rjmp	.+260    	; 0x850 <CreateKMReport+0x24a>
						newKeyboardReport->KeyCode[cursor] =	Button->Code;
     74c:	e9 2d       	mov	r30, r9
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	e0 5b       	subi	r30, 0xB0	; 176
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	82 83       	std	Z+2, r24	; 0x02
						cursor++;
						Button->state = PRESSED;
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	eb 81       	ldd	r30, Y+3	; 0x03
     75a:	fc 81       	ldd	r31, Y+4	; 0x04
     75c:	25 83       	std	Z+5, r18	; 0x05
						PauseTimer = Button->PauseTime*500; //500 ms grade
     75e:	81 81       	ldd	r24, Z+1	; 0x01
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	fc 01       	movw	r30, r24
     764:	e6 9d       	mul	r30, r6
     766:	c0 01       	movw	r24, r0
     768:	e7 9d       	mul	r30, r7
     76a:	90 0d       	add	r25, r0
     76c:	f6 9d       	mul	r31, r6
     76e:	90 0d       	add	r25, r0
     770:	11 24       	eor	r1, r1
     772:	6c 01       	movw	r12, r24
     774:	ee 24       	eor	r14, r14
     776:	d7 fc       	sbrc	r13, 7
     778:	e0 94       	com	r14
     77a:	fe 2c       	mov	r15, r14
						expectKeyboardReport = 1;
						
						//Remove pressed button from main list
						if(PrevButton==0){
     77c:	01 15       	cp	r16, r1
     77e:	11 05       	cpc	r17, r1
     780:	29 f4       	brne	.+10     	; 0x78c <CreateKMReport+0x186>
							Buttons = Button->NextTask;
     782:	eb 81       	ldd	r30, Y+3	; 0x03
     784:	fc 81       	ldd	r31, Y+4	; 0x04
     786:	34 84       	ldd	r3, Z+12	; 0x0c
     788:	45 84       	ldd	r4, Z+13	; 0x0d
     78a:	07 c0       	rjmp	.+14     	; 0x79a <CreateKMReport+0x194>
						} else {
							PrevButton->NextTask = Button->NextTask;
     78c:	eb 81       	ldd	r30, Y+3	; 0x03
     78e:	fc 81       	ldd	r31, Y+4	; 0x04
     790:	84 85       	ldd	r24, Z+12	; 0x0c
     792:	95 85       	ldd	r25, Z+13	; 0x0d
     794:	f8 01       	movw	r30, r16
     796:	95 87       	std	Z+13, r25	; 0x0d
     798:	84 87       	std	Z+12, r24	; 0x0c
						}
						
						// Add pressed button to temporary list
						if(PressedButtons == 0) {
     79a:	a1 14       	cp	r10, r1
     79c:	b1 04       	cpc	r11, r1
     79e:	19 f4       	brne	.+6      	; 0x7a6 <CreateKMReport+0x1a0>
     7a0:	ab 80       	ldd	r10, Y+3	; 0x03
     7a2:	bc 80       	ldd	r11, Y+4	; 0x04
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <CreateKMReport+0x1ac>
							PressedButtons = Button;
							PressedButton = Button;
						} else {
							PressedButton->NextTask = (void*)Button;
     7a6:	2b 81       	ldd	r18, Y+3	; 0x03
     7a8:	3c 81       	ldd	r19, Y+4	; 0x04
     7aa:	e9 81       	ldd	r30, Y+1	; 0x01
     7ac:	fa 81       	ldd	r31, Y+2	; 0x02
     7ae:	35 87       	std	Z+13, r19	; 0x0d
     7b0:	24 87       	std	Z+12, r18	; 0x0c
							PressedButton = Button;
						}
						if(PrevButton==0){
     7b2:	01 15       	cp	r16, r1
     7b4:	11 05       	cpc	r17, r1
     7b6:	19 f0       	breq	.+6      	; 0x7be <CreateKMReport+0x1b8>
     7b8:	30 2f       	mov	r19, r16
     7ba:	21 2f       	mov	r18, r17
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <CreateKMReport+0x1bc>
     7be:	33 2d       	mov	r19, r3
     7c0:	24 2d       	mov	r18, r4
					break;
				}
				if(Button->Code != 0xFF) {
					if(cursor < 6){ 
						newKeyboardReport->KeyCode[cursor] =	Button->Code;
						cursor++;
     7c2:	93 94       	inc	r9
						if(PrevButton==0){
							Button = Buttons;
						} else {
							Button = PrevButton;
						}
						PressedButton->NextTask = (void*)0;
     7c4:	eb 81       	ldd	r30, Y+3	; 0x03
     7c6:	fc 81       	ldd	r31, Y+4	; 0x04
     7c8:	15 86       	std	Z+13, r1	; 0x0d
     7ca:	14 86       	std	Z+12, r1	; 0x0c
     7cc:	fa 83       	std	Y+2, r31	; 0x02
     7ce:	e9 83       	std	Y+1, r30	; 0x01
     7d0:	83 2f       	mov	r24, r19
     7d2:	92 2f       	mov	r25, r18
     7d4:	9c 01       	movw	r18, r24
     7d6:	3c 83       	std	Y+4, r19	; 0x04
     7d8:	2b 83       	std	Y+3, r18	; 0x03
     7da:	33 c0       	rjmp	.+102    	; 0x842 <CreateKMReport+0x23c>
					}
				} else {
					report_mouse_t* newMouseReport = (report_mouse_t*)newMouseHIDReportBuffer;
						// Create mouse report 
					newMouseReport->x = 0x00;
     7dc:	10 92 4c 01 	sts	0x014C, r1
					newMouseReport->y = 0x00;
     7e0:	10 92 4d 01 	sts	0x014D, r1
					newMouseReport->buttons |= (1 << 0);
     7e4:	80 91 4b 01 	lds	r24, 0x014B
     7e8:	81 60       	ori	r24, 0x01	; 1
     7ea:	80 93 4b 01 	sts	0x014B, r24
					Button->state = PRESSED;
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	eb 81       	ldd	r30, Y+3	; 0x03
     7f2:	fc 81       	ldd	r31, Y+4	; 0x04
     7f4:	25 83       	std	Z+5, r18	; 0x05
					PauseTimer = Button->PauseTime*500; //500 ms grade
     7f6:	81 81       	ldd	r24, Z+1	; 0x01
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	fc 01       	movw	r30, r24
     7fc:	e6 9d       	mul	r30, r6
     7fe:	c0 01       	movw	r24, r0
     800:	e7 9d       	mul	r30, r7
     802:	90 0d       	add	r25, r0
     804:	f6 9d       	mul	r31, r6
     806:	90 0d       	add	r25, r0
     808:	11 24       	eor	r1, r1
     80a:	6c 01       	movw	r12, r24
     80c:	ee 24       	eor	r14, r14
     80e:	d7 fc       	sbrc	r13, 7
     810:	e0 94       	com	r14
     812:	fe 2c       	mov	r15, r14
     814:	1b c0       	rjmp	.+54     	; 0x84c <CreateKMReport+0x246>
					expectMouseReport = 1;
				}
			}
			break;
		case PRESSED:
			Button->state = RELEASED;
     816:	eb 81       	ldd	r30, Y+3	; 0x03
     818:	fc 81       	ldd	r31, Y+4	; 0x04
     81a:	15 82       	std	Z+5, r1	; 0x05
//			   	if(Button->ReleaseTime > 1500) LEDs_TurnOnLEDs(LEDS_y3);

			Button->timer = 100*((uint32_t)Button->ReleaseTime); //100 ms grade
     81c:	62 81       	ldd	r22, Z+2	; 0x02
     81e:	73 81       	ldd	r23, Z+3	; 0x03
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	24 e6       	ldi	r18, 0x64	; 100
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsi3>
     830:	eb 81       	ldd	r30, Y+3	; 0x03
     832:	fc 81       	ldd	r31, Y+4	; 0x04
     834:	66 83       	std	Z+6, r22	; 0x06
     836:	77 83       	std	Z+7, r23	; 0x07
     838:	80 87       	std	Z+8, r24	; 0x08
     83a:	91 87       	std	Z+9, r25	; 0x09
//				if(Button->ReleaseTime > 2300) LEDs_TurnOnLEDs(LEDS_LED1);

			if(Button->Code == 0xFF) {
     83c:	80 81       	ld	r24, Z
     83e:	8f 3f       	cpi	r24, 0xFF	; 255
     840:	19 f0       	breq	.+6      	; 0x848 <CreateKMReport+0x242>
     842:	88 24       	eor	r8, r8
     844:	83 94       	inc	r8
     846:	04 c0       	rjmp	.+8      	; 0x850 <CreateKMReport+0x24a>
				report_mouse_t* newMouseReport = (report_mouse_t*)newMouseHIDReportBuffer;
				newMouseReport->buttons = 0x00;
     848:	10 92 4b 01 	sts	0x014B, r1
     84c:	55 24       	eor	r5, r5
     84e:	53 94       	inc	r5
			break;
		default:
			break;
		}
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     850:	0b 81       	ldd	r16, Y+3	; 0x03
     852:	1c 81       	ldd	r17, Y+4	; 0x04
     854:	f8 01       	movw	r30, r16
     856:	84 85       	ldd	r24, Z+12	; 0x0c
     858:	95 85       	ldd	r25, Z+13	; 0x0d
     85a:	9c 01       	movw	r18, r24
     85c:	3c 83       	std	Y+4, r19	; 0x04
     85e:	2b 83       	std	Y+3, r18	; 0x03
	Button_Task_Sheduler_t * PressedButtons = 0;

	USB_KeyboardReport_Data_t* newKeyboardReport = (USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer;
	uint8_t cursor = 0;

	while(Button != 0){
     860:	2b 81       	ldd	r18, Y+3	; 0x03
     862:	3c 81       	ldd	r19, Y+4	; 0x04
     864:	23 2b       	or	r18, r19
     866:	09 f0       	breq	.+2      	; 0x86a <CreateKMReport+0x264>
     868:	04 cf       	rjmp	.-504    	; 0x672 <CreateKMReport+0x6c>
     86a:	30 92 40 01 	sts	0x0140, r3
     86e:	40 92 41 01 	sts	0x0141, r4
     872:	80 92 3f 01 	sts	0x013F, r8
     876:	50 92 3d 01 	sts	0x013D, r5
     87a:	c0 92 42 01 	sts	0x0142, r12
     87e:	d0 92 43 01 	sts	0x0143, r13
     882:	e0 92 44 01 	sts	0x0144, r14
     886:	f0 92 45 01 	sts	0x0145, r15
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}
			// fill end of report with 0x00
			//memcpy_P( PrevRawReportBuffer, RawReport, MIN(GENERIC_REPORT_SIZE, ReportSize) ); 
		if((cursor < sizeof(newKeyboardReport->KeyCode))) memset( newKeyboardReport->KeyCode+ cursor, 0x00, sizeof(newKeyboardReport->KeyCode)-cursor );
     88a:	35 e0       	ldi	r19, 0x05	; 5
     88c:	39 15       	cp	r19, r9
     88e:	70 f0       	brcs	.+28     	; 0x8ac <CreateKMReport+0x2a6>
     890:	29 2d       	mov	r18, r9
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	e2 1b       	sub	r30, r18
     89a:	f3 0b       	sbc	r31, r19
     89c:	2e 5a       	subi	r18, 0xAE	; 174
     89e:	3e 4f       	sbci	r19, 0xFE	; 254
     8a0:	c9 01       	movw	r24, r18
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	af 01       	movw	r20, r30
     8a8:	0e 94 02 14 	call	0x2804	; 0x2804 <memset>

		// Join pressed buttons back to the end of the list
		if(Buttons != 0) {
     8ac:	80 91 40 01 	lds	r24, 0x0140
     8b0:	90 91 41 01 	lds	r25, 0x0141
     8b4:	89 2b       	or	r24, r25
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <CreateKMReport+0x2ba>
			PrevButton->NextTask = (void *) PressedButtons;
     8b8:	f8 01       	movw	r30, r16
     8ba:	b5 86       	std	Z+13, r11	; 0x0d
     8bc:	a4 86       	std	Z+12, r10	; 0x0c
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <CreateKMReport+0x2c2>
		} else {
			Buttons = PressedButtons;
     8c0:	b0 92 41 01 	sts	0x0141, r11
     8c4:	a0 92 40 01 	sts	0x0140, r10
		}
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	3f 90       	pop	r3
     8f2:	2f 90       	pop	r2
     8f4:	08 95       	ret

000008f6 <spam_buttons_task>:
		LEDs_TurnOnLEDs(LEDS_LED2);
	}
}

void spam_buttons_task(uint16_t time_delta)
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
	Button_Task_Sheduler_t * Button;
	//Check Host communication timeout
	if(UpdateCounter > UPDATETIMEOUT){
     900:	80 91 3b 01 	lds	r24, 0x013B
     904:	90 91 3c 01 	lds	r25, 0x013C
     908:	27 e0       	ldi	r18, 0x07	; 7
     90a:	81 3d       	cpi	r24, 0xD1	; 209
     90c:	92 07       	cpc	r25, r18
     90e:	90 f0       	brcs	.+36     	; 0x934 <spam_buttons_task+0x3e>
		Params[mobHP] = 0xFF;		
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	80 93 30 01 	sts	0x0130, r24
		Params[playerHP] = 0xFF;	
     916:	80 93 31 01 	sts	0x0131, r24
		Params[playerCP] = 0xFF;	
     91a:	80 93 32 01 	sts	0x0132, r24
		Params[playerMP] = 0xFF;
     91e:	80 93 33 01 	sts	0x0133, r24
		UpdateCounter = UPDATETIMEOUT;
     922:	80 ed       	ldi	r24, 0xD0	; 208
     924:	97 e0       	ldi	r25, 0x07	; 7
     926:	90 93 3c 01 	sts	0x013C, r25
     92a:	80 93 3b 01 	sts	0x013B, r24
		LEDs_TurnOffLEDs(LEDS_LED2);
     92e:	80 e2       	ldi	r24, 0x20	; 32
     930:	3a dd       	rcall	.-1420   	; 0x3a6 <LEDs_TurnOffLEDs>
     932:	06 c0       	rjmp	.+12     	; 0x940 <spam_buttons_task+0x4a>
	} else {
		UpdateCounter+=time_delta;
     934:	8c 0f       	add	r24, r28
     936:	9d 1f       	adc	r25, r29
     938:	90 93 3c 01 	sts	0x013C, r25
     93c:	80 93 3b 01 	sts	0x013B, r24
	}

	//Decrease button timers
	Button = Buttons;
     940:	10 91 40 01 	lds	r17, 0x0140
     944:	00 91 41 01 	lds	r16, 0x0141
     948:	81 2f       	mov	r24, r17
     94a:	90 2f       	mov	r25, r16
     94c:	9c 01       	movw	r18, r24
     94e:	f9 01       	movw	r30, r18
     950:	ae 01       	movw	r20, r28
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	1a c0       	rjmp	.+52     	; 0x98c <spam_buttons_task+0x96>
	while(Button != 0){
 
		Button->timer= (Button->timer <time_delta) ? 0: Button->timer-time_delta;
     958:	86 81       	ldd	r24, Z+6	; 0x06
     95a:	97 81       	ldd	r25, Z+7	; 0x07
     95c:	a0 85       	ldd	r26, Z+8	; 0x08
     95e:	b1 85       	ldd	r27, Z+9	; 0x09
     960:	84 17       	cp	r24, r20
     962:	95 07       	cpc	r25, r21
     964:	a6 07       	cpc	r26, r22
     966:	b7 07       	cpc	r27, r23
     968:	28 f4       	brcc	.+10     	; 0x974 <spam_buttons_task+0x7e>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e0       	ldi	r26, 0x00	; 0
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	04 c0       	rjmp	.+8      	; 0x97c <spam_buttons_task+0x86>
     974:	84 1b       	sub	r24, r20
     976:	95 0b       	sbc	r25, r21
     978:	a6 0b       	sbc	r26, r22
     97a:	b7 0b       	sbc	r27, r23
     97c:	86 83       	std	Z+6, r24	; 0x06
     97e:	97 83       	std	Z+7, r25	; 0x07
     980:	a0 87       	std	Z+8, r26	; 0x08
     982:	b1 87       	std	Z+9, r27	; 0x09
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     984:	84 85       	ldd	r24, Z+12	; 0x0c
     986:	95 85       	ldd	r25, Z+13	; 0x0d
     988:	9c 01       	movw	r18, r24
     98a:	f9 01       	movw	r30, r18
		UpdateCounter+=time_delta;
	}

	//Decrease button timers
	Button = Buttons;
	while(Button != 0){
     98c:	30 97       	sbiw	r30, 0x00	; 0
     98e:	21 f7       	brne	.-56     	; 0x958 <spam_buttons_task+0x62>
		Button->timer= (Button->timer <time_delta) ? 0: Button->timer-time_delta;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}

	//Decrease absolute timeout timer
	PauseTimer = (PauseTimer <time_delta) ? 0: PauseTimer-time_delta;
     990:	80 91 42 01 	lds	r24, 0x0142
     994:	90 91 43 01 	lds	r25, 0x0143
     998:	a0 91 44 01 	lds	r26, 0x0144
     99c:	b0 91 45 01 	lds	r27, 0x0145
     9a0:	84 17       	cp	r24, r20
     9a2:	95 07       	cpc	r25, r21
     9a4:	a6 07       	cpc	r26, r22
     9a6:	b7 07       	cpc	r27, r23
     9a8:	28 f4       	brcc	.+10     	; 0x9b4 <spam_buttons_task+0xbe>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <spam_buttons_task+0xc6>
     9b4:	84 1b       	sub	r24, r20
     9b6:	95 0b       	sbc	r25, r21
     9b8:	a6 0b       	sbc	r26, r22
     9ba:	b7 0b       	sbc	r27, r23
     9bc:	80 93 42 01 	sts	0x0142, r24
     9c0:	90 93 43 01 	sts	0x0143, r25
     9c4:	a0 93 44 01 	sts	0x0144, r26
     9c8:	b0 93 45 01 	sts	0x0145, r27
	
	//Prepare Keyboard and mouse reports
	if((expectMouseReport == 0)&& (expectKeyboardReport == 0) ){
     9cc:	80 91 3d 01 	lds	r24, 0x013D
     9d0:	88 23       	and	r24, r24
     9d2:	89 f4       	brne	.+34     	; 0x9f6 <spam_buttons_task+0x100>
     9d4:	80 91 3f 01 	lds	r24, 0x013F
     9d8:	88 23       	and	r24, r24
     9da:	69 f4       	brne	.+26     	; 0x9f6 <spam_buttons_task+0x100>
		switch(Mode){
     9dc:	80 91 3a 01 	lds	r24, 0x013A
     9e0:	88 23       	and	r24, r24
     9e2:	19 f0       	breq	.+6      	; 0x9ea <spam_buttons_task+0xf4>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	39 f4       	brne	.+14     	; 0x9f6 <spam_buttons_task+0x100>
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <spam_buttons_task+0xfa>
		case SPAMBUTTONS:
			CreateKMReport(Buttons);
     9ea:	81 2f       	mov	r24, r17
     9ec:	90 2f       	mov	r25, r16
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <spam_buttons_task+0xfe>
			break;
		case HOSTCOMMAND:
			CreateKMReport(HostButton);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	08 de       	rcall	.-1008   	; 0x606 <CreateKMReport>
			break;
		default:
			break;
		}
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	08 95       	ret

00000a00 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 7e 11 	call	0x22fc	; 0x22fc <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     a10:	80 e2       	ldi	r24, 0x20	; 32
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <HID_Device_ProcessControlRequest>

00000a18 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     a20:	80 e1       	ldi	r24, 0x10	; 16
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     a28:	80 e2       	ldi	r24, 0x20	; 32
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     a30:	e2 ee       	ldi	r30, 0xE2	; 226
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	84 60       	ori	r24, 0x04	; 4
     a38:	80 83       	st	Z, r24

	USB_Device_EnableSOFEvents();


//	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     a3a:	08 95       	ret

00000a3c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     a3c:	84 b7       	in	r24, 0x34	; 52
     a3e:	87 7f       	andi	r24, 0xF7	; 247
     a40:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     a42:	88 e1       	ldi	r24, 0x18	; 24
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	80 93 60 00 	sts	0x0060, r24
     a4c:	10 92 60 00 	sts	0x0060, r1
     a50:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	20 e8       	ldi	r18, 0x80	; 128
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	20 93 61 00 	sts	0x0061, r18
     a60:	80 93 61 00 	sts	0x0061, r24
     a64:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     a66:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     a68:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
     a6a:	20 9a       	sbi	0x04, 0	; 4
				PORTB &= ~LEDS_PORTB_LEDS;
     a6c:	28 98       	cbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     a6e:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &= ~LEDS_PORTD_LEDS;
     a70:	5d 98       	cbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     a72:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     a74:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	Buttons_Init();
	LEDs_Init();
	USB_Init();
     a76:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <USB_Init>
	timer_init();
     a7a:	0b d6       	rcall	.+3094   	; 0x1692 <timer_init>

	mouse_driver.send_mouse = &PS2_to_USB_mouse_send;
     a7c:	8e e1       	ldi	r24, 0x1E	; 30
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	90 93 59 01 	sts	0x0159, r25
     a84:	80 93 58 01 	sts	0x0158, r24
	host_set_driver(&mouse_driver);
     a88:	88 e5       	ldi	r24, 0x58	; 88
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	f2 d5       	rcall	.+3044   	; 0x1672 <host_set_driver>
	LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
     a8e:	81 ea       	ldi	r24, 0xA1	; 161
     a90:	8a dc       	rcall	.-1772   	; 0x3a6 <LEDs_TurnOffLEDs>

    uint8_t rcv = ps2_mouse_init();
     a92:	e7 d3       	rcall	.+1998   	; 0x1262 <ps2_mouse_init>
	if(rcv == PS2_MOUSE_NONE ) {
     a94:	88 23       	and	r24, r24
     a96:	11 f4       	brne	.+4      	; 0xa9c <SetupHardware+0x60>
            LEDs_TurnOnLEDs(LEDS_LED1);
     a98:	80 e8       	ldi	r24, 0x80	; 128
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <SetupHardware+0x6c>
        } else if(rcv == PS2_MOUSE_GENIUS5 ) {
     a9c:	85 30       	cpi	r24, 0x05	; 5
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <SetupHardware+0x68>
            LEDs_TurnOnLEDs(LEDS_LED2);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <SetupHardware+0x6c>
        } else if(rcv == PS2_MOUSE_STANDARD ) {
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <SetupHardware+0x6e>
            LEDs_TurnOnLEDs(LEDS_LED3);
     aa8:	6f cc       	rjmp	.-1826   	; 0x388 <LEDs_TurnOnLEDs>
        } else if(rcv == PS2_MOUSE_MIE ) {
     aaa:	83 30       	cpi	r24, 0x03	; 3
     aac:	21 f4       	brne	.+8      	; 0xab6 <SetupHardware+0x7a>
            LEDs_TurnOnLEDs(LEDS_LED3);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	6b dc       	rcall	.-1834   	; 0x388 <LEDs_TurnOnLEDs>
            LEDs_TurnOnLEDs(LEDS_LED2);
     ab2:	80 e2       	ldi	r24, 0x20	; 32
     ab4:	69 cc       	rjmp	.-1838   	; 0x388 <LEDs_TurnOnLEDs>
     ab6:	08 95       	ret

00000ab8 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     ab8:	1f 93       	push	r17

	static uint16_t last_led_timer = 0;

	SetupHardware();
     aba:	c0 df       	rcall	.-128    	; 0xa3c <SetupHardware>

	((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier =	0;
     abc:	10 92 50 01 	sts	0x0150, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ac0:	80 ea       	ldi	r24, 0xA0	; 160
     ac2:	9f e0       	ldi	r25, 0x0F	; 15
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <main+0xc>
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     ac8:	8c b1       	in	r24, 0x0c	; 12
	//ReadConfig();
	_delay_us(1000);
	prevButton1State =  Buttons_GetStatus()& BUTTONS_BUTTON1;
     aca:	80 95       	com	r24
     acc:	84 70       	andi	r24, 0x04	; 4
     ace:	80 93 48 01 	sts	0x0148, r24

	LEDs_TurnOffLEDs(LEDS_ALL_LEDS);
     ad2:	81 ea       	ldi	r24, 0xA1	; 161
     ad4:	68 dc       	rcall	.-1840   	; 0x3a6 <LEDs_TurnOffLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ad6:	78 94       	sei
		
	for (;;)
	{			
		uint8_t Button1State = Buttons_GetStatus();
		if(prevButton1State > Button1State){
			deviceState = 1-deviceState;
     ad8:	11 e0       	ldi	r17, 0x01	; 1
     ada:	9c b1       	in	r25, 0x0c	; 12
     adc:	90 95       	com	r25
     ade:	94 70       	andi	r25, 0x04	; 4
	GlobalInterruptEnable();
		
	for (;;)
	{			
		uint8_t Button1State = Buttons_GetStatus();
		if(prevButton1State > Button1State){
     ae0:	80 91 48 01 	lds	r24, 0x0148
     ae4:	98 17       	cp	r25, r24
     ae6:	30 f4       	brcc	.+12     	; 0xaf4 <main+0x3c>
			deviceState = 1-deviceState;
     ae8:	80 91 3e 01 	lds	r24, 0x013E
     aec:	21 2f       	mov	r18, r17
     aee:	28 1b       	sub	r18, r24
     af0:	20 93 3e 01 	sts	0x013E, r18
		}
		prevButton1State = Button1State;
     af4:	90 93 48 01 	sts	0x0148, r25
		
		led_indicator_task(timer_elapsed(last_led_timer));
     af8:	80 91 49 01 	lds	r24, 0x0149
     afc:	90 91 4a 01 	lds	r25, 0x014A
     b00:	de d5       	rcall	.+3004   	; 0x16be <timer_elapsed>
     b02:	b4 dc       	rcall	.-1688   	; 0x46c <led_indicator_task>
		spam_buttons_task(timer_elapsed(last_led_timer));
     b04:	80 91 49 01 	lds	r24, 0x0149
     b08:	90 91 4a 01 	lds	r25, 0x014A
     b0c:	d8 d5       	rcall	.+2992   	; 0x16be <timer_elapsed>
     b0e:	f3 de       	rcall	.-538    	; 0x8f6 <spam_buttons_task>
		last_led_timer = timer_read();
     b10:	c9 d5       	rcall	.+2962   	; 0x16a4 <timer_read>
     b12:	90 93 4a 01 	sts	0x014A, r25
     b16:	80 93 49 01 	sts	0x0149, r24

		ps2_mouse_task();
     b1a:	97 d3       	rcall	.+1838   	; 0x124a <ps2_mouse_task>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 8e 10 	call	0x211c	; 0x211c <HID_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     b24:	80 e1       	ldi	r24, 0x10	; 16
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 8e 10 	call	0x211c	; 0x211c <HID_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     b2c:	80 e2       	ldi	r24, 0x20	; 32
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	0e 94 8e 10 	call	0x211c	; 0x211c <HID_Device_USBTask>
		USB_USBTask();
     b34:	0e 94 79 10 	call	0x20f2	; 0x20f2 <USB_USBTask>
     b38:	d0 cf       	rjmp	.-96     	; 0xada <main+0x22>

00000b3a <WriteConfig>:
	}
	LEDs_TurnOffLEDs(LEDS_LED1);
	Buttons = 0;
}

void WriteConfig(void){
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <WriteConfig+0x12>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <WriteConfig+0x14>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	Button_Task_Sheduler_t * Button;
	uint8_t counter=0;
	
	Button = Buttons;
     b54:	00 91 40 01 	lds	r16, 0x0140
     b58:	10 91 41 01 	lds	r17, 0x0141
     b5c:	ff 24       	eor	r15, r15
		data[1] = (uint8_t) (Button->PauseTime&0xff);
		data[2] = (uint8_t) (Button->ReleaseTime&0xff);
		data[3] = (uint8_t) ((Button->ReleaseTime >> 8)&0xff);
		data[4] = (uint8_t) (Button->ConditionTime&0xff);

		eeprom_write_block(data, (uint8_t *)(CONFIG_DATA_ADDRESS + counter*CONFIG_DATA_BLOCK_SIZE), CONFIG_DATA_BLOCK_SIZE);
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	e9 2e       	mov	r14, r25
     b62:	6e 01       	movw	r12, r28
     b64:	08 94       	sec
     b66:	c1 1c       	adc	r12, r1
     b68:	d1 1c       	adc	r13, r1
     b6a:	1b c0       	rjmp	.+54     	; 0xba2 <WriteConfig+0x68>
	uint8_t counter=0;
	
	Button = Buttons;
	while(Button !=0){
		uint8_t data[CONFIG_DATA_BLOCK_SIZE];
		data[0] = Button->Code;
     b6c:	f8 01       	movw	r30, r16
     b6e:	80 81       	ld	r24, Z
     b70:	89 83       	std	Y+1, r24	; 0x01
		data[1] = (uint8_t) (Button->PauseTime&0xff);
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	8a 83       	std	Y+2, r24	; 0x02
		data[2] = (uint8_t) (Button->ReleaseTime&0xff);
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	8b 83       	std	Y+3, r24	; 0x03
		data[3] = (uint8_t) ((Button->ReleaseTime >> 8)&0xff);
     b7a:	83 81       	ldd	r24, Z+3	; 0x03
     b7c:	8c 83       	std	Y+4, r24	; 0x04
		data[4] = (uint8_t) (Button->ConditionTime&0xff);
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	8d 83       	std	Y+5, r24	; 0x05

		eeprom_write_block(data, (uint8_t *)(CONFIG_DATA_ADDRESS + counter*CONFIG_DATA_BLOCK_SIZE), CONFIG_DATA_BLOCK_SIZE);
     b82:	fe 9c       	mul	r15, r14
     b84:	b0 01       	movw	r22, r0
     b86:	11 24       	eor	r1, r1
     b88:	6e 5f       	subi	r22, 0xFE	; 254
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	c6 01       	movw	r24, r12
     b8e:	45 e0       	ldi	r20, 0x05	; 5
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	0e 94 21 14 	call	0x2842	; 0x2842 <__eewr_block_m32u4>
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     b96:	f8 01       	movw	r30, r16
     b98:	24 85       	ldd	r18, Z+12	; 0x0c
     b9a:	35 85       	ldd	r19, Z+13	; 0x0d
     b9c:	c9 01       	movw	r24, r18
     b9e:	8c 01       	movw	r16, r24
		counter++;
     ba0:	f3 94       	inc	r15
void WriteConfig(void){
	Button_Task_Sheduler_t * Button;
	uint8_t counter=0;
	
	Button = Buttons;
	while(Button !=0){
     ba2:	01 15       	cp	r16, r1
     ba4:	11 05       	cpc	r17, r1
     ba6:	11 f7       	brne	.-60     	; 0xb6c <WriteConfig+0x32>

		eeprom_write_block(data, (uint8_t *)(CONFIG_DATA_ADDRESS + counter*CONFIG_DATA_BLOCK_SIZE), CONFIG_DATA_BLOCK_SIZE);
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
		counter++;
	}
	eeprom_write_byte((uint8_t*)CONFIG_HEADER_ADDRESS, counter);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	6f 2d       	mov	r22, r15
     bae:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eewr_byte_m32u4>
	eeprom_write_byte((uint8_t*)CONFIG_MODIFIER_ADDRESS, ((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	60 91 50 01 	lds	r22, 0x0150
     bba:	0e 94 2a 14 	call	0x2854	; 0x2854 <__eewr_byte_m32u4>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	08 95       	ret

00000bda <List_Delete_All_Coditions>:
		}
		free(Condition); 
	} 
}

void List_Delete_All_Coditions(Button_Task_Sheduler_t * Button){
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
	Button_Task_Condition_t * Condition =0;
	Button_Task_Condition_t * PrevCondition =0;

	Condition = Button->condition;
     be4:	ea 85       	ldd	r30, Y+10	; 0x0a
     be6:	fb 85       	ldd	r31, Y+11	; 0x0b
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <List_Delete_All_Coditions+0x22>
	while(Condition !=0){
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
     bea:	13 81       	ldd	r17, Z+3	; 0x03
     bec:	04 81       	ldd	r16, Z+4	; 0x04
		free(PrevCondition);
     bee:	cf 01       	movw	r24, r30
     bf0:	0e 94 94 13 	call	0x2728	; 0x2728 <free>
     bf4:	21 2f       	mov	r18, r17
     bf6:	30 2f       	mov	r19, r16
     bf8:	c9 01       	movw	r24, r18
     bfa:	fc 01       	movw	r30, r24
void List_Delete_All_Coditions(Button_Task_Sheduler_t * Button){
	Button_Task_Condition_t * Condition =0;
	Button_Task_Condition_t * PrevCondition =0;

	Condition = Button->condition;
	while(Condition !=0){
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	a9 f7       	brne	.-22     	; 0xbea <List_Delete_All_Coditions+0x10>
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
		free(PrevCondition);
	}
	Button->condition = 0;
     c00:	1b 86       	std	Y+11, r1	; 0x0b
     c02:	1a 86       	std	Y+10, r1	; 0x0a
}
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <List_Delete_All>:
		free(Button); 
	} 
}


void List_Delete_All(void){
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
	Button_Task_Sheduler_t * Button;
	Button_Task_Sheduler_t * PrevButton;

	Button = Buttons;
     c16:	c0 91 40 01 	lds	r28, 0x0140
     c1a:	d0 91 41 01 	lds	r29, 0x0141
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <List_Delete_All+0x28>
	while(Button !=0){
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     c20:	1c 85       	ldd	r17, Y+12	; 0x0c
     c22:	0d 85       	ldd	r16, Y+13	; 0x0d
		List_Delete_All_Coditions(PrevButton);
     c24:	ce 01       	movw	r24, r28
     c26:	d9 df       	rcall	.-78     	; 0xbda <List_Delete_All_Coditions>
		free(PrevButton);
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 94 13 	call	0x2728	; 0x2728 <free>
     c2e:	21 2f       	mov	r18, r17
     c30:	30 2f       	mov	r19, r16
     c32:	c9 01       	movw	r24, r18
     c34:	ec 01       	movw	r28, r24
void List_Delete_All(void){
	Button_Task_Sheduler_t * Button;
	Button_Task_Sheduler_t * PrevButton;

	Button = Buttons;
	while(Button !=0){
     c36:	20 97       	sbiw	r28, 0x00	; 0
     c38:	99 f7       	brne	.-26     	; 0xc20 <List_Delete_All+0x12>
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
		List_Delete_All_Coditions(PrevButton);
		free(PrevButton);
	}
	LEDs_TurnOffLEDs(LEDS_LED1);
     c3a:	80 e8       	ldi	r24, 0x80	; 128
     c3c:	b4 db       	rcall	.-2200   	; 0x3a6 <LEDs_TurnOffLEDs>
	Buttons = 0;
     c3e:	10 92 41 01 	sts	0x0141, r1
     c42:	10 92 40 01 	sts	0x0140, r1
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <List_Delete_Node>:
			Buttons = PressedButtons;
		}
}


void List_Delete_Node(uint8_t KeyCode){
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	68 2f       	mov	r22, r24
	Button_Task_Sheduler_t * Button=0;
	Button_Task_Sheduler_t * PrevButton=0;
	
	Button = Buttons;
     c56:	40 91 40 01 	lds	r20, 0x0140
     c5a:	50 91 41 01 	lds	r21, 0x0141
     c5e:	ea 01       	movw	r28, r20
     c60:	e0 e0       	ldi	r30, 0x00	; 0
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <List_Delete_Node+0x20>
	while(Button !=0 && (Button->Code != KeyCode)){
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     c66:	fe 01       	movw	r30, r28
     c68:	8c 85       	ldd	r24, Y+12	; 0x0c
     c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c6c:	9c 01       	movw	r18, r24
     c6e:	e9 01       	movw	r28, r18
void List_Delete_Node(uint8_t KeyCode){
	Button_Task_Sheduler_t * Button=0;
	Button_Task_Sheduler_t * PrevButton=0;
	
	Button = Buttons;
	while(Button !=0 && (Button->Code != KeyCode)){
     c70:	20 97       	sbiw	r28, 0x00	; 0
     c72:	b9 f0       	breq	.+46     	; 0xca2 <List_Delete_Node+0x52>
     c74:	88 81       	ld	r24, Y
     c76:	86 17       	cp	r24, r22
     c78:	b1 f7       	brne	.-20     	; 0xc66 <List_Delete_Node+0x16>
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <List_Delete_Node+0x46>
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}
	if(Button != 0){		
		if(Button == Buttons) {
			Buttons = Button->NextTask;	
     c7c:	90 93 41 01 	sts	0x0141, r25
     c80:	80 93 40 01 	sts	0x0140, r24
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <List_Delete_Node+0x3a>
		} else {
			PrevButton->NextTask = Button->NextTask; 
     c86:	95 87       	std	Z+13, r25	; 0x0d
     c88:	84 87       	std	Z+12, r24	; 0x0c
		}
		List_Delete_All_Coditions(Button);
     c8a:	ce 01       	movw	r24, r28
     c8c:	a6 df       	rcall	.-180    	; 0xbda <List_Delete_All_Coditions>
		free(Button); 
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 94 13 	call	0x2728	; 0x2728 <free>
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <List_Delete_Node+0x52>
     c96:	8c 85       	ldd	r24, Y+12	; 0x0c
     c98:	9d 85       	ldd	r25, Y+13	; 0x0d
	while(Button !=0 && (Button->Code != KeyCode)){
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}
	if(Button != 0){		
		if(Button == Buttons) {
     c9a:	c4 17       	cp	r28, r20
     c9c:	d5 07       	cpc	r29, r21
     c9e:	99 f7       	brne	.-26     	; 0xc86 <List_Delete_Node+0x36>
     ca0:	ed cf       	rjmp	.-38     	; 0xc7c <List_Delete_Node+0x2c>
			PrevButton->NextTask = Button->NextTask; 
		}
		List_Delete_All_Coditions(Button);
		free(Button); 
	} 
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <List_Delete_Condition>:
		Condition->Min = cmin;
		Condition->Max =cmax; 
	} 
}

void List_Delete_Condition(uint8_t KeyCode, uint8_t ctype){
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	16 2f       	mov	r17, r22
	Button_Task_Sheduler_t * Button=0;
	Button_Task_Condition_t * Condition =0;
	Button_Task_Condition_t * PrevCondition =0;
	Button = List_Find_Node( KeyCode);
     cb0:	8c db       	rcall	.-2280   	; 0x3ca <List_Find_Node>
     cb2:	ec 01       	movw	r28, r24
	if(Button == 0) return;
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	11 f1       	breq	.+68     	; 0xcfc <List_Delete_Condition+0x54>
	Condition = Button->condition;
     cb8:	4a 85       	ldd	r20, Y+10	; 0x0a
     cba:	5b 85       	ldd	r21, Y+11	; 0x0b
     cbc:	fa 01       	movw	r30, r20
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <List_Delete_Condition+0x26>

	while(Condition !=0 && (Condition->Type != ctype)){
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
     cc4:	df 01       	movw	r26, r30
     cc6:	83 81       	ldd	r24, Z+3	; 0x03
     cc8:	94 81       	ldd	r25, Z+4	; 0x04
     cca:	9c 01       	movw	r18, r24
     ccc:	f9 01       	movw	r30, r18
	Button_Task_Condition_t * PrevCondition =0;
	Button = List_Find_Node( KeyCode);
	if(Button == 0) return;
	Condition = Button->condition;

	while(Condition !=0 && (Condition->Type != ctype)){
     cce:	30 97       	sbiw	r30, 0x00	; 0
     cd0:	a9 f0       	breq	.+42     	; 0xcfc <List_Delete_Condition+0x54>
     cd2:	80 81       	ld	r24, Z
     cd4:	81 17       	cp	r24, r17
     cd6:	b1 f7       	brne	.-20     	; 0xcc4 <List_Delete_Condition+0x1c>
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <List_Delete_Condition+0x48>
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
	}
	if(Condition != 0){		
		if(Condition == Button->condition) {
			Button->condition = Condition->NextCondition;	
     cda:	9b 87       	std	Y+11, r25	; 0x0b
     cdc:	8a 87       	std	Y+10, r24	; 0x0a
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <List_Delete_Condition+0x40>
		} else {
			PrevCondition->NextCondition = Condition->NextCondition; 
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	9c 93       	st	X, r25
     ce4:	8e 93       	st	-X, r24
     ce6:	13 97       	sbiw	r26, 0x03	; 3
		}
		free(Condition); 
     ce8:	cf 01       	movw	r24, r30
     cea:	0e 94 94 13 	call	0x2728	; 0x2728 <free>
     cee:	06 c0       	rjmp	.+12     	; 0xcfc <List_Delete_Condition+0x54>
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	94 81       	ldd	r25, Z+4	; 0x04
	while(Condition !=0 && (Condition->Type != ctype)){
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
	}
	if(Condition != 0){		
		if(Condition == Button->condition) {
     cf4:	e4 17       	cp	r30, r20
     cf6:	f5 07       	cpc	r31, r21
     cf8:	99 f7       	brne	.-26     	; 0xce0 <List_Delete_Condition+0x38>
     cfa:	ef cf       	rjmp	.-34     	; 0xcda <List_Delete_Condition+0x32>
		} else {
			PrevCondition->NextCondition = Condition->NextCondition; 
		}
		free(Condition); 
	} 
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	08 95       	ret

00000d04 <List_Add_Condition>:
			List_Delete_All_Coditions(Button);
	}
//if(Button->ReleaseTime > 1500) LEDs_TurnOnLEDs(LEDS_LED1);
}

Button_Task_Condition_t * List_Add_Condition(uint8_t KeyCode, uint8_t ctype){
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	d6 2e       	mov	r13, r22
	Button_Task_Sheduler_t * Button=0;
	Button_Task_Condition_t * Condition =0;
	Button_Task_Condition_t * PrevCondition =0;
	
	Button = List_Find_Node( KeyCode);
     d14:	5a db       	rcall	.-2380   	; 0x3ca <List_Find_Node>
     d16:	7c 01       	movw	r14, r24
	if(Button == 0) return( (Button_Task_Condition_t *)0);
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	19 f4       	brne	.+6      	; 0xd22 <List_Add_Condition+0x1e>
     d1c:	c0 e0       	ldi	r28, 0x00	; 0
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	29 c0       	rjmp	.+82     	; 0xd74 <List_Add_Condition+0x70>
	Condition = Button->condition;
     d22:	fc 01       	movw	r30, r24
     d24:	c2 85       	ldd	r28, Z+10	; 0x0a
     d26:	d3 85       	ldd	r29, Z+11	; 0x0b
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <List_Add_Condition+0x3a>
	
	while(Condition != 0){
		if(Condition->Type == ctype) return Condition;
     d2e:	88 81       	ld	r24, Y
     d30:	8d 15       	cp	r24, r13
     d32:	01 f1       	breq	.+64     	; 0xd74 <List_Add_Condition+0x70>
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
     d34:	8e 01       	movw	r16, r28
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	9c 01       	movw	r18, r24
     d3c:	e9 01       	movw	r28, r18
	
	Button = List_Find_Node( KeyCode);
	if(Button == 0) return( (Button_Task_Condition_t *)0);
	Condition = Button->condition;
	
	while(Condition != 0){
     d3e:	20 97       	sbiw	r28, 0x00	; 0
     d40:	b1 f7       	brne	.-20     	; 0xd2e <List_Add_Condition+0x2a>
		if(Condition->Type == ctype) return Condition;
		PrevCondition = Condition;
		Condition = (Button_Task_Condition_t *) Condition->NextCondition;
	}
	
	Condition = (Button_Task_Condition_t *)malloc(sizeof(Button_Task_Condition_t));
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 e7 12 	call	0x25ce	; 0x25ce <malloc>
     d4a:	fc 01       	movw	r30, r24
     d4c:	ec 01       	movw	r28, r24
	if(Condition == 0) {
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	19 f4       	brne	.+6      	; 0xd58 <List_Add_Condition+0x54>
		LEDs_TurnOnLEDs(LEDS_LED1);
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	19 db       	rcall	.-2510   	; 0x388 <LEDs_TurnOnLEDs>
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <List_Add_Condition+0x70>
		return( (Button_Task_Condition_t *)0);
	} 

	Condition->NextCondition =  (void *)0;
     d58:	14 82       	std	Z+4, r1	; 0x04
     d5a:	13 82       	std	Z+3, r1	; 0x03
	Condition->Type = ctype;
     d5c:	d0 82       	st	Z, r13
	
	if(Button->condition == 0) {
     d5e:	f7 01       	movw	r30, r14
     d60:	82 85       	ldd	r24, Z+10	; 0x0a
     d62:	93 85       	ldd	r25, Z+11	; 0x0b
     d64:	89 2b       	or	r24, r25
     d66:	19 f4       	brne	.+6      	; 0xd6e <List_Add_Condition+0x6a>
		Button->condition = Condition;
     d68:	d3 87       	std	Z+11, r29	; 0x0b
     d6a:	c2 87       	std	Z+10, r28	; 0x0a
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <List_Add_Condition+0x70>
	} else {
		PrevCondition-> NextCondition = (void *) Condition;
     d6e:	f8 01       	movw	r30, r16
     d70:	d4 83       	std	Z+4, r29	; 0x04
     d72:	c3 83       	std	Z+3, r28	; 0x03
	}
	
	return Condition;	
}
     d74:	ce 01       	movw	r24, r28
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <List_Update_Condition>:

void List_Update_Condition(uint8_t KeyCode, uint8_t ctype, uint8_t cmin, uint8_t cmax){
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	14 2f       	mov	r17, r20
     d8c:	02 2f       	mov	r16, r18
	Button_Task_Condition_t * Condition = 0;
	Condition = List_Add_Condition(KeyCode, ctype);
     d8e:	ba df       	rcall	.-140    	; 0xd04 <List_Add_Condition>
     d90:	fc 01       	movw	r30, r24
	if(Condition != 0){
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	11 f0       	breq	.+4      	; 0xd9a <List_Update_Condition+0x14>
		Condition->Min = cmin;
     d96:	11 83       	std	Z+1, r17	; 0x01
		Condition->Max =cmax; 
     d98:	02 83       	std	Z+2, r16	; 0x02
	} 
}
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <List_Add_Node>:
	}
	return (Button_Task_Sheduler_t *) 0;
}


void List_Add_Node(uint8_t KeyCode, uint8_t PauseTime, uint16_t ReleaseTime, uint8_t ConditionTime){
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	e8 2e       	mov	r14, r24
     db0:	f6 2e       	mov	r15, r22
     db2:	8a 01       	movw	r16, r20
     db4:	d2 2e       	mov	r13, r18
	
	//if(ReleaseTime > 1500) LEDs_TurnOnLEDs(LEDS_LED1);


	
	Button = Buttons;
     db6:	e0 91 40 01 	lds	r30, 0x0140
     dba:	f0 91 41 01 	lds	r31, 0x0141
     dbe:	c0 e0       	ldi	r28, 0x00	; 0
     dc0:	d0 e0       	ldi	r29, 0x00	; 0
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <List_Add_Node+0x2e>
	while(Button !=0 && (Button->Code != KeyCode)){
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
     dc4:	ef 01       	movw	r28, r30
     dc6:	84 85       	ldd	r24, Z+12	; 0x0c
     dc8:	95 85       	ldd	r25, Z+13	; 0x0d
     dca:	9c 01       	movw	r18, r24
     dcc:	f9 01       	movw	r30, r18
	//if(ReleaseTime > 1500) LEDs_TurnOnLEDs(LEDS_LED1);


	
	Button = Buttons;
	while(Button !=0 && (Button->Code != KeyCode)){
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	21 f0       	breq	.+8      	; 0xdda <List_Add_Node+0x3a>
     dd2:	80 81       	ld	r24, Z
     dd4:	8e 15       	cp	r24, r14
     dd6:	b1 f7       	brne	.-20     	; 0xdc4 <List_Add_Node+0x24>
     dd8:	26 c0       	rjmp	.+76     	; 0xe26 <List_Add_Node+0x86>
		PrevButton = Button;
		Button = (Button_Task_Sheduler_t *) Button->NextTask;
	}
	if(Button == 0){
		Button = (Button_Task_Sheduler_t *)malloc(sizeof(Button_Task_Sheduler_t));
     dda:	8e e0       	ldi	r24, 0x0E	; 14
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 e7 12 	call	0x25ce	; 0x25ce <malloc>
     de2:	fc 01       	movw	r30, r24
		if(Button == 0) {
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	19 f4       	brne	.+6      	; 0xdee <List_Add_Node+0x4e>
			LEDs_TurnOnLEDs(LEDS_LED1);
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	ce da       	rcall	.-2660   	; 0x388 <LEDs_TurnOnLEDs>
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <List_Add_Node+0x9c>
		} else {
			Button->state = RELEASED;
     dee:	15 82       	std	Z+5, r1	; 0x05
			Button->timer = 0;
     df0:	16 82       	std	Z+6, r1	; 0x06
     df2:	17 82       	std	Z+7, r1	; 0x07
     df4:	10 86       	std	Z+8, r1	; 0x08
     df6:	11 86       	std	Z+9, r1	; 0x09
			Button->PauseTime =PauseTime; //0.5s grade
     df8:	f1 82       	std	Z+1, r15	; 0x01
			Button->ReleaseTime = ReleaseTime; //0.1s grade
     dfa:	13 83       	std	Z+3, r17	; 0x03
     dfc:	02 83       	std	Z+2, r16	; 0x02
			Button->ConditionTime = ConditionTime; //0.5s grade
     dfe:	d4 82       	std	Z+4, r13	; 0x04
			Button->Code = KeyCode;
     e00:	e0 82       	st	Z, r14
			Button->condition = 0;
     e02:	13 86       	std	Z+11, r1	; 0x0b
     e04:	12 86       	std	Z+10, r1	; 0x0a
			Button->NextTask= (void *)0;
     e06:	15 86       	std	Z+13, r1	; 0x0d
     e08:	14 86       	std	Z+12, r1	; 0x0c
			if(Buttons == 0) Buttons = Button;
     e0a:	80 91 40 01 	lds	r24, 0x0140
     e0e:	90 91 41 01 	lds	r25, 0x0141
     e12:	89 2b       	or	r24, r25
     e14:	29 f4       	brne	.+10     	; 0xe20 <List_Add_Node+0x80>
     e16:	f0 93 41 01 	sts	0x0141, r31
     e1a:	e0 93 40 01 	sts	0x0140, r30
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <List_Add_Node+0x9c>
			else PrevButton->NextTask=(void *)Button;
     e20:	fd 87       	std	Y+13, r31	; 0x0d
     e22:	ec 87       	std	Y+12, r30	; 0x0c
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <List_Add_Node+0x9c>
		}
	} else {
			Button->state = RELEASED;
     e26:	15 82       	std	Z+5, r1	; 0x05
			Button->PauseTime =PauseTime; //0.5s grade
     e28:	f1 82       	std	Z+1, r15	; 0x01
			Button->ReleaseTime = ReleaseTime; //0.1s grade
     e2a:	13 83       	std	Z+3, r17	; 0x03
     e2c:	02 83       	std	Z+2, r16	; 0x02
			Button->ConditionTime = ConditionTime; //0.5s grade
     e2e:	d4 82       	std	Z+4, r13	; 0x04
			Button->timer = 0;
     e30:	16 82       	std	Z+6, r1	; 0x06
     e32:	17 82       	std	Z+7, r1	; 0x07
     e34:	10 86       	std	Z+8, r1	; 0x08
     e36:	11 86       	std	Z+9, r1	; 0x09
			List_Delete_All_Coditions(Button);
     e38:	cf 01       	movw	r24, r30
     e3a:	cf de       	rcall	.-610    	; 0xbda <List_Delete_All_Coditions>
	}
//if(Button->ReleaseTime > 1500) LEDs_TurnOnLEDs(LEDS_LED1);
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	08 95       	ret

00000e4c <ReadConfig>:
	eeprom_write_byte((uint8_t*)CONFIG_HEADER_ADDRESS, counter);
	eeprom_write_byte((uint8_t*)CONFIG_MODIFIER_ADDRESS, ((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier);
}


void ReadConfig(void){
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <ReadConfig+0x12>
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <ReadConfig+0x14>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	uint8_t counter = eeprom_read_byte((uint8_t*)CONFIG_HEADER_ADDRESS);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 19 14 	call	0x2832	; 0x2832 <__eerd_byte_m32u4>
     e6e:	f8 2e       	mov	r15, r24
	((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier = eeprom_read_byte((uint8_t*)CONFIG_MODIFIER_ADDRESS);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 19 14 	call	0x2832	; 0x2832 <__eerd_byte_m32u4>
     e78:	80 93 50 01 	sts	0x0150, r24

	List_Delete_All();
     e7c:	c8 de       	rcall	.-624    	; 0xc0e <List_Delete_All>
	while(counter >0){	
		uint8_t data[CONFIG_DATA_BLOCK_SIZE];
		eeprom_read_block(data, (uint8_t *)(CONFIG_DATA_ADDRESS + (counter-1)*CONFIG_DATA_BLOCK_SIZE), CONFIG_DATA_BLOCK_SIZE);
     e7e:	25 e0       	ldi	r18, 0x05	; 5
     e80:	e2 2e       	mov	r14, r18
     e82:	6e 01       	movw	r12, r28
     e84:	08 94       	sec
     e86:	c1 1c       	adc	r12, r1
     e88:	d1 1c       	adc	r13, r1
     e8a:	15 c0       	rjmp	.+42     	; 0xeb6 <ReadConfig+0x6a>
     e8c:	fe 9c       	mul	r15, r14
     e8e:	b0 01       	movw	r22, r0
     e90:	11 24       	eor	r1, r1
     e92:	63 50       	subi	r22, 0x03	; 3
     e94:	70 40       	sbci	r23, 0x00	; 0
     e96:	c6 01       	movw	r24, r12
     e98:	45 e0       	ldi	r20, 0x05	; 5
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	0e 94 09 14 	call	0x2812	; 0x2812 <__eerd_block_m32u4>
		List_Add_Node(
     ea0:	1c 81       	ldd	r17, Y+4	; 0x04
     ea2:	00 e0       	ldi	r16, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	a8 01       	movw	r20, r16
     ea8:	48 0f       	add	r20, r24
     eaa:	51 1d       	adc	r21, r1
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	6a 81       	ldd	r22, Y+2	; 0x02
     eb0:	2d 81       	ldd	r18, Y+5	; 0x05
     eb2:	76 df       	rcall	.-276    	; 0xda0 <List_Add_Node>
			data[0], 
			data[1], 
			//1000);
			((uint16_t)data[2])+
			((((uint16_t)data[3]) << 8) & 0x0000ff00),data[4]);
		counter--;
     eb4:	fa 94       	dec	r15
void ReadConfig(void){
	uint8_t counter = eeprom_read_byte((uint8_t*)CONFIG_HEADER_ADDRESS);
	((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier = eeprom_read_byte((uint8_t*)CONFIG_MODIFIER_ADDRESS);

	List_Delete_All();
	while(counter >0){	
     eb6:	ff 20       	and	r15, r15
     eb8:	49 f7       	brne	.-46     	; 0xe8c <ReadConfig+0x40>
			//1000);
			((uint16_t)data[2])+
			((((uint16_t)data[3]) << 8) & 0x0000ff00),data[4]);
		counter--;
	}
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	08 95       	ret

00000ed6 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	80 30       	cpi	r24, 0x00	; 0
     ede:	94 07       	cpc	r25, r20
     ee0:	09 f4       	brne	.+2      	; 0xee4 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
     ee2:	7e c0       	rjmp	.+252    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
		  LEDMask |= LEDS_LED3;

		LEDs_SetAllLEDs(LEDMask);
		*/
	} else if(HIDInterfaceInfo == &Generic_HID_Interface) {
     ee4:	80 52       	subi	r24, 0x20	; 32
     ee6:	91 40       	sbci	r25, 0x01	; 1
     ee8:	09 f0       	breq	.+2      	; 0xeec <CALLBACK_HID_Device_ProcessHIDReport+0x16>
     eea:	7a c0       	rjmp	.+244    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
		uint8_t *RawReport = (uint8_t*)ReportData;
     eec:	f9 01       	movw	r30, r18
		uint8_t Service = RawReport[0];
     eee:	90 81       	ld	r25, Z
		
		if(Service == INTERFACE_ID_Keyboard){
     ef0:	99 23       	and	r25, r25
     ef2:	09 f0       	breq	.+2      	; 0xef6 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
     ef4:	5c c0       	rjmp	.+184    	; 0xfae <CALLBACK_HID_Device_ProcessHIDReport+0xd8>
			uint8_t Command = RawReport[1];	
			uint16_t tmp  = 256*RawReport[5]+RawReport[4];
     ef6:	e9 01       	movw	r28, r18
     ef8:	25 96       	adiw	r28, 0x05	; 5
     efa:	25 81       	ldd	r18, Z+5	; 0x05
     efc:	df 01       	movw	r26, r30
     efe:	14 96       	adiw	r26, 0x04	; 4
     f00:	94 81       	ldd	r25, Z+4	; 0x04
//			if(tmp > 1500) LEDs_TurnOnLEDs(LEDS_LED1);

			switch(Command){
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	31 f1       	breq	.+76     	; 0xf54 <CALLBACK_HID_Device_ProcessHIDReport+0x7e>
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	50 f4       	brcc	.+20     	; 0xf20 <CALLBACK_HID_Device_ProcessHIDReport+0x4a>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <CALLBACK_HID_Device_ProcessHIDReport+0x62>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	80 f0       	brcs	.+32     	; 0xf34 <CALLBACK_HID_Device_ProcessHIDReport+0x5e>
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	91 f0       	breq	.+36     	; 0xf3c <CALLBACK_HID_Device_ProcessHIDReport+0x66>
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	09 f0       	breq	.+2      	; 0xf1e <CALLBACK_HID_Device_ProcessHIDReport+0x48>
     f1c:	61 c0       	rjmp	.+194    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
     f1e:	17 c0       	rjmp	.+46     	; 0xf4e <CALLBACK_HID_Device_ProcessHIDReport+0x78>
     f20:	86 30       	cpi	r24, 0x06	; 6
     f22:	11 f1       	breq	.+68     	; 0xf68 <CALLBACK_HID_Device_ProcessHIDReport+0x92>
     f24:	86 30       	cpi	r24, 0x06	; 6
     f26:	c0 f0       	brcs	.+48     	; 0xf58 <CALLBACK_HID_Device_ProcessHIDReport+0x82>
     f28:	87 30       	cpi	r24, 0x07	; 7
     f2a:	79 f1       	breq	.+94     	; 0xf8a <CALLBACK_HID_Device_ProcessHIDReport+0xb4>
     f2c:	88 30       	cpi	r24, 0x08	; 8
     f2e:	09 f0       	breq	.+2      	; 0xf32 <CALLBACK_HID_Device_ProcessHIDReport+0x5c>
     f30:	57 c0       	rjmp	.+174    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <CALLBACK_HID_Device_ProcessHIDReport+0x8a>
				case CMD_WRITE_CONFIG:
					WriteConfig();
     f34:	02 de       	rcall	.-1020   	; 0xb3a <WriteConfig>
     f36:	54 c0       	rjmp	.+168    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_READ_CONFIG:
					ReadConfig();
     f38:	89 df       	rcall	.-238    	; 0xe4c <ReadConfig>
     f3a:	52 c0       	rjmp	.+164    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_ADD_NODE:
					List_Add_Node(
     f3c:	52 2f       	mov	r21, r18
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	49 0f       	add	r20, r25
     f42:	51 1d       	adc	r21, r1
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	63 81       	ldd	r22, Z+3	; 0x03
     f48:	26 81       	ldd	r18, Z+6	; 0x06
     f4a:	2a df       	rcall	.-428    	; 0xda0 <List_Add_Node>
     f4c:	49 c0       	rjmp	.+146    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
						RawReport[3], 
						tmp,
						RawReport[6]);
					break;
				case CMD_DELETE_NODE:
					List_Delete_Node(RawReport[2]);
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	7f de       	rcall	.-770    	; 0xc50 <List_Delete_Node>
     f52:	46 c0       	rjmp	.+140    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_DELETE_ALL:
					List_Delete_All();
     f54:	5c de       	rcall	.-840    	; 0xc0e <List_Delete_All>
     f56:	44 c0       	rjmp	.+136    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_SET_MODIFIER:
					((USB_KeyboardReport_Data_t*)newKeyboardHIDReportBuffer)->Modifier = RawReport[2];
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	80 93 50 01 	sts	0x0150, r24
     f5e:	40 c0       	rjmp	.+128    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_SET_MODE:
					Mode = RawReport[2];
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	80 93 3a 01 	sts	0x013A, r24
     f66:	3c c0       	rjmp	.+120    	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_SET_HPCPMP:
					Params[mobHP] = RawReport[2];		
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	80 93 30 01 	sts	0x0130, r24
					Params[playerHP] = RawReport[3];	
     f6e:	83 81       	ldd	r24, Z+3	; 0x03
     f70:	80 93 31 01 	sts	0x0131, r24
					Params[playerCP] = RawReport[4];	
     f74:	8c 91       	ld	r24, X
     f76:	80 93 32 01 	sts	0x0132, r24
					Params[playerMP] = RawReport[5];	
     f7a:	88 81       	ld	r24, Y
     f7c:	80 93 33 01 	sts	0x0133, r24
					UpdateCounter=0;
     f80:	10 92 3c 01 	sts	0x013C, r1
     f84:	10 92 3b 01 	sts	0x013B, r1
     f88:	2b c0       	rjmp	.+86     	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					break;
				case CMD_ADD_NODE_CONDITION:
					if( ((RawReport[4] < 101) && (RawReport[5] < 101) && (RawReport[4] >= RawReport[5])) ||
     f8a:	95 36       	cpi	r25, 0x65	; 101
     f8c:	28 f4       	brcc	.+10     	; 0xf98 <CALLBACK_HID_Device_ProcessHIDReport+0xc2>
     f8e:	25 36       	cpi	r18, 0x65	; 101
     f90:	48 f4       	brcc	.+18     	; 0xfa4 <CALLBACK_HID_Device_ProcessHIDReport+0xce>
     f92:	92 17       	cp	r25, r18
     f94:	38 f0       	brcs	.+14     	; 0xfa4 <CALLBACK_HID_Device_ProcessHIDReport+0xce>
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <CALLBACK_HID_Device_ProcessHIDReport+0xc6>
     f98:	25 36       	cpi	r18, 0x65	; 101
     f9a:	20 f0       	brcs	.+8      	; 0xfa4 <CALLBACK_HID_Device_ProcessHIDReport+0xce>
						((RawReport[4] > 100) && (RawReport[5] > 100))){
						List_Delete_Condition(
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	63 81       	ldd	r22, Z+3	; 0x03
     fa0:	83 de       	rcall	.-762    	; 0xca8 <List_Delete_Condition>
     fa2:	1e c0       	rjmp	.+60     	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
							RawReport[2],    //Key Code
							RawReport[3]);   // Condition Type
					} else {
						List_Update_Condition(
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	63 81       	ldd	r22, Z+3	; 0x03
     fa8:	49 2f       	mov	r20, r25
     faa:	ed de       	rcall	.-550    	; 0xd86 <List_Update_Condition>
     fac:	19 c0       	rjmp	.+50     	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
					}
					break;
				default:
					break;
			}
		} else if(Service == INTERFACE_ID_Mouse){
     fae:	91 30       	cpi	r25, 0x01	; 1
     fb0:	71 f4       	brne	.+28     	; 0xfce <CALLBACK_HID_Device_ProcessHIDReport+0xf8>
			report_mouse_t* newMouseReport = (report_mouse_t*)newMouseHIDReportBuffer;
			newMouseReport->x =	RawReport[1]-128;
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	80 58       	subi	r24, 0x80	; 128
     fb6:	80 93 4c 01 	sts	0x014C, r24
			newMouseReport->y =	RawReport[2]-128;
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	80 58       	subi	r24, 0x80	; 128
     fbe:	80 93 4d 01 	sts	0x014D, r24
			newMouseReport->buttons =	RawReport[3];
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	80 93 4b 01 	sts	0x014B, r24
			expectMouseReport = 1;		
     fc8:	90 93 3d 01 	sts	0x013D, r25
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
		}else if(Service == INTERFACE_ID_GenericHID){
     fce:	92 30       	cpi	r25, 0x02	; 2
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <CALLBACK_HID_Device_ProcessHIDReport+0x10a>
			deviceState =	RawReport[1];
     fd2:	81 81       	ldd	r24, Z+1	; 0x01
     fd4:	80 93 3e 01 	sts	0x013E, r24
			expectMouseReport = 0;		
     fd8:	10 92 3d 01 	sts	0x013D, r1
			expectKeyboardReport = 0;
     fdc:	10 92 3f 01 	sts	0x013F, r1
		}
		
	}
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     fe6:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     fe8:	93 30       	cpi	r25, 0x03	; 3
     fea:	c1 f0       	breq	.+48     	; 0x101c <CALLBACK_USB_GetDescriptor+0x36>
     fec:	94 30       	cpi	r25, 0x04	; 4
     fee:	30 f4       	brcc	.+12     	; 0xffc <CALLBACK_USB_GetDescriptor+0x16>
     ff0:	91 30       	cpi	r25, 0x01	; 1
     ff2:	51 f0       	breq	.+20     	; 0x1008 <CALLBACK_USB_GetDescriptor+0x22>
     ff4:	92 30       	cpi	r25, 0x02	; 2
     ff6:	09 f0       	breq	.+2      	; 0xffa <CALLBACK_USB_GetDescriptor+0x14>
     ff8:	4f c0       	rjmp	.+158    	; 0x1098 <CALLBACK_USB_GetDescriptor+0xb2>
     ffa:	0b c0       	rjmp	.+22     	; 0x1012 <CALLBACK_USB_GetDescriptor+0x2c>
     ffc:	91 32       	cpi	r25, 0x21	; 33
     ffe:	21 f1       	breq	.+72     	; 0x1048 <CALLBACK_USB_GetDescriptor+0x62>
    1000:	92 32       	cpi	r25, 0x22	; 34
    1002:	09 f0       	breq	.+2      	; 0x1006 <CALLBACK_USB_GetDescriptor+0x20>
    1004:	49 c0       	rjmp	.+146    	; 0x1098 <CALLBACK_USB_GetDescriptor+0xb2>
    1006:	32 c0       	rjmp	.+100    	; 0x106c <CALLBACK_USB_GetDescriptor+0x86>
    1008:	e8 e5       	ldi	r30, 0x58	; 88
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	22 e1       	ldi	r18, 0x12	; 18
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	47 c0       	rjmp	.+142    	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
    1012:	ea e6       	ldi	r30, 0x6A	; 106
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	24 e5       	ldi	r18, 0x54	; 84
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	42 c0       	rjmp	.+132    	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	51 f0       	breq	.+20     	; 0x1034 <CALLBACK_USB_GetDescriptor+0x4e>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	20 f0       	brcs	.+8      	; 0x102c <CALLBACK_USB_GetDescriptor+0x46>
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	09 f0       	breq	.+2      	; 0x102a <CALLBACK_USB_GetDescriptor+0x44>
    1028:	37 c0       	rjmp	.+110    	; 0x1098 <CALLBACK_USB_GetDescriptor+0xb2>
    102a:	08 c0       	rjmp	.+16     	; 0x103c <CALLBACK_USB_GetDescriptor+0x56>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    102c:	ee eb       	ldi	r30, 0xBE	; 190
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	84 91       	lpm	r24, Z+
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <CALLBACK_USB_GetDescriptor+0x5c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1034:	e2 ec       	ldi	r30, 0xC2	; 194
    1036:	f1 e0       	ldi	r31, 0x01	; 1
    1038:	84 91       	lpm	r24, Z+
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <CALLBACK_USB_GetDescriptor+0x5c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    103c:	e4 ed       	ldi	r30, 0xD4	; 212
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	84 91       	lpm	r24, Z+
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	2c c0       	rjmp	.+88     	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
					break;
			}

			break;
		case HID_DTYPE_HID:
			switch (wIndex)
    1048:	61 30       	cpi	r22, 0x01	; 1
    104a:	41 f0       	breq	.+16     	; 0x105c <CALLBACK_USB_GetDescriptor+0x76>
    104c:	61 30       	cpi	r22, 0x01	; 1
    104e:	18 f0       	brcs	.+6      	; 0x1056 <CALLBACK_USB_GetDescriptor+0x70>
    1050:	62 30       	cpi	r22, 0x02	; 2
    1052:	11 f5       	brne	.+68     	; 0x1098 <CALLBACK_USB_GetDescriptor+0xb2>
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <CALLBACK_USB_GetDescriptor+0x80>
    1056:	ec e7       	ldi	r30, 0x7C	; 124
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <CALLBACK_USB_GetDescriptor+0x7a>
    105c:	e5 e9       	ldi	r30, 0x95	; 149
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	29 e0       	ldi	r18, 0x09	; 9
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
				case INTERFACE_ID_Mouse:
					Address = &ConfigurationDescriptor.HID2_MouseHID;
					Size    = sizeof(USB_HID_Descriptor_HID_t);
					break;
    1066:	ee ea       	ldi	r30, 0xAE	; 174
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	fa cf       	rjmp	.-12     	; 0x1060 <CALLBACK_USB_GetDescriptor+0x7a>
					break;
			}

			break;
		case HID_DTYPE_Report:
			switch (wIndex)
    106c:	61 30       	cpi	r22, 0x01	; 1
    106e:	51 f0       	breq	.+20     	; 0x1084 <CALLBACK_USB_GetDescriptor+0x9e>
    1070:	61 30       	cpi	r22, 0x01	; 1
    1072:	18 f0       	brcs	.+6      	; 0x107a <CALLBACK_USB_GetDescriptor+0x94>
    1074:	62 30       	cpi	r22, 0x02	; 2
    1076:	81 f4       	brne	.+32     	; 0x1098 <CALLBACK_USB_GetDescriptor+0xb2>
    1078:	0a c0       	rjmp	.+20     	; 0x108e <CALLBACK_USB_GetDescriptor+0xa8>
    107a:	e9 ef       	ldi	r30, 0xF9	; 249
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	2f e3       	ldi	r18, 0x3F	; 63
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
    1084:	ec ea       	ldi	r30, 0xAC	; 172
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	2d e4       	ldi	r18, 0x4D	; 77
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
					Size    = sizeof(KeyboardReport);
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
					Size    = sizeof(MouseReport);
					break;
    108e:	e8 e3       	ldi	r30, 0x38	; 56
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	20 e2       	ldi	r18, 0x20	; 32
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <CALLBACK_USB_GetDescriptor+0xba>
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    10a0:	ed 93       	st	X+, r30
    10a2:	fc 93       	st	X, r31
	return Size;
}
    10a4:	c9 01       	movw	r24, r18
    10a6:	08 95       	ret

000010a8 <ps2_standard_mouse_task>:

void ps2_standard_mouse_task(void)
{
    /* receives packet from mouse */
    uint8_t rcv;
    rcv = ps2_host_send(PS2_MOUSE_READ_DATA);
    10a8:	8b ee       	ldi	r24, 0xEB	; 235
    10aa:	1a d2       	rcall	.+1076   	; 0x14e0 <ps2_host_send>
    if (rcv == PS2_ACK) {
    10ac:	8a 3f       	cpi	r24, 0xFA	; 250
    10ae:	b9 f5       	brne	.+110    	; 0x111e <ps2_standard_mouse_task+0x76>
        mouse_report.buttons = ps2_host_recv_response();
    10b0:	09 d2       	rcall	.+1042   	; 0x14c4 <ps2_host_recv_response>
    10b2:	80 93 6f 01 	sts	0x016F, r24
        mouse_report.x = ps2_host_recv_response();
    10b6:	06 d2       	rcall	.+1036   	; 0x14c4 <ps2_host_recv_response>
    10b8:	80 93 70 01 	sts	0x0170, r24
        mouse_report.y = ps2_host_recv_response();
    10bc:	03 d2       	rcall	.+1030   	; 0x14c4 <ps2_host_recv_response>
    10be:	38 2f       	mov	r19, r24
        //ps2_mouse: fail to get mouse packet
        return;
    }
 
    /* if mouse moves or buttons state changes */
    if (mouse_report.x || mouse_report.y ||
    10c0:	20 91 70 01 	lds	r18, 0x0170
    10c4:	22 23       	and	r18, r18
    10c6:	51 f4       	brne	.+20     	; 0x10dc <ps2_standard_mouse_task+0x34>
    10c8:	88 23       	and	r24, r24
    10ca:	59 f4       	brne	.+22     	; 0x10e2 <ps2_standard_mouse_task+0x3a>
    10cc:	80 91 6f 01 	lds	r24, 0x016F
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	87 70       	andi	r24, 0x07	; 7
    10d4:	90 70       	andi	r25, 0x00	; 0
    10d6:	89 2b       	or	r24, r25
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <ps2_standard_mouse_task+0x3a>
    10da:	17 c0       	rjmp	.+46     	; 0x110a <ps2_standard_mouse_task+0x62>
        //      sign \8-bit/
        //
        // Meanwhile USB HID mouse indicates 8bit data(-127 to 127), note that -128 is not used.
        //
        // This converts PS/2 data into HID value. Use only -127-127 out of PS/2 9-bit.
        mouse_report.x = (mouse_report.x < -127) ? -127 : mouse_report.x;
    10dc:	20 38       	cpi	r18, 0x80	; 128
    10de:	09 f4       	brne	.+2      	; 0x10e2 <ps2_standard_mouse_task+0x3a>
    10e0:	21 e8       	ldi	r18, 0x81	; 129
        mouse_report.x = (mouse_report.x >  127) ?  127 : mouse_report.x;
    10e2:	20 93 70 01 	sts	0x0170, r18
 
        mouse_report.y = (mouse_report.y < -127) ? -127 : mouse_report.y;
    10e6:	30 38       	cpi	r19, 0x80	; 128
    10e8:	09 f4       	brne	.+2      	; 0x10ec <ps2_standard_mouse_task+0x44>
    10ea:	31 e8       	ldi	r19, 0x81	; 129
        mouse_report.y = (mouse_report.y >  127) ?  127 : mouse_report.y;

        // remove sign and overflow flags
        mouse_report.buttons &= PS2_MOUSE_BTN_MASK;
    10ec:	80 91 6f 01 	lds	r24, 0x016F
    10f0:	87 70       	andi	r24, 0x07	; 7
    10f2:	80 93 6f 01 	sts	0x016F, r24

        // invert coordinate of y to conform to USB HID mouse
        mouse_report.y = -mouse_report.y;
    10f6:	31 95       	neg	r19
    10f8:	30 93 71 01 	sts	0x0171, r19
        mouse_report.v = 0;
    10fc:	10 92 72 01 	sts	0x0172, r1
        mouse_report.h = 0;
    1100:	10 92 73 01 	sts	0x0173, r1
        host_mouse_send(&mouse_report);
    1104:	8f e6       	ldi	r24, 0x6F	; 111
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	b9 d2       	rcall	.+1394   	; 0x167c <host_mouse_send>
    }
    // clear report
    mouse_report.x = 0;
    110a:	10 92 70 01 	sts	0x0170, r1
    mouse_report.y = 0;
    110e:	10 92 71 01 	sts	0x0171, r1
    mouse_report.v = 0;
    1112:	10 92 72 01 	sts	0x0172, r1
    mouse_report.h = 0;
    1116:	10 92 73 01 	sts	0x0173, r1
    mouse_report.buttons = 0;
    111a:	10 92 6f 01 	sts	0x016F, r1
    111e:	08 95       	ret

00001120 <ps2_genius_mouse_task>:
    mouse_report.h = 0;
    mouse_report.buttons = 0;
}

void ps2_genius_mouse_task(void)
{
    1120:	1f 93       	push	r17
    /* receives packet from mouse */
    uint8_t rcv;
    uint8_t buttons;
    rcv = ps2_host_send(PS2_MOUSE_READ_DATA);
    1122:	8b ee       	ldi	r24, 0xEB	; 235
    1124:	dd d1       	rcall	.+954    	; 0x14e0 <ps2_host_send>
    if (rcv == PS2_ACK) {
    1126:	8a 3f       	cpi	r24, 0xFA	; 250
    1128:	09 f0       	breq	.+2      	; 0x112c <ps2_genius_mouse_task+0xc>
    112a:	4d c0       	rjmp	.+154    	; 0x11c6 <ps2_genius_mouse_task+0xa6>
        buttons = ps2_host_recv_response();
    112c:	cb d1       	rcall	.+918    	; 0x14c4 <ps2_host_recv_response>
    112e:	18 2f       	mov	r17, r24
        mouse_report.x = ps2_host_recv_response();
    1130:	c9 d1       	rcall	.+914    	; 0x14c4 <ps2_host_recv_response>
    1132:	80 93 70 01 	sts	0x0170, r24
        mouse_report.y = ps2_host_recv_response();
    1136:	c6 d1       	rcall	.+908    	; 0x14c4 <ps2_host_recv_response>
    1138:	80 93 71 01 	sts	0x0171, r24
        mouse_report.v = ps2_host_recv_response();
    113c:	c3 d1       	rcall	.+902    	; 0x14c4 <ps2_host_recv_response>
    113e:	48 2f       	mov	r20, r24
        mouse_report.h = 0;
    1140:	10 92 73 01 	sts	0x0173, r1
    } else {
        //ps2_mouse: fail to get mouse packet
        return;
    }
    mouse_report.buttons = (buttons & PS2_MOUSE_BTN_MASK) | (X_IS_OVF>>3) | (Y_IS_OVF>>3);
    1144:	80 91 6f 01 	lds	r24, 0x016F
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c 01       	movw	r18, r24
    114c:	20 78       	andi	r18, 0x80	; 128
    114e:	30 70       	andi	r19, 0x00	; 0
    1150:	53 e0       	ldi	r21, 0x03	; 3
    1152:	35 95       	asr	r19
    1154:	27 95       	ror	r18
    1156:	5a 95       	dec	r21
    1158:	e1 f7       	brne	.-8      	; 0x1152 <ps2_genius_mouse_task+0x32>
    115a:	80 74       	andi	r24, 0x40	; 64
    115c:	90 70       	andi	r25, 0x00	; 0
    115e:	33 e0       	ldi	r19, 0x03	; 3
    1160:	95 95       	asr	r25
    1162:	87 95       	ror	r24
    1164:	3a 95       	dec	r19
    1166:	e1 f7       	brne	.-8      	; 0x1160 <ps2_genius_mouse_task+0x40>
    1168:	28 2b       	or	r18, r24
    116a:	17 70       	andi	r17, 0x07	; 7
    116c:	21 2b       	or	r18, r17
    116e:	20 93 6f 01 	sts	0x016F, r18


    /* if mouse moves or buttons state changes */
    if (mouse_report.x || mouse_report.y || mouse_report.v ||
    1172:	90 91 70 01 	lds	r25, 0x0170
    1176:	99 23       	and	r25, r25
    1178:	49 f4       	brne	.+18     	; 0x118c <ps2_genius_mouse_task+0x6c>
    117a:	80 91 71 01 	lds	r24, 0x0171
    117e:	88 23       	and	r24, r24
    1180:	41 f4       	brne	.+16     	; 0x1192 <ps2_genius_mouse_task+0x72>
    1182:	44 23       	and	r20, r20
    1184:	31 f4       	brne	.+12     	; 0x1192 <ps2_genius_mouse_task+0x72>
    1186:	22 23       	and	r18, r18
    1188:	21 f4       	brne	.+8      	; 0x1192 <ps2_genius_mouse_task+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <ps2_genius_mouse_task+0x92>
        //      sign \8-bit/
        //
        // Meanwhile USB HID mouse indicates 8bit data(-127 to 127), note that -128 is not used.
        //
        // This converts PS/2 data into HID value. Use only -127-127 out of PS/2 9-bit.
        mouse_report.x = (mouse_report.x < -127) ? -127 : mouse_report.x;
    118c:	90 38       	cpi	r25, 0x80	; 128
    118e:	09 f4       	brne	.+2      	; 0x1192 <ps2_genius_mouse_task+0x72>
    1190:	91 e8       	ldi	r25, 0x81	; 129
        mouse_report.x = (mouse_report.x >  127) ?  127 : mouse_report.x;
    1192:	90 93 70 01 	sts	0x0170, r25
 
        mouse_report.y = (mouse_report.y < -127) ? -127 : mouse_report.y;
    1196:	80 91 71 01 	lds	r24, 0x0171
    119a:	80 38       	cpi	r24, 0x80	; 128
    119c:	09 f4       	brne	.+2      	; 0x11a0 <ps2_genius_mouse_task+0x80>
    119e:	81 e8       	ldi	r24, 0x81	; 129
        mouse_report.y = (mouse_report.y >  127) ?  127 : mouse_report.y;

        // invert coordinate of y to conform to USB HID mouse
        mouse_report.y = -mouse_report.y;
    11a0:	81 95       	neg	r24
    11a2:	80 93 71 01 	sts	0x0171, r24
        mouse_report.v = -mouse_report.v;
    11a6:	41 95       	neg	r20
    11a8:	40 93 72 01 	sts	0x0172, r20
        host_mouse_send(&mouse_report);
    11ac:	8f e6       	ldi	r24, 0x6F	; 111
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	65 d2       	rcall	.+1226   	; 0x167c <host_mouse_send>
    }
    // clear report
    mouse_report.x = 0;
    11b2:	10 92 70 01 	sts	0x0170, r1
    mouse_report.y = 0;
    11b6:	10 92 71 01 	sts	0x0171, r1
    mouse_report.v = 0;
    11ba:	10 92 72 01 	sts	0x0172, r1
    mouse_report.h = 0;
    11be:	10 92 73 01 	sts	0x0173, r1
    mouse_report.buttons = 0;
    11c2:	10 92 6f 01 	sts	0x016F, r1
}
    11c6:	1f 91       	pop	r17
    11c8:	08 95       	ret

000011ca <ps2_mie_mouse_task>:
#define Y_IS_NEG  (mouse_report.buttons & (1<<PS2_MOUSE_Y_SIGN))
#define X_IS_OVF  (mouse_report.buttons & (1<<PS2_MOUSE_X_OVFLW))
#define Y_IS_OVF  (mouse_report.buttons & (1<<PS2_MOUSE_Y_OVFLW))

void ps2_mie_mouse_task(void)
{
    11ca:	1f 93       	push	r17
 
    /* receives packet from mouse */
    uint8_t rcv;
    uint8_t buttons;
    rcv = ps2_host_send(PS2_MOUSE_READ_DATA);
    11cc:	8b ee       	ldi	r24, 0xEB	; 235
    11ce:	88 d1       	rcall	.+784    	; 0x14e0 <ps2_host_send>
    if (rcv == PS2_ACK) {
    11d0:	8a 3f       	cpi	r24, 0xFA	; 250
    11d2:	c9 f5       	brne	.+114    	; 0x1246 <ps2_mie_mouse_task+0x7c>
        buttons = ps2_host_recv_response();
    11d4:	77 d1       	rcall	.+750    	; 0x14c4 <ps2_host_recv_response>
    11d6:	18 2f       	mov	r17, r24
        mouse_report.x = ps2_host_recv_response();
    11d8:	75 d1       	rcall	.+746    	; 0x14c4 <ps2_host_recv_response>
    11da:	80 93 70 01 	sts	0x0170, r24
        mouse_report.y = ps2_host_recv_response();
    11de:	72 d1       	rcall	.+740    	; 0x14c4 <ps2_host_recv_response>
    11e0:	80 93 71 01 	sts	0x0171, r24
        mouse_report.v = ps2_host_recv_response();
    11e4:	6f d1       	rcall	.+734    	; 0x14c4 <ps2_host_recv_response>
    11e6:	28 2f       	mov	r18, r24
        mouse_report.h = 0;
    11e8:	10 92 73 01 	sts	0x0173, r1
    } else {
        //ps2_mouse: fail to get mouse packet
        return;
    }
    mouse_report.buttons = (buttons & PS2_MOUSE_BTN_MASK);
    11ec:	17 70       	andi	r17, 0x07	; 7
    11ee:	10 93 6f 01 	sts	0x016F, r17


    /* if mouse moves or buttons state changes */
    if (mouse_report.x || mouse_report.y || mouse_report.v ||
    11f2:	90 91 70 01 	lds	r25, 0x0170
    11f6:	99 23       	and	r25, r25
    11f8:	49 f4       	brne	.+18     	; 0x120c <ps2_mie_mouse_task+0x42>
    11fa:	80 91 71 01 	lds	r24, 0x0171
    11fe:	88 23       	and	r24, r24
    1200:	41 f4       	brne	.+16     	; 0x1212 <ps2_mie_mouse_task+0x48>
    1202:	22 23       	and	r18, r18
    1204:	31 f4       	brne	.+12     	; 0x1212 <ps2_mie_mouse_task+0x48>
    1206:	11 23       	and	r17, r17
    1208:	21 f4       	brne	.+8      	; 0x1212 <ps2_mie_mouse_task+0x48>
    120a:	13 c0       	rjmp	.+38     	; 0x1232 <ps2_mie_mouse_task+0x68>
        //      sign \8-bit/
        //
        // Meanwhile USB HID mouse indicates 8bit data(-127 to 127), note that -128 is not used.
        //
        // This converts PS/2 data into HID value. Use only -127-127 out of PS/2 9-bit.
        mouse_report.x = (mouse_report.x < -127) ? -127 : mouse_report.x;
    120c:	90 38       	cpi	r25, 0x80	; 128
    120e:	09 f4       	brne	.+2      	; 0x1212 <ps2_mie_mouse_task+0x48>
    1210:	91 e8       	ldi	r25, 0x81	; 129
        mouse_report.x = (mouse_report.x >  127) ?  127 : mouse_report.x;
    1212:	90 93 70 01 	sts	0x0170, r25
 
        mouse_report.y = (mouse_report.y < -127) ? -127 : mouse_report.y;
    1216:	80 91 71 01 	lds	r24, 0x0171
    121a:	80 38       	cpi	r24, 0x80	; 128
    121c:	09 f4       	brne	.+2      	; 0x1220 <ps2_mie_mouse_task+0x56>
    121e:	81 e8       	ldi	r24, 0x81	; 129
        mouse_report.y = (mouse_report.y >  127) ?  127 : mouse_report.y;

        // invert coordinate of y to conform to USB HID mouse
        mouse_report.y = -mouse_report.y;
    1220:	81 95       	neg	r24
    1222:	80 93 71 01 	sts	0x0171, r24
        mouse_report.v = -mouse_report.v;
    1226:	21 95       	neg	r18
    1228:	20 93 72 01 	sts	0x0172, r18
        host_mouse_send(&mouse_report);
    122c:	8f e6       	ldi	r24, 0x6F	; 111
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	25 d2       	rcall	.+1098   	; 0x167c <host_mouse_send>
    }
    // clear report
    mouse_report.x = 0;
    1232:	10 92 70 01 	sts	0x0170, r1
    mouse_report.y = 0;
    1236:	10 92 71 01 	sts	0x0171, r1
    mouse_report.v = 0;
    123a:	10 92 72 01 	sts	0x0172, r1
    mouse_report.h = 0;
    123e:	10 92 73 01 	sts	0x0173, r1
    mouse_report.buttons = 0;
    1242:	10 92 6f 01 	sts	0x016F, r1
}
    1246:	1f 91       	pop	r17
    1248:	08 95       	ret

0000124a <ps2_mouse_task>:
    return ps2_mouse_type;
}

void ps2_mouse_task(void)
{
    switch(ps2_mouse_type){
    124a:	80 91 74 01 	lds	r24, 0x0174
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	29 f0       	breq	.+10     	; 0x125c <ps2_mouse_task+0x12>
    1252:	85 30       	cpi	r24, 0x05	; 5
    1254:	21 f0       	breq	.+8      	; 0x125e <ps2_mouse_task+0x14>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	19 f4       	brne	.+6      	; 0x1260 <ps2_mouse_task+0x16>
        case PS2_MOUSE_STANDARD: // Standard PS2 mouse
            ps2_standard_mouse_task();
    125a:	26 cf       	rjmp	.-436    	; 0x10a8 <ps2_standard_mouse_task>
            break;
        case PS2_MOUSE_MIE: // Microsoft Intellimouse Extensions (MIE)
            ps2_mie_mouse_task();
    125c:	b6 cf       	rjmp	.-148    	; 0x11ca <ps2_mie_mouse_task>
            break;
        case PS2_MOUSE_GENIUS5: //genius "netscroll optical" (5 buttons)
            ps2_genius_mouse_task();
    125e:	60 cf       	rjmp	.-320    	; 0x1120 <ps2_genius_mouse_task>
    1260:	08 95       	ret

00001262 <ps2_mouse_init>:

static void print_usb_data(void);


/* supports only 3 button mouse at this time */
uint8_t ps2_mouse_init(void) {
    1262:	1f 93       	push	r17
    uint8_t rcv, rcv2;
    ps2_mouse_type = PS2_MOUSE_NONE;
    1264:	10 92 74 01 	sts	0x0174, r1
    ps2_host_init();
    1268:	d7 d1       	rcall	.+942    	; 0x1618 <ps2_host_init>
    126a:	80 e1       	ldi	r24, 0x10	; 16
    126c:	97 e2       	ldi	r25, 0x27	; 39
    126e:	20 e9       	ldi	r18, 0x90	; 144
    1270:	31 e0       	ldi	r19, 0x01	; 1
    1272:	f9 01       	movw	r30, r18
    1274:	31 97       	sbiw	r30, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <ps2_mouse_init+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	d9 f7       	brne	.-10     	; 0x1272 <ps2_mouse_init+0x10>

    _delay_ms(1000);    // wait for powering up

    // send Reset
    rcv = ps2_host_send(0xFF);
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	30 d1       	rcall	.+608    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    1280:	8a 3f       	cpi	r24, 0xFA	; 250
    1282:	09 f0       	breq	.+2      	; 0x1286 <ps2_mouse_init+0x24>
    1284:	51 c0       	rjmp	.+162    	; 0x1328 <ps2_mouse_init+0xc6>
    // read completion code of BAT  (Basic Assurance Test) 
    rcv = ps2_host_recv_response();
    1286:	1e d1       	rcall	.+572    	; 0x14c4 <ps2_host_recv_response>
    // read Device ID
    rcv = ps2_host_recv_response();
    1288:	1d d1       	rcall	.+570    	; 0x14c4 <ps2_host_recv_response>
    if(rcv == STANDARD_ID) ps2_mouse_type = PS2_MOUSE_STANDARD;
    128a:	88 23       	and	r24, r24
    128c:	19 f4       	brne	.+6      	; 0x1294 <ps2_mouse_init+0x32>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 74 01 	sts	0x0174, r24
    // try to switch to genius "netscroll optical" mouse (5 buttons)
    rcv = ps2_host_send(0xE8);
    1294:	88 ee       	ldi	r24, 0xE8	; 232
    1296:	24 d1       	rcall	.+584    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    1298:	8a 3f       	cpi	r24, 0xFA	; 250
    129a:	09 f0       	breq	.+2      	; 0x129e <ps2_mouse_init+0x3c>
    129c:	45 c0       	rjmp	.+138    	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0x03);
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	1f d1       	rcall	.+574    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    12a2:	8a 3f       	cpi	r24, 0xFA	; 250
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <ps2_mouse_init+0x46>
    12a6:	40 c0       	rjmp	.+128    	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0xE6);
    12a8:	86 ee       	ldi	r24, 0xE6	; 230
    12aa:	1a d1       	rcall	.+564    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    12ac:	8a 3f       	cpi	r24, 0xFA	; 250
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <ps2_mouse_init+0x50>
    12b0:	3b c0       	rjmp	.+118    	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0xE6);
    12b2:	86 ee       	ldi	r24, 0xE6	; 230
    12b4:	15 d1       	rcall	.+554    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    12b6:	8a 3f       	cpi	r24, 0xFA	; 250
    12b8:	09 f0       	breq	.+2      	; 0x12bc <ps2_mouse_init+0x5a>
    12ba:	36 c0       	rjmp	.+108    	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0xE6);
    12bc:	86 ee       	ldi	r24, 0xE6	; 230
    12be:	10 d1       	rcall	.+544    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    12c0:	8a 3f       	cpi	r24, 0xFA	; 250
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <ps2_mouse_init+0x64>
    12c4:	31 c0       	rjmp	.+98     	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0xE9);
    12c6:	89 ee       	ldi	r24, 0xE9	; 233
    12c8:	0b d1       	rcall	.+534    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    12ca:	8a 3f       	cpi	r24, 0xFA	; 250
    12cc:	69 f5       	brne	.+90     	; 0x1328 <ps2_mouse_init+0xc6>
    // get status byte
    rcv = ps2_host_recv_response();
    12ce:	fa d0       	rcall	.+500    	; 0x14c4 <ps2_host_recv_response>
    // get resolution
    rcv = ps2_host_recv_response();
    12d0:	f9 d0       	rcall	.+498    	; 0x14c4 <ps2_host_recv_response>
    12d2:	18 2f       	mov	r17, r24
    // get Reports per sec
    rcv2 = ps2_host_recv_response();
    12d4:	f7 d0       	rcall	.+494    	; 0x14c4 <ps2_host_recv_response>
    if(rcv == 0x33 && rcv2 == 0x55) {
    12d6:	13 33       	cpi	r17, 0x33	; 51
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <ps2_mouse_init+0x80>
    12da:	85 35       	cpi	r24, 0x55	; 85
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <ps2_mouse_init+0x80>
        ps2_mouse_type = PS2_MOUSE_GENIUS5;
    12de:	85 e0       	ldi	r24, 0x05	; 5
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <ps2_mouse_init+0xa2>
    } else {
        //intellimouse compatible? Switch to 3-buttons mode
        //Send commad sequence
        rcv = ps2_host_send(0xF3);
    12e2:	83 ef       	ldi	r24, 0xF3	; 243
    12e4:	fd d0       	rcall	.+506    	; 0x14e0 <ps2_host_send>
 //       if(rcv != PS2_ACK) return ps2_mouse_type;);
 //       if(rcv != PS2_ACK) return ps2_mouse_type;
        rcv = ps2_host_send(200);
    12e6:	88 ec       	ldi	r24, 0xC8	; 200
    12e8:	fb d0       	rcall	.+502    	; 0x14e0 <ps2_host_send>
 //       if(rcv != PS2_ACK) return ps2_mouse_type;
        rcv = ps2_host_send(0xF3);
    12ea:	83 ef       	ldi	r24, 0xF3	; 243
    12ec:	f9 d0       	rcall	.+498    	; 0x14e0 <ps2_host_send>
 //       if(rcv != PS2_ACK) return ps2_mouse_type;
        rcv = ps2_host_send(100);
    12ee:	84 e6       	ldi	r24, 0x64	; 100
    12f0:	f7 d0       	rcall	.+494    	; 0x14e0 <ps2_host_send>
        rcv = ps2_host_send(0xF3);
    12f2:	83 ef       	ldi	r24, 0xF3	; 243
    12f4:	f5 d0       	rcall	.+490    	; 0x14e0 <ps2_host_send>
 //       if(rcv != PS2_ACK) return ps2_mouse_type;
        rcv = ps2_host_send(80);
    12f6:	80 e5       	ldi	r24, 0x50	; 80
    12f8:	f3 d0       	rcall	.+486    	; 0x14e0 <ps2_host_send>
	//Check ID
        rcv = ps2_host_send(0xF2);
    12fa:	82 ef       	ldi	r24, 0xF2	; 242
    12fc:	f1 d0       	rcall	.+482    	; 0x14e0 <ps2_host_send>
 //       if(rcv != PS2_ACK) return ps2_mouse_type;
        // get ID
        rcv = ps2_host_recv_response();
    12fe:	e2 d0       	rcall	.+452    	; 0x14c4 <ps2_host_recv_response>
        if(rcv == MIE_ID) {
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	11 f4       	brne	.+4      	; 0x1308 <ps2_mouse_init+0xa6>
            ps2_mouse_type = PS2_MOUSE_MIE;
    1304:	80 93 74 01 	sts	0x0174, r24
        }
    }

    // Set Resolution 8 count/mm 
    rcv = ps2_host_send(0xE8);
    1308:	88 ee       	ldi	r24, 0xE8	; 232
    130a:	ea d0       	rcall	.+468    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    130c:	8a 3f       	cpi	r24, 0xFA	; 250
    130e:	61 f4       	brne	.+24     	; 0x1328 <ps2_mouse_init+0xc6>
    rcv = ps2_host_send(0x03);
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	e6 d0       	rcall	.+460    	; 0x14e0 <ps2_host_send>
//    if(rcv != PS2_ACK) return ps2_mouse_type;
    // Set Scaling 1:1
    rcv = ps2_host_send(0xE6);
    1314:	86 ee       	ldi	r24, 0xE6	; 230
    1316:	e4 d0       	rcall	.+456    	; 0x14e0 <ps2_host_send>
    if(rcv != PS2_ACK) return ps2_mouse_type;
    1318:	8a 3f       	cpi	r24, 0xFA	; 250
    131a:	31 f4       	brne	.+12     	; 0x1328 <ps2_mouse_init+0xc6>
    // Set Sample Rate 200
    rcv = ps2_host_send(0xF3);
    131c:	83 ef       	ldi	r24, 0xF3	; 243
    131e:	e0 d0       	rcall	.+448    	; 0x14e0 <ps2_host_send>
 //   if(rcv != PS2_ACK) return ps2_mouse_type;
    rcv = ps2_host_send(200);
    1320:	88 ec       	ldi	r24, 0xC8	; 200
    1322:	de d0       	rcall	.+444    	; 0x14e0 <ps2_host_send>
 //   if(rcv != PS2_ACK) return ps2_mouse_type;

    // send Set Remote mode
    rcv = ps2_host_send(0xF0);
    1324:	80 ef       	ldi	r24, 0xF0	; 240
    1326:	dc d0       	rcall	.+440    	; 0x14e0 <ps2_host_send>

    return ps2_mouse_type;
    1328:	80 91 74 01 	lds	r24, 0x0174
}
    132c:	1f 91       	pop	r17
    132e:	08 95       	ret

00001330 <wait_clock_lo>:

/*--------------------------------------------------------------------
 * static functions
 *------------------------------------------------------------------*/
static inline uint16_t wait_clock_lo(uint16_t us)
{
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1338:	15 e0       	ldi	r17, 0x05	; 5
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <wait_clock_lo+0x14>
    133c:	81 2f       	mov	r24, r17
    133e:	8a 95       	dec	r24
    1340:	f1 f7       	brne	.-4      	; 0x133e <wait_clock_lo+0xe>
    while (clock_in()  && us) { asm(""); wait_us(1); us--; }
    1342:	21 97       	sbiw	r28, 0x01	; 1
    1344:	7c d1       	rcall	.+760    	; 0x163e <clock_in>
    1346:	88 23       	and	r24, r24
    1348:	11 f0       	breq	.+4      	; 0x134e <wait_clock_lo+0x1e>
    134a:	20 97       	sbiw	r28, 0x00	; 0
    134c:	b9 f7       	brne	.-18     	; 0x133c <wait_clock_lo+0xc>
    return us;
}
    134e:	ce 01       	movw	r24, r28
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	08 95       	ret

00001358 <wait_clock_hi>:
static inline uint16_t wait_clock_hi(uint16_t us)
{
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
    1360:	15 e0       	ldi	r17, 0x05	; 5
    1362:	04 c0       	rjmp	.+8      	; 0x136c <wait_clock_hi+0x14>
    1364:	81 2f       	mov	r24, r17
    1366:	8a 95       	dec	r24
    1368:	f1 f7       	brne	.-4      	; 0x1366 <wait_clock_hi+0xe>
    while (!clock_in() && us) { asm(""); wait_us(1); us--; }
    136a:	21 97       	sbiw	r28, 0x01	; 1
    136c:	68 d1       	rcall	.+720    	; 0x163e <clock_in>
    136e:	88 23       	and	r24, r24
    1370:	11 f4       	brne	.+4      	; 0x1376 <wait_clock_hi+0x1e>
    1372:	20 97       	sbiw	r28, 0x00	; 0
    1374:	b9 f7       	brne	.-18     	; 0x1364 <wait_clock_hi+0xc>
    return us;
}
    1376:	ce 01       	movw	r24, r28
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	08 95       	ret

00001380 <inhibit>:
}

/* inhibit device to send */
static inline void inhibit(void)
{
    clock_lo();
    1380:	58 d1       	rcall	.+688    	; 0x1632 <clock_lo>
    data_hi();
}
    1382:	6c c1       	rjmp	.+728    	; 0x165c <data_hi>

00001384 <ps2_host_recv>:
    return data;
}

/* called after start bit comes */
uint8_t ps2_host_recv(void)
{
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    uint8_t data = 0;
    bool parity = true;
    ps2_error = PS2_ERR_NONE;
    1392:	10 92 75 01 	sts	0x0175, r1
}

/* idle state that device can send */
static inline void idle(void)
{
    clock_hi();
    1396:	50 d1       	rcall	.+672    	; 0x1638 <clock_hi>
    data_hi();
    1398:	61 d1       	rcall	.+706    	; 0x165c <data_hi>

    /* release lines(idle state) */
    idle();

    /* start bit [1] */
    WAIT(clock_lo, 100, 1); // TODO: this is enough?
    139a:	84 e6       	ldi	r24, 0x64	; 100
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	c8 df       	rcall	.-112    	; 0x1330 <wait_clock_lo>
    13a0:	89 2b       	or	r24, r25
    13a2:	51 f0       	breq	.+20     	; 0x13b8 <ps2_host_recv+0x34>
    while (!clock_in() && us) { asm(""); wait_us(1); us--; }
    return us;
}
static inline uint16_t wait_data_lo(uint16_t us)
{
    while (data_in() && us)  { asm(""); wait_us(1); us--; }
    13a4:	5e d1       	rcall	.+700    	; 0x1662 <data_in>
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <ps2_host_recv+0x28>
    13aa:	7f c0       	rjmp	.+254    	; 0x14aa <ps2_host_recv+0x126>
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	8a 95       	dec	r24
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <ps2_host_recv+0x2a>
    13b2:	57 d1       	rcall	.+686    	; 0x1662 <data_in>
    WAIT(data_lo, 1, 2);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	4e c0       	rjmp	.+156    	; 0x1454 <ps2_host_recv+0xd0>

    /* release lines(idle state) */
    idle();

    /* start bit [1] */
    WAIT(clock_lo, 100, 1); // TODO: this is enough?
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	4c c0       	rjmp	.+152    	; 0x1454 <ps2_host_recv+0xd0>
    WAIT(data_lo, 1, 2);
    WAIT(clock_hi, 50, 3);
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	4a c0       	rjmp	.+148    	; 0x1454 <ps2_host_recv+0xd0>
    13c0:	00 e0       	ldi	r16, 0x00	; 0
    13c2:	11 e0       	ldi	r17, 0x01	; 1
    13c4:	c0 e0       	ldi	r28, 0x00	; 0
    13c6:	d0 e0       	ldi	r29, 0x00	; 0

    /* data [2-9] */
    for (uint8_t i = 0; i < 8; i++) {
        WAIT(clock_lo, 50, 4);
        if (data_in()) {
            parity = !parity;
    13c8:	dd 24       	eor	r13, r13
    13ca:	d3 94       	inc	r13
            data |= (1<<i);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	e8 2e       	mov	r14, r24
    13d0:	f1 2c       	mov	r15, r1
    WAIT(data_lo, 1, 2);
    WAIT(clock_hi, 50, 3);

    /* data [2-9] */
    for (uint8_t i = 0; i < 8; i++) {
        WAIT(clock_lo, 50, 4);
    13d2:	82 e3       	ldi	r24, 0x32	; 50
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	ac df       	rcall	.-168    	; 0x1330 <wait_clock_lo>
    13d8:	89 2b       	or	r24, r25
    13da:	11 f4       	brne	.+4      	; 0x13e0 <ps2_host_recv+0x5c>
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	3a c0       	rjmp	.+116    	; 0x1454 <ps2_host_recv+0xd0>
        if (data_in()) {
    13e0:	40 d1       	rcall	.+640    	; 0x1662 <data_in>
    13e2:	88 23       	and	r24, r24
    13e4:	49 f0       	breq	.+18     	; 0x13f8 <ps2_host_recv+0x74>
            parity = !parity;
    13e6:	1d 25       	eor	r17, r13
            data |= (1<<i);
    13e8:	c7 01       	movw	r24, r14
    13ea:	0c 2e       	mov	r0, r28
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <ps2_host_recv+0x6e>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <ps2_host_recv+0x6a>
    13f6:	08 2b       	or	r16, r24
        }
        WAIT(clock_hi, 50, 5);
    13f8:	82 e3       	ldi	r24, 0x32	; 50
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	ad df       	rcall	.-166    	; 0x1358 <wait_clock_hi>
    13fe:	89 2b       	or	r24, r25
    1400:	11 f4       	brne	.+4      	; 0x1406 <ps2_host_recv+0x82>
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	27 c0       	rjmp	.+78     	; 0x1454 <ps2_host_recv+0xd0>
    1406:	21 96       	adiw	r28, 0x01	; 1
    WAIT(clock_lo, 100, 1); // TODO: this is enough?
    WAIT(data_lo, 1, 2);
    WAIT(clock_hi, 50, 3);

    /* data [2-9] */
    for (uint8_t i = 0; i < 8; i++) {
    1408:	c8 30       	cpi	r28, 0x08	; 8
    140a:	d1 05       	cpc	r29, r1
    140c:	11 f7       	brne	.-60     	; 0x13d2 <ps2_host_recv+0x4e>
        }
        WAIT(clock_hi, 50, 5);
    }

    /* parity [10] */
    WAIT(clock_lo, 50, 6);
    140e:	82 e3       	ldi	r24, 0x32	; 50
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	8e df       	rcall	.-228    	; 0x1330 <wait_clock_lo>
    1414:	89 2b       	or	r24, r25
    1416:	11 f4       	brne	.+4      	; 0x141c <ps2_host_recv+0x98>
    1418:	86 e0       	ldi	r24, 0x06	; 6
    141a:	1c c0       	rjmp	.+56     	; 0x1454 <ps2_host_recv+0xd0>
    if (data_in() != parity) {
    141c:	22 d1       	rcall	.+580    	; 0x1662 <data_in>
    141e:	81 17       	cp	r24, r17
    1420:	11 f0       	breq	.+4      	; 0x1426 <ps2_host_recv+0xa2>
        ps2_error = PS2_ERR_PARITY;
    1422:	80 e1       	ldi	r24, 0x10	; 16
    1424:	17 c0       	rjmp	.+46     	; 0x1454 <ps2_host_recv+0xd0>
        goto ERROR;
    }
    WAIT(clock_hi, 50, 7);
    1426:	82 e3       	ldi	r24, 0x32	; 50
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	96 df       	rcall	.-212    	; 0x1358 <wait_clock_hi>
    142c:	89 2b       	or	r24, r25
    142e:	11 f4       	brne	.+4      	; 0x1434 <ps2_host_recv+0xb0>
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	10 c0       	rjmp	.+32     	; 0x1454 <ps2_host_recv+0xd0>

    /* stop bit [11] */
    WAIT(clock_lo, 50, 8);
    1434:	82 e3       	ldi	r24, 0x32	; 50
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	7b df       	rcall	.-266    	; 0x1330 <wait_clock_lo>
    143a:	89 2b       	or	r24, r25
    143c:	51 f0       	breq	.+20     	; 0x1452 <ps2_host_recv+0xce>
    return us;
}
static inline uint16_t wait_data_hi(uint16_t us)
{
    while (!data_in() && us)  { asm(""); wait_us(1); us--; }
    143e:	11 d1       	rcall	.+546    	; 0x1662 <data_in>
    1440:	88 23       	and	r24, r24
    1442:	09 f0       	breq	.+2      	; 0x1446 <ps2_host_recv+0xc2>
    1444:	39 c0       	rjmp	.+114    	; 0x14b8 <ps2_host_recv+0x134>
    1446:	85 e0       	ldi	r24, 0x05	; 5
    1448:	8a 95       	dec	r24
    144a:	f1 f7       	brne	.-4      	; 0x1448 <ps2_host_recv+0xc4>
    144c:	0a d1       	rcall	.+532    	; 0x1662 <data_in>
    WAIT(data_hi, 1, 9);
    144e:	89 e0       	ldi	r24, 0x09	; 9
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <ps2_host_recv+0xd0>
        goto ERROR;
    }
    WAIT(clock_hi, 50, 7);

    /* stop bit [11] */
    WAIT(clock_lo, 50, 8);
    1452:	88 e0       	ldi	r24, 0x08	; 8
    1454:	80 93 75 01 	sts	0x0175, r24
    WAIT(clock_hi, 50, 10);

    inhibit();
    return data;
ERROR:
    if (ps2_error > PS2_ERR_STARTBIT3) {
    1458:	20 91 75 01 	lds	r18, 0x0175
    145c:	24 30       	cpi	r18, 0x04	; 4
    145e:	d0 f0       	brcs	.+52     	; 0x1494 <ps2_host_recv+0x110>
    1460:	04 c0       	rjmp	.+8      	; 0x146a <ps2_host_recv+0xe6>
    WAIT(clock_hi, 50, 7);

    /* stop bit [11] */
    WAIT(clock_lo, 50, 8);
    WAIT(data_hi, 1, 9);
    WAIT(clock_hi, 50, 10);
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	f7 cf       	rjmp	.-18     	; 0x1454 <ps2_host_recv+0xd0>

    inhibit();
    1466:	8c df       	rcall	.-232    	; 0x1380 <inhibit>
    1468:	17 c0       	rjmp	.+46     	; 0x1498 <ps2_host_recv+0x114>
    return data;
ERROR:
    if (ps2_error > PS2_ERR_STARTBIT3) {
        xprintf("x%02X\n", ps2_error);
    146a:	00 d0       	rcall	.+0      	; 0x146c <ps2_host_recv+0xe8>
    146c:	00 d0       	rcall	.+0      	; 0x146e <ps2_host_recv+0xea>
    146e:	ed b7       	in	r30, 0x3d	; 61
    1470:	fe b7       	in	r31, 0x3e	; 62
    1472:	31 96       	adiw	r30, 0x01	; 1
    1474:	8a ee       	ldi	r24, 0xEA	; 234
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	ad b7       	in	r26, 0x3d	; 61
    147a:	be b7       	in	r27, 0x3e	; 62
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	11 97       	sbiw	r26, 0x01	; 1
    1484:	22 83       	std	Z+2, r18	; 0x02
    1486:	13 82       	std	Z+3, r1	; 0x03
    1488:	0e 94 bb 01 	call	0x376	; 0x376 <__xprintf>
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    }
    inhibit();
    1494:	75 df       	rcall	.-278    	; 0x1380 <inhibit>
    1496:	00 e0       	ldi	r16, 0x00	; 0
    return 0;
}
    1498:	80 2f       	mov	r24, r16
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	08 95       	ret
    idle();

    /* start bit [1] */
    WAIT(clock_lo, 100, 1); // TODO: this is enough?
    WAIT(data_lo, 1, 2);
    WAIT(clock_hi, 50, 3);
    14aa:	82 e3       	ldi	r24, 0x32	; 50
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	54 df       	rcall	.-344    	; 0x1358 <wait_clock_hi>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <ps2_host_recv+0x132>
    14b4:	83 cf       	rjmp	.-250    	; 0x13bc <ps2_host_recv+0x38>
    14b6:	84 cf       	rjmp	.-248    	; 0x13c0 <ps2_host_recv+0x3c>
    WAIT(clock_hi, 50, 7);

    /* stop bit [11] */
    WAIT(clock_lo, 50, 8);
    WAIT(data_hi, 1, 9);
    WAIT(clock_hi, 50, 10);
    14b8:	82 e3       	ldi	r24, 0x32	; 50
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	4d df       	rcall	.-358    	; 0x1358 <wait_clock_hi>
    14be:	89 2b       	or	r24, r25
    14c0:	81 f2       	breq	.-96     	; 0x1462 <ps2_host_recv+0xde>
    14c2:	d1 cf       	rjmp	.-94     	; 0x1466 <ps2_host_recv+0xe2>

000014c4 <ps2_host_recv_response>:
    return 0;
}

/* receive data when host want else inhibit communication */
uint8_t ps2_host_recv_response(void)
{
    14c4:	1f 93       	push	r17
    14c6:	1a ef       	ldi	r17, 0xFA	; 250
    // Command may take 25ms/20ms at most([5]p.46, [3]p.21)
    // 250 * 100us(wait for start bit in ps2_host_recv)
    uint8_t data = 0;
    uint8_t try = 250;
    do {
        data = ps2_host_recv();
    14c8:	5d df       	rcall	.-326    	; 0x1384 <ps2_host_recv>
    14ca:	98 2f       	mov	r25, r24
    } while (try-- && ps2_error);
    14cc:	11 50       	subi	r17, 0x01	; 1
    14ce:	1f 3f       	cpi	r17, 0xFF	; 255
    14d0:	21 f0       	breq	.+8      	; 0x14da <ps2_host_recv_response+0x16>
    14d2:	80 91 75 01 	lds	r24, 0x0175
    14d6:	88 23       	and	r24, r24
    14d8:	b9 f7       	brne	.-18     	; 0x14c8 <ps2_host_recv_response+0x4>
    return data;
}
    14da:	89 2f       	mov	r24, r25
    14dc:	1f 91       	pop	r17
    14de:	08 95       	ret

000014e0 <ps2_host_send>:

    inhibit();
}

uint8_t ps2_host_send(uint8_t data)
{
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	f8 2e       	mov	r15, r24
    bool parity = true;
    ps2_error = PS2_ERR_NONE;
    14f0:	10 92 75 01 	sts	0x0175, r1

    /* terminate a transmission if we have */
    inhibit();
    14f4:	45 df       	rcall	.-374    	; 0x1380 <inhibit>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f6:	80 e9       	ldi	r24, 0x90	; 144
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <ps2_host_send+0x1a>
    wait_us(100); // 100us [4]p.13, [5]p.50

    /* 'Request to Send' and Start bit */
    data_lo();
    14fe:	ab d0       	rcall	.+342    	; 0x1656 <data_lo>
    clock_hi();
    1500:	9b d0       	rcall	.+310    	; 0x1638 <clock_hi>
    WAIT(clock_lo, 10000, 10);   // 10ms [5]p.50
    1502:	80 e1       	ldi	r24, 0x10	; 16
    1504:	97 e2       	ldi	r25, 0x27	; 39
    1506:	14 df       	rcall	.-472    	; 0x1330 <wait_clock_lo>
    1508:	89 2b       	or	r24, r25
    150a:	11 f4       	brne	.+4      	; 0x1510 <ps2_host_send+0x30>
    150c:	8a e0       	ldi	r24, 0x0A	; 10
    150e:	75 c0       	rjmp	.+234    	; 0x15fa <ps2_host_send+0x11a>
    1510:	11 e0       	ldi	r17, 0x01	; 1
    1512:	c0 e0       	ldi	r28, 0x00	; 0
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1516:	90 e5       	ldi	r25, 0x50	; 80
    1518:	d9 2e       	mov	r13, r25

    /* Data bit */
    for (uint8_t i = 0; i < 8; i++) {
        wait_us(15);
        if (data&(1<<i)) {
    151a:	ef 2c       	mov	r14, r15
    151c:	ff 24       	eor	r15, r15
            parity = !parity;
    151e:	01 e0       	ldi	r16, 0x01	; 1
    1520:	8d 2d       	mov	r24, r13
    1522:	8a 95       	dec	r24
    1524:	f1 f7       	brne	.-4      	; 0x1522 <ps2_host_send+0x42>
    WAIT(clock_lo, 10000, 10);   // 10ms [5]p.50

    /* Data bit */
    for (uint8_t i = 0; i < 8; i++) {
        wait_us(15);
        if (data&(1<<i)) {
    1526:	c7 01       	movw	r24, r14
    1528:	0c 2e       	mov	r0, r28
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <ps2_host_send+0x50>
    152c:	95 95       	asr	r25
    152e:	87 95       	ror	r24
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <ps2_host_send+0x4c>
    1534:	80 ff       	sbrs	r24, 0
    1536:	03 c0       	rjmp	.+6      	; 0x153e <ps2_host_send+0x5e>
            parity = !parity;
    1538:	10 27       	eor	r17, r16
            data_hi();
    153a:	90 d0       	rcall	.+288    	; 0x165c <data_hi>
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <ps2_host_send+0x60>
        } else {
            data_lo();
    153e:	8b d0       	rcall	.+278    	; 0x1656 <data_lo>
        }
        WAIT(clock_hi, 50, 2);
    1540:	82 e3       	ldi	r24, 0x32	; 50
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	09 df       	rcall	.-494    	; 0x1358 <wait_clock_hi>
    1546:	89 2b       	or	r24, r25
    1548:	11 f4       	brne	.+4      	; 0x154e <ps2_host_send+0x6e>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	56 c0       	rjmp	.+172    	; 0x15fa <ps2_host_send+0x11a>
        WAIT(clock_lo, 50, 3);
    154e:	82 e3       	ldi	r24, 0x32	; 50
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	ee de       	rcall	.-548    	; 0x1330 <wait_clock_lo>
    1554:	89 2b       	or	r24, r25
    1556:	11 f4       	brne	.+4      	; 0x155c <ps2_host_send+0x7c>
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	4f c0       	rjmp	.+158    	; 0x15fa <ps2_host_send+0x11a>
    155c:	21 96       	adiw	r28, 0x01	; 1
    data_lo();
    clock_hi();
    WAIT(clock_lo, 10000, 10);   // 10ms [5]p.50

    /* Data bit */
    for (uint8_t i = 0; i < 8; i++) {
    155e:	c8 30       	cpi	r28, 0x08	; 8
    1560:	d1 05       	cpc	r29, r1
    1562:	f1 f6       	brne	.-68     	; 0x1520 <ps2_host_send+0x40>
    1564:	80 e5       	ldi	r24, 0x50	; 80
    1566:	8a 95       	dec	r24
    1568:	f1 f7       	brne	.-4      	; 0x1566 <ps2_host_send+0x86>
        WAIT(clock_lo, 50, 3);
    }

    /* Parity bit */
    wait_us(15);
    if (parity) { data_hi(); } else { data_lo(); }
    156a:	11 23       	and	r17, r17
    156c:	11 f0       	breq	.+4      	; 0x1572 <ps2_host_send+0x92>
    156e:	76 d0       	rcall	.+236    	; 0x165c <data_hi>
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <ps2_host_send+0x94>
    1572:	71 d0       	rcall	.+226    	; 0x1656 <data_lo>
    WAIT(clock_hi, 50, 4);
    1574:	82 e3       	ldi	r24, 0x32	; 50
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	ef de       	rcall	.-546    	; 0x1358 <wait_clock_hi>
    157a:	89 2b       	or	r24, r25
    157c:	11 f4       	brne	.+4      	; 0x1582 <ps2_host_send+0xa2>
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	3c c0       	rjmp	.+120    	; 0x15fa <ps2_host_send+0x11a>
    WAIT(clock_lo, 50, 5);
    1582:	82 e3       	ldi	r24, 0x32	; 50
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	d4 de       	rcall	.-600    	; 0x1330 <wait_clock_lo>
    1588:	89 2b       	or	r24, r25
    158a:	11 f4       	brne	.+4      	; 0x1590 <ps2_host_send+0xb0>
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	35 c0       	rjmp	.+106    	; 0x15fa <ps2_host_send+0x11a>
    1590:	80 e5       	ldi	r24, 0x50	; 80
    1592:	8a 95       	dec	r24
    1594:	f1 f7       	brne	.-4      	; 0x1592 <ps2_host_send+0xb2>

    /* Stop bit */
    wait_us(15);
    data_hi();
    1596:	62 d0       	rcall	.+196    	; 0x165c <data_hi>
    1598:	c2 e3       	ldi	r28, 0x32	; 50
    159a:	d0 e0       	ldi	r29, 0x00	; 0
    159c:	15 e0       	ldi	r17, 0x05	; 5
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <ps2_host_send+0xc8>
    15a0:	81 2f       	mov	r24, r17
    15a2:	8a 95       	dec	r24
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <ps2_host_send+0xc2>
    while (!clock_in() && us) { asm(""); wait_us(1); us--; }
    return us;
}
static inline uint16_t wait_data_lo(uint16_t us)
{
    while (data_in() && us)  { asm(""); wait_us(1); us--; }
    15a6:	21 97       	sbiw	r28, 0x01	; 1
    15a8:	5c d0       	rcall	.+184    	; 0x1662 <data_in>
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <ps2_host_send+0xd4>
    15ae:	20 97       	sbiw	r28, 0x00	; 0
    15b0:	b9 f7       	brne	.-18     	; 0x15a0 <ps2_host_send+0xc0>
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <ps2_host_send+0xd8>

    /* Ack */
    WAIT(data_lo, 50, 6);
    15b4:	cd 2b       	or	r28, r29
    15b6:	11 f4       	brne	.+4      	; 0x15bc <ps2_host_send+0xdc>
    15b8:	86 e0       	ldi	r24, 0x06	; 6
    15ba:	1f c0       	rjmp	.+62     	; 0x15fa <ps2_host_send+0x11a>
    WAIT(clock_lo, 50, 7);
    15bc:	82 e3       	ldi	r24, 0x32	; 50
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	b7 de       	rcall	.-658    	; 0x1330 <wait_clock_lo>
    15c2:	89 2b       	or	r24, r25
    15c4:	11 f4       	brne	.+4      	; 0x15ca <ps2_host_send+0xea>
    15c6:	87 e0       	ldi	r24, 0x07	; 7
    15c8:	18 c0       	rjmp	.+48     	; 0x15fa <ps2_host_send+0x11a>

    /* wait for idle state */
    WAIT(clock_hi, 50, 8);
    15ca:	82 e3       	ldi	r24, 0x32	; 50
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	c4 de       	rcall	.-632    	; 0x1358 <wait_clock_hi>
    15d0:	89 2b       	or	r24, r25
    15d2:	21 f0       	breq	.+8      	; 0x15dc <ps2_host_send+0xfc>
    15d4:	c2 e3       	ldi	r28, 0x32	; 50
    15d6:	d0 e0       	ldi	r29, 0x00	; 0
    15d8:	15 e0       	ldi	r17, 0x05	; 5
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <ps2_host_send+0x108>
    15dc:	88 e0       	ldi	r24, 0x08	; 8
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <ps2_host_send+0x11a>
    15e0:	81 2f       	mov	r24, r17
    15e2:	8a 95       	dec	r24
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <ps2_host_send+0x102>
    return us;
}
static inline uint16_t wait_data_hi(uint16_t us)
{
    while (!data_in() && us)  { asm(""); wait_us(1); us--; }
    15e6:	21 97       	sbiw	r28, 0x01	; 1
    15e8:	3c d0       	rcall	.+120    	; 0x1662 <data_in>
    15ea:	88 23       	and	r24, r24
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <ps2_host_send+0x114>
    15ee:	20 97       	sbiw	r28, 0x00	; 0
    15f0:	b9 f7       	brne	.-18     	; 0x15e0 <ps2_host_send+0x100>
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <ps2_host_send+0x118>
    WAIT(data_hi, 50, 9);
    15f4:	cd 2b       	or	r28, r29
    15f6:	31 f4       	brne	.+12     	; 0x1604 <ps2_host_send+0x124>
    15f8:	89 e0       	ldi	r24, 0x09	; 9
    15fa:	80 93 75 01 	sts	0x0175, r24

    inhibit();
    return ps2_host_recv_response();
ERROR:
    inhibit();
    15fe:	c0 de       	rcall	.-640    	; 0x1380 <inhibit>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <ps2_host_send+0x128>

    /* wait for idle state */
    WAIT(clock_hi, 50, 8);
    WAIT(data_hi, 50, 9);

    inhibit();
    1604:	bd de       	rcall	.-646    	; 0x1380 <inhibit>
    return ps2_host_recv_response();
    1606:	5e df       	rcall	.-324    	; 0x14c4 <ps2_host_recv_response>
ERROR:
    inhibit();
    return 0;
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	08 95       	ret

00001618 <ps2_host_init>:
uint8_t ps2_error = PS2_ERR_NONE;


void ps2_host_init(void)
{
    clock_init();
    1618:	0b d0       	rcall	.+22     	; 0x1630 <clock_init>
    data_init();
    161a:	1c d0       	rcall	.+56     	; 0x1654 <data_init>
    161c:	88 ea       	ldi	r24, 0xA8	; 168
    161e:	91 e6       	ldi	r25, 0x61	; 97
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1620:	20 e9       	ldi	r18, 0x90	; 144
    1622:	31 e0       	ldi	r19, 0x01	; 1
    1624:	f9 01       	movw	r30, r18
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <ps2_host_init+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	d9 f7       	brne	.-10     	; 0x1624 <ps2_host_init+0xc>

    // POR(150-2000ms) plus BAT(300-500ms) may take 2.5sec([3]p.20)
    wait_ms(2500);

    inhibit();
}
    162e:	a8 ce       	rjmp	.-688    	; 0x1380 <inhibit>

00001630 <clock_init>:
/*
 * Clock
 */
void clock_init(void)
{
}
    1630:	08 95       	ret

00001632 <clock_lo>:

void clock_lo(void)
{
    PS2_CLOCK_PORT &= ~(1<<PS2_CLOCK_BIT);
    1632:	59 98       	cbi	0x0b, 1	; 11
    PS2_CLOCK_DDR  |=  (1<<PS2_CLOCK_BIT);
    1634:	51 9a       	sbi	0x0a, 1	; 10
}
    1636:	08 95       	ret

00001638 <clock_hi>:

void clock_hi(void)
{
    /* input with pull up */
    PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
    1638:	51 98       	cbi	0x0a, 1	; 10
    PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
    163a:	59 9a       	sbi	0x0b, 1	; 11
}
    163c:	08 95       	ret

0000163e <clock_in>:

bool clock_in(void)
{
    PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
    163e:	51 98       	cbi	0x0a, 1	; 10
    PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
    1640:	59 9a       	sbi	0x0b, 1	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1642:	85 e0       	ldi	r24, 0x05	; 5
    1644:	8a 95       	dec	r24
    1646:	f1 f7       	brne	.-4      	; 0x1644 <clock_in+0x6>
    _delay_us(1);
    return PS2_CLOCK_PIN&(1<<PS2_CLOCK_BIT);
    1648:	89 b1       	in	r24, 0x09	; 9
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
}
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	08 95       	ret

00001654 <data_init>:
/*
 * Data
 */
void data_init(void)
{
}
    1654:	08 95       	ret

00001656 <data_lo>:

void data_lo(void)
{
    PS2_DATA_PORT &= ~(1<<PS2_DATA_BIT);
    1656:	58 98       	cbi	0x0b, 0	; 11
    PS2_DATA_DDR  |=  (1<<PS2_DATA_BIT);
    1658:	50 9a       	sbi	0x0a, 0	; 10
}
    165a:	08 95       	ret

0000165c <data_hi>:

void data_hi(void)
{
    /* input with pull up */
    PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
    165c:	50 98       	cbi	0x0a, 0	; 10
    PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
    165e:	58 9a       	sbi	0x0b, 0	; 11
}
    1660:	08 95       	ret

00001662 <data_in>:

bool data_in(void)
{
    PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
    1662:	50 98       	cbi	0x0a, 0	; 10
    PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
    1664:	58 9a       	sbi	0x0b, 0	; 11
    1666:	85 e0       	ldi	r24, 0x05	; 5
    1668:	8a 95       	dec	r24
    166a:	f1 f7       	brne	.-4      	; 0x1668 <data_in+0x6>
    _delay_us(1);
    return PS2_DATA_PIN&(1<<PS2_DATA_BIT);
    166c:	89 b1       	in	r24, 0x09	; 9
}
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	08 95       	ret

00001672 <host_set_driver>:
static host_driver_t *driver;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1672:	90 93 77 01 	sts	0x0177, r25
    1676:	80 93 76 01 	sts	0x0176, r24
}
    167a:	08 95       	ret

0000167c <host_mouse_send>:
}


void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    167c:	e0 91 76 01 	lds	r30, 0x0176
    1680:	f0 91 77 01 	lds	r31, 0x0177
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	21 f0       	breq	.+8      	; 0x1690 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	09 95       	icall
    1690:	08 95       	ret

00001692 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    169a:	9a ef       	ldi	r25, 0xFA	; 250
    169c:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    169e:	80 93 6e 00 	sts	0x006E, r24
}
    16a2:	08 95       	ret

000016a4 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    16a4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    16a6:	f8 94       	cli
    t = timer_count;
    16a8:	20 91 7a 01 	lds	r18, 0x017A
    16ac:	30 91 7b 01 	lds	r19, 0x017B
    16b0:	40 91 7c 01 	lds	r20, 0x017C
    16b4:	50 91 7d 01 	lds	r21, 0x017D
    SREG = sreg;
    16b8:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    16ba:	c9 01       	movw	r24, r18
    16bc:	08 95       	ret

000016be <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    16c8:	8f b7       	in	r24, 0x3f	; 63
    cli();
    16ca:	f8 94       	cli
    t = timer_count;
    16cc:	e0 90 7a 01 	lds	r14, 0x017A
    16d0:	f0 90 7b 01 	lds	r15, 0x017B
    16d4:	00 91 7c 01 	lds	r16, 0x017C
    16d8:	10 91 7d 01 	lds	r17, 0x017D
    SREG = sreg;
    16dc:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    16de:	a8 01       	movw	r20, r16
    16e0:	97 01       	movw	r18, r14
    16e2:	40 70       	andi	r20, 0x00	; 0
    16e4:	50 70       	andi	r21, 0x00	; 0
    16e6:	cb 01       	movw	r24, r22
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	28 17       	cp	r18, r24
    16ee:	39 07       	cpc	r19, r25
    16f0:	4a 07       	cpc	r20, r26
    16f2:	5b 07       	cpc	r21, r27
    16f4:	20 f0       	brcs	.+8      	; 0x16fe <timer_elapsed+0x40>
    16f6:	97 01       	movw	r18, r14
    16f8:	26 1b       	sub	r18, r22
    16fa:	37 0b       	sbc	r19, r23
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <timer_elapsed+0x4a>
    16fe:	9b 01       	movw	r18, r22
    1700:	20 95       	com	r18
    1702:	30 95       	com	r19
    1704:	2e 0d       	add	r18, r14
    1706:	3f 1d       	adc	r19, r15
}
    1708:	c9 01       	movw	r24, r18
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    timer_count++;
    1726:	80 91 7a 01 	lds	r24, 0x017A
    172a:	90 91 7b 01 	lds	r25, 0x017B
    172e:	a0 91 7c 01 	lds	r26, 0x017C
    1732:	b0 91 7d 01 	lds	r27, 0x017D
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	a1 1d       	adc	r26, r1
    173a:	b1 1d       	adc	r27, r1
    173c:	80 93 7a 01 	sts	0x017A, r24
    1740:	90 93 7b 01 	sts	0x017B, r25
    1744:	a0 93 7c 01 	sts	0x017C, r26
    1748:	b0 93 7d 01 	sts	0x017D, r27
}
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <Endpoint_Write_Control_Stream_LE>:
    175e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1760:	40 91 89 01 	lds	r20, 0x0189
    1764:	50 91 8a 01 	lds	r21, 0x018A
    1768:	46 17       	cp	r20, r22
    176a:	57 07       	cpc	r21, r23
    176c:	18 f4       	brcc	.+6      	; 0x1774 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    176e:	f9 01       	movw	r30, r18
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	43 c0       	rjmp	.+134    	; 0x17fa <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1774:	61 15       	cp	r22, r1
    1776:	71 05       	cpc	r23, r1
    1778:	11 f0       	breq	.+4      	; 0x177e <Endpoint_Write_Control_Stream_LE+0x20>
    177a:	ab 01       	movw	r20, r22
    177c:	f8 cf       	rjmp	.-16     	; 0x176e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    177e:	80 91 e8 00 	lds	r24, 0x00E8
    1782:	8e 77       	andi	r24, 0x7E	; 126
    1784:	80 93 e8 00 	sts	0x00E8, r24
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	f0 cf       	rjmp	.-32     	; 0x176e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    178e:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <Endpoint_Write_Control_Stream_LE+0x3a>
    1796:	47 c0       	rjmp	.+142    	; 0x1826 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1798:	85 30       	cpi	r24, 0x05	; 5
    179a:	09 f4       	brne	.+2      	; 0x179e <Endpoint_Write_Control_Stream_LE+0x40>
    179c:	46 c0       	rjmp	.+140    	; 0x182a <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    179e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17a2:	83 fd       	sbrc	r24, 3
    17a4:	44 c0       	rjmp	.+136    	; 0x182e <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    17aa:	82 fd       	sbrc	r24, 2
    17ac:	36 c0       	rjmp	.+108    	; 0x181a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17ae:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    17b2:	80 ff       	sbrs	r24, 0
    17b4:	22 c0       	rjmp	.+68     	; 0x17fa <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    17b6:	80 91 f3 00 	lds	r24, 0x00F3
    17ba:	90 91 f2 00 	lds	r25, 0x00F2
    17be:	78 2f       	mov	r23, r24
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	29 2f       	mov	r18, r25
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	26 2b       	or	r18, r22
    17c8:	37 2b       	or	r19, r23
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17cc:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ce:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    17d2:	41 50       	subi	r20, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17da:	41 15       	cp	r20, r1
    17dc:	51 05       	cpc	r21, r1
    17de:	19 f0       	breq	.+6      	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0x88>
    17e0:	28 30       	cpi	r18, 0x08	; 8
    17e2:	31 05       	cpc	r19, r1
    17e4:	98 f3       	brcs	.-26     	; 0x17cc <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	28 30       	cpi	r18, 0x08	; 8
    17ea:	31 05       	cpc	r19, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <Endpoint_Write_Control_Stream_LE+0x92>
    17ee:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f0:	80 91 e8 00 	lds	r24, 0x00E8
    17f4:	8e 77       	andi	r24, 0x7E	; 126
    17f6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    17fa:	41 15       	cp	r20, r1
    17fc:	51 05       	cpc	r21, r1
    17fe:	39 f6       	brne	.-114    	; 0x178e <Endpoint_Write_Control_Stream_LE+0x30>
    1800:	99 23       	and	r25, r25
    1802:	29 f6       	brne	.-118    	; 0x178e <Endpoint_Write_Control_Stream_LE+0x30>
    1804:	0a c0       	rjmp	.+20     	; 0x181a <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1806:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    180a:	88 23       	and	r24, r24
    180c:	61 f0       	breq	.+24     	; 0x1826 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    180e:	85 30       	cpi	r24, 0x05	; 5
    1810:	61 f0       	breq	.+24     	; 0x182a <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1812:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1816:	83 fd       	sbrc	r24, 3
    1818:	0a c0       	rjmp	.+20     	; 0x182e <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    181a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    181e:	82 ff       	sbrs	r24, 2
    1820:	f2 cf       	rjmp	.-28     	; 0x1806 <Endpoint_Write_Control_Stream_LE+0xa8>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	08 95       	ret
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	08 95       	ret
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	08 95       	ret
    182e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1830:	08 95       	ret

00001832 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1832:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1834:	61 15       	cp	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	29 f4       	brne	.+10     	; 0x1844 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    183a:	80 91 e8 00 	lds	r24, 0x00E8
    183e:	8b 77       	andi	r24, 0x7B	; 123
    1840:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1844:	f9 01       	movw	r30, r18
    1846:	27 c0       	rjmp	.+78     	; 0x1896 <Endpoint_Read_Control_Stream_LE+0x64>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1848:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    184c:	88 23       	and	r24, r24
    184e:	99 f1       	breq	.+102    	; 0x18b6 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1850:	85 30       	cpi	r24, 0x05	; 5
    1852:	99 f1       	breq	.+102    	; 0x18ba <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1854:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1858:	83 ff       	sbrs	r24, 3
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <Endpoint_Read_Control_Stream_LE+0x2e>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1860:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1864:	82 ff       	sbrs	r24, 2
    1866:	f0 cf       	rjmp	.-32     	; 0x1848 <Endpoint_Read_Control_Stream_LE+0x16>
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    186a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    186e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1870:	61 50       	subi	r22, 0x01	; 1
    1872:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1874:	59 f0       	breq	.+22     	; 0x188c <Endpoint_Read_Control_Stream_LE+0x5a>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1876:	20 91 f3 00 	lds	r18, 0x00F3
    187a:	80 91 f2 00 	lds	r24, 0x00F2
    187e:	32 2f       	mov	r19, r18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	82 2b       	or	r24, r18
    1886:	93 2b       	or	r25, r19
    1888:	89 2b       	or	r24, r25
    188a:	79 f7       	brne	.-34     	; 0x186a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    188c:	80 91 e8 00 	lds	r24, 0x00E8
    1890:	8b 77       	andi	r24, 0x7B	; 123
    1892:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	b1 f6       	brne	.-84     	; 0x1848 <Endpoint_Read_Control_Stream_LE+0x16>
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <Endpoint_Read_Control_Stream_LE+0x78>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    189e:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18a2:	88 23       	and	r24, r24
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	41 f0       	breq	.+16     	; 0x18ba <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18aa:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    18ae:	80 ff       	sbrs	r24, 0
    18b0:	f6 cf       	rjmp	.-20     	; 0x189e <Endpoint_Read_Control_Stream_LE+0x6c>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	08 95       	ret
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	08 95       	ret
    18ba:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18bc:	08 95       	ret

000018be <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    18be:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18c0:	40 91 89 01 	lds	r20, 0x0189
    18c4:	50 91 8a 01 	lds	r21, 0x018A
    18c8:	46 17       	cp	r20, r22
    18ca:	57 07       	cpc	r21, r23
    18cc:	18 f4       	brcc	.+6      	; 0x18d4 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    18ce:	f9 01       	movw	r30, r18
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	44 c0       	rjmp	.+136    	; 0x195c <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18d4:	61 15       	cp	r22, r1
    18d6:	71 05       	cpc	r23, r1
    18d8:	11 f0       	breq	.+4      	; 0x18de <Endpoint_Write_Control_PStream_LE+0x20>
    18da:	ab 01       	movw	r20, r22
    18dc:	f8 cf       	rjmp	.-16     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18de:	80 91 e8 00 	lds	r24, 0x00E8
    18e2:	8e 77       	andi	r24, 0x7E	; 126
    18e4:	80 93 e8 00 	sts	0x00E8, r24
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	f0 cf       	rjmp	.-32     	; 0x18ce <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18ee:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18f2:	88 23       	and	r24, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <Endpoint_Write_Control_PStream_LE+0x3a>
    18f6:	48 c0       	rjmp	.+144    	; 0x1988 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	09 f4       	brne	.+2      	; 0x18fe <Endpoint_Write_Control_PStream_LE+0x40>
    18fc:	47 c0       	rjmp	.+142    	; 0x198c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18fe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1902:	83 fd       	sbrc	r24, 3
    1904:	45 c0       	rjmp	.+138    	; 0x1990 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1906:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    190a:	82 fd       	sbrc	r24, 2
    190c:	37 c0       	rjmp	.+110    	; 0x197c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    190e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1912:	80 ff       	sbrs	r24, 0
    1914:	23 c0       	rjmp	.+70     	; 0x195c <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1916:	80 91 f3 00 	lds	r24, 0x00F3
    191a:	90 91 f2 00 	lds	r25, 0x00F2
    191e:	78 2f       	mov	r23, r24
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	29 2f       	mov	r18, r25
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	26 2b       	or	r18, r22
    1928:	37 2b       	or	r19, r23
    192a:	08 c0       	rjmp	.+16     	; 0x193c <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    192c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    192e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1932:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1934:	41 50       	subi	r20, 0x01	; 1
    1936:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    193c:	41 15       	cp	r20, r1
    193e:	51 05       	cpc	r21, r1
    1940:	19 f0       	breq	.+6      	; 0x1948 <Endpoint_Write_Control_PStream_LE+0x8a>
    1942:	28 30       	cpi	r18, 0x08	; 8
    1944:	31 05       	cpc	r19, r1
    1946:	90 f3       	brcs	.-28     	; 0x192c <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	28 30       	cpi	r18, 0x08	; 8
    194c:	31 05       	cpc	r19, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <Endpoint_Write_Control_PStream_LE+0x94>
    1950:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1952:	80 91 e8 00 	lds	r24, 0x00E8
    1956:	8e 77       	andi	r24, 0x7E	; 126
    1958:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    195c:	41 15       	cp	r20, r1
    195e:	51 05       	cpc	r21, r1
    1960:	31 f6       	brne	.-116    	; 0x18ee <Endpoint_Write_Control_PStream_LE+0x30>
    1962:	99 23       	and	r25, r25
    1964:	21 f6       	brne	.-120    	; 0x18ee <Endpoint_Write_Control_PStream_LE+0x30>
    1966:	0a c0       	rjmp	.+20     	; 0x197c <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1968:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    196c:	88 23       	and	r24, r24
    196e:	61 f0       	breq	.+24     	; 0x1988 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1970:	85 30       	cpi	r24, 0x05	; 5
    1972:	61 f0       	breq	.+24     	; 0x198c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1974:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1978:	83 fd       	sbrc	r24, 3
    197a:	0a c0       	rjmp	.+20     	; 0x1990 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1980:	82 ff       	sbrs	r24, 2
    1982:	f2 cf       	rjmp	.-28     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0xaa>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	08 95       	ret
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	08 95       	ret
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	08 95       	ret
    1990:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1992:	08 95       	ret

00001994 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1994:	bf 92       	push	r11
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	18 2f       	mov	r17, r24
    19a8:	09 2f       	mov	r16, r25
    19aa:	7b 01       	movw	r14, r22
    19ac:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    19ae:	d9 d0       	rcall	.+434    	; 0x1b62 <Endpoint_WaitUntilReady>
    19b0:	b8 2e       	mov	r11, r24
    19b2:	88 23       	and	r24, r24
    19b4:	b1 f5       	brne	.+108    	; 0x1a22 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    19b6:	81 2f       	mov	r24, r17
    19b8:	90 2f       	mov	r25, r16
    19ba:	9c 01       	movw	r18, r24
    19bc:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    19be:	c1 14       	cp	r12, r1
    19c0:	d1 04       	cpc	r13, r1
    19c2:	39 f0       	breq	.+14     	; 0x19d2 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    19c4:	f6 01       	movw	r30, r12
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	e8 1a       	sub	r14, r24
    19cc:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    19ce:	c8 0f       	add	r28, r24
    19d0:	d9 1f       	adc	r29, r25
    19d2:	00 e0       	ldi	r16, 0x00	; 0
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	22 c0       	rjmp	.+68     	; 0x1a1c <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    19d8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    19dc:	85 fd       	sbrc	r24, 5
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19e0:	80 91 e8 00 	lds	r24, 0x00E8
    19e4:	8e 77       	andi	r24, 0x7E	; 126
    19e6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    19ea:	83 d3       	rcall	.+1798   	; 0x20f2 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    19ec:	c1 14       	cp	r12, r1
    19ee:	d1 04       	cpc	r13, r1
    19f0:	49 f0       	breq	.+18     	; 0x1a04 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    19f2:	f6 01       	movw	r30, r12
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	80 0f       	add	r24, r16
    19fa:	91 1f       	adc	r25, r17
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	10 c0       	rjmp	.+32     	; 0x1a24 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1a04:	ae d0       	rcall	.+348    	; 0x1b62 <Endpoint_WaitUntilReady>
    1a06:	88 23       	and	r24, r24
    1a08:	49 f0       	breq	.+18     	; 0x1a1c <Endpoint_Write_Stream_LE+0x88>
    1a0a:	0c c0       	rjmp	.+24     	; 0x1a24 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1a0c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a0e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1a12:	08 94       	sec
    1a14:	e1 08       	sbc	r14, r1
    1a16:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1a1c:	e1 14       	cp	r14, r1
    1a1e:	f1 04       	cpc	r15, r1
    1a20:	d9 f6       	brne	.-74     	; 0x19d8 <Endpoint_Write_Stream_LE+0x44>
    1a22:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	08 95       	ret

00001a38 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1a38:	38 2f       	mov	r19, r24
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	2e c0       	rjmp	.+92     	; 0x1a9a <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a3e:	82 2f       	mov	r24, r18
    1a40:	8f 70       	andi	r24, 0x0F	; 15
    1a42:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1a46:	23 17       	cp	r18, r19
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1a4a:	76 2f       	mov	r23, r22
    1a4c:	94 2f       	mov	r25, r20
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1a52:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1a56:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1a5a:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a5e:	91 ff       	sbrs	r25, 1
    1a60:	1b c0       	rjmp	.+54     	; 0x1a98 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a62:	80 91 eb 00 	lds	r24, 0x00EB
    1a66:	8e 7f       	andi	r24, 0xFE	; 254
    1a68:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a6c:	80 91 ed 00 	lds	r24, 0x00ED
    1a70:	8d 7f       	andi	r24, 0xFD	; 253
    1a72:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a76:	80 91 eb 00 	lds	r24, 0x00EB
    1a7a:	81 60       	ori	r24, 0x01	; 1
    1a7c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a80:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a84:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    1a88:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a8c:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a90:	87 fd       	sbrc	r24, 7
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	27 30       	cpi	r18, 0x07	; 7
    1a9c:	80 f2       	brcs	.-96     	; 0x1a3e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a9e:	3f 70       	andi	r19, 0x0F	; 15
    1aa0:	30 93 e9 00 	sts	0x00E9, r19
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1aa6:	08 95       	ret

00001aa8 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	06 2f       	mov	r16, r22
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	2a c0       	rjmp	.+84     	; 0x1b0c <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    1ab8:	98 81       	ld	r25, Y
    1aba:	99 23       	and	r25, r25
    1abc:	29 f1       	breq	.+74     	; 0x1b08 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1abe:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1ac6:	89 2f       	mov	r24, r25
    1ac8:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1aca:	87 30       	cpi	r24, 0x07	; 7
    1acc:	18 f5       	brcc	.+70     	; 0x1b14 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	10 f4       	brcc	.+4      	; 0x1ad6 <Endpoint_ConfigureEndpointTable+0x2e>
    1ad2:	52 e0       	ldi	r21, 0x02	; 2
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <Endpoint_ConfigureEndpointTable+0x30>
    1ad6:	56 e0       	ldi	r21, 0x06	; 6
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	28 e0       	ldi	r18, 0x08	; 8
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1ae0:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ae6:	2e 17       	cp	r18, r30
    1ae8:	3f 07       	cpc	r19, r31
    1aea:	d0 f3       	brcs	.-12     	; 0x1ae0 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1aec:	62 95       	swap	r22
    1aee:	66 0f       	add	r22, r22
    1af0:	66 0f       	add	r22, r22
    1af2:	60 7c       	andi	r22, 0xC0	; 192
    1af4:	99 1f       	adc	r25, r25
    1af6:	99 27       	eor	r25, r25
    1af8:	99 1f       	adc	r25, r25
    1afa:	69 2b       	or	r22, r25
    1afc:	42 95       	swap	r20
    1afe:	40 7f       	andi	r20, 0xF0	; 240
    1b00:	45 2b       	or	r20, r21
    1b02:	9a df       	rcall	.-204    	; 0x1a38 <Endpoint_ConfigureEndpoint_Prv>
    1b04:	88 23       	and	r24, r24
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b08:	1f 5f       	subi	r17, 0xFF	; 255
    1b0a:	25 96       	adiw	r28, 0x05	; 5
    1b0c:	10 17       	cp	r17, r16
    1b0e:	a0 f2       	brcs	.-88     	; 0x1ab8 <Endpoint_ConfigureEndpointTable+0x10>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <Endpoint_ConfigureEndpointTable+0x6e>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b20:	80 91 83 01 	lds	r24, 0x0183
    1b24:	88 23       	and	r24, r24
    1b26:	9c f4       	brge	.+38     	; 0x1b4e <Endpoint_ClearStatusStage+0x2e>
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b2a:	80 91 82 01 	lds	r24, 0x0182
    1b2e:	88 23       	and	r24, r24
    1b30:	b9 f0       	breq	.+46     	; 0x1b60 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b32:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b36:	82 ff       	sbrs	r24, 2
    1b38:	f8 cf       	rjmp	.-16     	; 0x1b2a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8
    1b3e:	8b 77       	andi	r24, 0x7B	; 123
    1b40:	80 93 e8 00 	sts	0x00E8, r24
    1b44:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b46:	80 91 82 01 	lds	r24, 0x0182
    1b4a:	88 23       	and	r24, r24
    1b4c:	49 f0       	breq	.+18     	; 0x1b60 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b4e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b52:	80 ff       	sbrs	r24, 0
    1b54:	f8 cf       	rjmp	.-16     	; 0x1b46 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b56:	80 91 e8 00 	lds	r24, 0x00E8
    1b5a:	8e 77       	andi	r24, 0x7E	; 126
    1b5c:	80 93 e8 00 	sts	0x00E8, r24
    1b60:	08 95       	ret

00001b62 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b62:	40 91 e4 00 	lds	r20, 0x00E4
    1b66:	50 91 e5 00 	lds	r21, 0x00E5
    1b6a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b6c:	80 91 ec 00 	lds	r24, 0x00EC
    1b70:	80 ff       	sbrs	r24, 0
    1b72:	24 c0       	rjmp	.+72     	; 0x1bbc <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b74:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b78:	80 fd       	sbrc	r24, 0
    1b7a:	1e c0       	rjmp	.+60     	; 0x1bb8 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b7c:	80 91 82 01 	lds	r24, 0x0182

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b80:	88 23       	and	r24, r24
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <Endpoint_WaitUntilReady+0x26>
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b88:	85 30       	cpi	r24, 0x05	; 5
    1b8a:	11 f4       	brne	.+4      	; 0x1b90 <Endpoint_WaitUntilReady+0x2e>
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b90:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b94:	85 ff       	sbrs	r24, 5
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <Endpoint_WaitUntilReady+0x3a>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	08 95       	ret
    1b9c:	80 91 e4 00 	lds	r24, 0x00E4
    1ba0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ba4:	84 17       	cp	r24, r20
    1ba6:	95 07       	cpc	r25, r21
    1ba8:	09 f3       	breq	.-62     	; 0x1b6c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1baa:	22 23       	and	r18, r18
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <Endpoint_WaitUntilReady+0x50>
    1bae:	84 e0       	ldi	r24, 0x04	; 4
    1bb0:	08 95       	ret
    1bb2:	21 50       	subi	r18, 0x01	; 1
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	da cf       	rjmp	.-76     	; 0x1b6c <Endpoint_WaitUntilReady+0xa>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1bba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bbc:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bc0:	82 ff       	sbrs	r24, 2
    1bc2:	dc cf       	rjmp	.-72     	; 0x1b7c <Endpoint_WaitUntilReady+0x1a>
    1bc4:	f9 cf       	rjmp	.-14     	; 0x1bb8 <Endpoint_WaitUntilReady+0x56>

00001bc6 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bce:	4f d0       	rcall	.+158    	; 0x1c6e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bd0:	56 d0       	rcall	.+172    	; 0x1c7e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bd2:	08 ed       	ldi	r16, 0xD8	; 216
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 77       	andi	r24, 0x7F	; 127
    1bdc:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1bde:	80 81       	ld	r24, Z
    1be0:	80 68       	ori	r24, 0x80	; 128
    1be2:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1be4:	80 81       	ld	r24, Z
    1be6:	8f 7d       	andi	r24, 0xDF	; 223
    1be8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bea:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bec:	10 92 82 01 	sts	0x0182, r1
	USB_Device_ConfigurationNumber  = 0;
    1bf0:	10 92 7e 01 	sts	0x017E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bf4:	10 92 80 01 	sts	0x0180, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bf8:	10 92 7f 01 	sts	0x017F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bfc:	80 ee       	ldi	r24, 0xE0	; 224
    1bfe:	e8 2e       	mov	r14, r24
    1c00:	f1 2c       	mov	r15, r1
    1c02:	f7 01       	movw	r30, r14
    1c04:	80 81       	ld	r24, Z
    1c06:	8b 7f       	andi	r24, 0xFB	; 251
    1c08:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	42 e0       	ldi	r20, 0x02	; 2
    1c18:	0f df       	rcall	.-482    	; 0x1a38 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c1a:	e1 ee       	ldi	r30, 0xE1	; 225
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8e 7f       	andi	r24, 0xFE	; 254
    1c22:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c24:	e2 ee       	ldi	r30, 0xE2	; 226
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	81 60       	ori	r24, 0x01	; 1
    1c2c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c34:	f7 01       	movw	r30, r14
    1c36:	80 81       	ld	r24, Z
    1c38:	8e 7f       	andi	r24, 0xFE	; 254
    1c3a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	80 81       	ld	r24, Z
    1c40:	80 61       	ori	r24, 0x10	; 16
    1c42:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	08 95       	ret

00001c4e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c4e:	e8 ed       	ldi	r30, 0xD8	; 216
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7e       	andi	r24, 0xEF	; 239
    1c56:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c58:	e7 ed       	ldi	r30, 0xD7	; 215
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	81 60       	ori	r24, 0x01	; 1
    1c60:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c62:	84 e0       	ldi	r24, 0x04	; 4
    1c64:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 81 01 	sts	0x0181, r24

	USB_ResetInterface();
}
    1c6c:	ac cf       	rjmp	.-168    	; 0x1bc6 <USB_ResetInterface>

00001c6e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c6e:	e8 ed       	ldi	r30, 0xD8	; 216
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8e 7f       	andi	r24, 0xFE	; 254
    1c76:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c78:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1c7c:	08 95       	ret

00001c7e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c7e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c82:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1c86:	08 95       	ret

00001c88 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
    1c90:	11 24       	eor	r1, r1
    1c92:	2f 93       	push	r18
    1c94:	3f 93       	push	r19
    1c96:	4f 93       	push	r20
    1c98:	5f 93       	push	r21
    1c9a:	6f 93       	push	r22
    1c9c:	7f 93       	push	r23
    1c9e:	8f 93       	push	r24
    1ca0:	9f 93       	push	r25
    1ca2:	af 93       	push	r26
    1ca4:	bf 93       	push	r27
    1ca6:	ef 93       	push	r30
    1ca8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1caa:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1cae:	82 ff       	sbrs	r24, 2
    1cb0:	0b c0       	rjmp	.+22     	; 0x1cc8 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1cb2:	80 91 e2 00 	lds	r24, 0x00E2
    1cb6:	82 ff       	sbrs	r24, 2
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1cba:	80 91 e1 00 	lds	r24, 0x00E1
    1cbe:	8b 7f       	andi	r24, 0xFB	; 251
    1cc0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1cc4:	0e 94 57 02 	call	0x4ae	; 0x4ae <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1cc8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	1f c0       	rjmp	.+62     	; 0x1d0e <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cd0:	80 91 d8 00 	lds	r24, 0x00D8
    1cd4:	80 ff       	sbrs	r24, 0
    1cd6:	1b c0       	rjmp	.+54     	; 0x1d0e <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cd8:	80 91 da 00 	lds	r24, 0x00DA
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1ce2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1ce6:	80 ff       	sbrs	r24, 0
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cea:	80 e1       	ldi	r24, 0x10	; 16
    1cec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cee:	82 e1       	ldi	r24, 0x12	; 18
    1cf0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cf2:	09 b4       	in	r0, 0x29	; 41
    1cf4:	00 fe       	sbrs	r0, 0
    1cf6:	fd cf       	rjmp	.-6      	; 0x1cf2 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 82 01 	sts	0x0182, r24
			EVENT_USB_Device_Connect();
    1cfe:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EVENT_USB_Device_Connect>
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d04:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d06:	10 92 82 01 	sts	0x0182, r1
			EVENT_USB_Device_Disconnect();
    1d0a:	0e 94 55 02 	call	0x4aa	; 0x4aa <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d0e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d12:	80 ff       	sbrs	r24, 0
    1d14:	18 c0       	rjmp	.+48     	; 0x1d46 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d16:	80 91 e2 00 	lds	r24, 0x00E2
    1d1a:	80 ff       	sbrs	r24, 0
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d1e:	80 91 e2 00 	lds	r24, 0x00E2
    1d22:	8e 7f       	andi	r24, 0xFE	; 254
    1d24:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d28:	80 91 e2 00 	lds	r24, 0x00E2
    1d2c:	80 61       	ori	r24, 0x10	; 16
    1d2e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d32:	80 91 d8 00 	lds	r24, 0x00D8
    1d36:	80 62       	ori	r24, 0x20	; 32
    1d38:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d3c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d3e:	85 e0       	ldi	r24, 0x05	; 5
    1d40:	80 93 82 01 	sts	0x0182, r24
		EVENT_USB_Device_Suspend();
    1d44:	d5 d1       	rcall	.+938    	; 0x20f0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d46:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d4a:	84 ff       	sbrs	r24, 4
    1d4c:	2f c0       	rjmp	.+94     	; 0x1dac <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d4e:	80 91 e2 00 	lds	r24, 0x00E2
    1d52:	84 ff       	sbrs	r24, 4
    1d54:	2b c0       	rjmp	.+86     	; 0x1dac <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d56:	80 e1       	ldi	r24, 0x10	; 16
    1d58:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d5a:	82 e1       	ldi	r24, 0x12	; 18
    1d5c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d5e:	09 b4       	in	r0, 0x29	; 41
    1d60:	00 fe       	sbrs	r0, 0
    1d62:	fd cf       	rjmp	.-6      	; 0x1d5e <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d64:	80 91 d8 00 	lds	r24, 0x00D8
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d6e:	80 91 e1 00 	lds	r24, 0x00E1
    1d72:	8f 7e       	andi	r24, 0xEF	; 239
    1d74:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d78:	80 91 e2 00 	lds	r24, 0x00E2
    1d7c:	8f 7e       	andi	r24, 0xEF	; 239
    1d7e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d82:	80 91 e2 00 	lds	r24, 0x00E2
    1d86:	81 60       	ori	r24, 0x01	; 1
    1d88:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d8c:	80 91 7e 01 	lds	r24, 0x017E
    1d90:	88 23       	and	r24, r24
    1d92:	11 f0       	breq	.+4      	; 0x1d98 <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <__vector_10+0x11e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d98:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d9c:	87 fd       	sbrc	r24, 7
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <__vector_10+0x11c>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <__vector_10+0x11e>
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	80 93 82 01 	sts	0x0182, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1daa:	a2 d1       	rcall	.+836    	; 0x20f0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1dac:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1db0:	83 ff       	sbrs	r24, 3
    1db2:	22 c0       	rjmp	.+68     	; 0x1df8 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1db4:	80 91 e2 00 	lds	r24, 0x00E2
    1db8:	83 ff       	sbrs	r24, 3
    1dba:	1e c0       	rjmp	.+60     	; 0x1df8 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1dbc:	80 91 e1 00 	lds	r24, 0x00E1
    1dc0:	87 7f       	andi	r24, 0xF7	; 247
    1dc2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	80 93 82 01 	sts	0x0182, r24
		USB_Device_ConfigurationNumber = 0;
    1dcc:	10 92 7e 01 	sts	0x017E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dd0:	80 91 e1 00 	lds	r24, 0x00E1
    1dd4:	8e 7f       	andi	r24, 0xFE	; 254
    1dd6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dda:	80 91 e2 00 	lds	r24, 0x00E2
    1dde:	8e 7f       	andi	r24, 0xFE	; 254
    1de0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1de4:	80 91 e2 00 	lds	r24, 0x00E2
    1de8:	80 61       	ori	r24, 0x10	; 16
    1dea:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	42 e0       	ldi	r20, 0x02	; 2
    1df4:	21 de       	rcall	.-958    	; 0x1a38 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1df6:	7c d1       	rcall	.+760    	; 0x20f0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	bf 91       	pop	r27
    1dfe:	af 91       	pop	r26
    1e00:	9f 91       	pop	r25
    1e02:	8f 91       	pop	r24
    1e04:	7f 91       	pop	r23
    1e06:	6f 91       	pop	r22
    1e08:	5f 91       	pop	r21
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e1a:	1f 93       	push	r17
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	ac 97       	sbiw	r28, 0x2c	; 44
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	e3 e8       	ldi	r30, 0x83	; 131
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e34:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e38:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	eb 38       	cpi	r30, 0x8B	; 139
    1e3e:	f2 07       	cpc	r31, r18
    1e40:	c9 f7       	brne	.-14     	; 0x1e34 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e42:	0e 94 00 05 	call	0xa00	; 0xa00 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e46:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e4a:	83 ff       	sbrs	r24, 3
    1e4c:	39 c1       	rjmp	.+626    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e4e:	80 91 83 01 	lds	r24, 0x0183

		switch (USB_ControlRequest.bRequest)
    1e52:	30 91 84 01 	lds	r19, 0x0184
    1e56:	35 30       	cpi	r19, 0x05	; 5
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <USB_Device_ProcessControlRequest+0x42>
    1e5a:	87 c0       	rjmp	.+270    	; 0x1f6a <USB_Device_ProcessControlRequest+0x150>
    1e5c:	36 30       	cpi	r19, 0x06	; 6
    1e5e:	40 f4       	brcc	.+16     	; 0x1e70 <USB_Device_ProcessControlRequest+0x56>
    1e60:	31 30       	cpi	r19, 0x01	; 1
    1e62:	c9 f1       	breq	.+114    	; 0x1ed6 <USB_Device_ProcessControlRequest+0xbc>
    1e64:	31 30       	cpi	r19, 0x01	; 1
    1e66:	70 f0       	brcs	.+28     	; 0x1e84 <USB_Device_ProcessControlRequest+0x6a>
    1e68:	33 30       	cpi	r19, 0x03	; 3
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <USB_Device_ProcessControlRequest+0x54>
    1e6c:	29 c1       	rjmp	.+594    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
    1e6e:	33 c0       	rjmp	.+102    	; 0x1ed6 <USB_Device_ProcessControlRequest+0xbc>
    1e70:	38 30       	cpi	r19, 0x08	; 8
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <USB_Device_ProcessControlRequest+0x5c>
    1e74:	f6 c0       	rjmp	.+492    	; 0x2062 <USB_Device_ProcessControlRequest+0x248>
    1e76:	39 30       	cpi	r19, 0x09	; 9
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <USB_Device_ProcessControlRequest+0x62>
    1e7a:	05 c1       	rjmp	.+522    	; 0x2086 <USB_Device_ProcessControlRequest+0x26c>
    1e7c:	36 30       	cpi	r19, 0x06	; 6
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <USB_Device_ProcessControlRequest+0x68>
    1e80:	1f c1       	rjmp	.+574    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
    1e82:	96 c0       	rjmp	.+300    	; 0x1fb0 <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e84:	80 38       	cpi	r24, 0x80	; 128
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <USB_Device_ProcessControlRequest+0x76>
    1e88:	82 38       	cpi	r24, 0x82	; 130
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <USB_Device_ProcessControlRequest+0x74>
    1e8c:	19 c1       	rjmp	.+562    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <USB_Device_ProcessControlRequest+0x86>
    1e90:	90 91 7f 01 	lds	r25, 0x017F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e94:	80 91 80 01 	lds	r24, 0x0180
    1e98:	88 23       	and	r24, r24
    1e9a:	99 f0       	breq	.+38     	; 0x1ec2 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e9c:	92 60       	ori	r25, 0x02	; 2
    1e9e:	11 c0       	rjmp	.+34     	; 0x1ec2 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ea0:	80 91 87 01 	lds	r24, 0x0187
    1ea4:	8f 70       	andi	r24, 0x0F	; 15
    1ea6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1eaa:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	25 e0       	ldi	r18, 0x05	; 5
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	2a 95       	dec	r18
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <USB_Device_ProcessControlRequest+0x98>
    1eba:	98 2f       	mov	r25, r24
    1ebc:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ebe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ec2:	80 91 e8 00 	lds	r24, 0x00E8
    1ec6:	87 7f       	andi	r24, 0xF7	; 247
    1ec8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ecc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1ed0:	10 92 f1 00 	sts	0x00F1, r1
    1ed4:	d1 c0       	rjmp	.+418    	; 0x2078 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ed6:	88 23       	and	r24, r24
    1ed8:	19 f0       	breq	.+6      	; 0x1ee0 <USB_Device_ProcessControlRequest+0xc6>
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <USB_Device_ProcessControlRequest+0xc6>
    1ede:	f0 c0       	rjmp	.+480    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	8f 71       	andi	r24, 0x1F	; 31
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	21 f0       	breq	.+8      	; 0x1ef2 <USB_Device_ProcessControlRequest+0xd8>
    1eea:	02 97       	sbiw	r24, 0x02	; 2
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <USB_Device_ProcessControlRequest+0xd6>
    1eee:	e8 c0       	rjmp	.+464    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
    1ef0:	0c c0       	rjmp	.+24     	; 0x1f0a <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1ef2:	80 91 85 01 	lds	r24, 0x0185
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <USB_Device_ProcessControlRequest+0xe2>
    1efa:	e2 c0       	rjmp	.+452    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1efc:	10 92 80 01 	sts	0x0180, r1
    1f00:	33 30       	cpi	r19, 0x03	; 3
    1f02:	69 f5       	brne	.+90     	; 0x1f5e <USB_Device_ProcessControlRequest+0x144>
    1f04:	80 93 80 01 	sts	0x0180, r24
    1f08:	2a c0       	rjmp	.+84     	; 0x1f5e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f0a:	80 91 85 01 	lds	r24, 0x0185
    1f0e:	88 23       	and	r24, r24
    1f10:	31 f5       	brne	.+76     	; 0x1f5e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f12:	20 91 87 01 	lds	r18, 0x0187
    1f16:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <USB_Device_ProcessControlRequest+0x102>
    1f1a:	d2 c0       	rjmp	.+420    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f1c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f20:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f24:	80 ff       	sbrs	r24, 0
    1f26:	1b c0       	rjmp	.+54     	; 0x1f5e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f28:	33 30       	cpi	r19, 0x03	; 3
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f2c:	80 91 eb 00 	lds	r24, 0x00EB
    1f30:	80 62       	ori	r24, 0x20	; 32
    1f32:	13 c0       	rjmp	.+38     	; 0x1f5a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f34:	80 91 eb 00 	lds	r24, 0x00EB
    1f38:	80 61       	ori	r24, 0x10	; 16
    1f3a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <USB_Device_ProcessControlRequest+0x12e>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	2a 95       	dec	r18
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <USB_Device_ProcessControlRequest+0x12a>
    1f4c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f50:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f54:	80 91 eb 00 	lds	r24, 0x00EB
    1f58:	88 60       	ori	r24, 0x08	; 8
    1f5a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f62:	80 91 e8 00 	lds	r24, 0x00E8
    1f66:	87 7f       	andi	r24, 0xF7	; 247
    1f68:	8a c0       	rjmp	.+276    	; 0x207e <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <USB_Device_ProcessControlRequest+0x156>
    1f6e:	a8 c0       	rjmp	.+336    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f70:	10 91 85 01 	lds	r17, 0x0185
    1f74:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f76:	80 91 e3 00 	lds	r24, 0x00E3
    1f7a:	80 78       	andi	r24, 0x80	; 128
    1f7c:	81 2b       	or	r24, r17
    1f7e:	80 93 e3 00 	sts	0x00E3, r24
    1f82:	80 91 e8 00 	lds	r24, 0x00E8
    1f86:	87 7f       	andi	r24, 0xF7	; 247
    1f88:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f8c:	c9 dd       	rcall	.-1134   	; 0x1b20 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f8e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f92:	80 ff       	sbrs	r24, 0
    1f94:	fc cf       	rjmp	.-8      	; 0x1f8e <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f96:	80 91 e3 00 	lds	r24, 0x00E3
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fa0:	11 23       	and	r17, r17
    1fa2:	11 f4       	brne	.+4      	; 0x1fa8 <USB_Device_ProcessControlRequest+0x18e>
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <USB_Device_ProcessControlRequest+0x190>
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	80 93 82 01 	sts	0x0182, r24
    1fae:	88 c0       	rjmp	.+272    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fb0:	80 58       	subi	r24, 0x80	; 128
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <USB_Device_ProcessControlRequest+0x19e>
    1fb6:	84 c0       	rjmp	.+264    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1fb8:	80 91 85 01 	lds	r24, 0x0185
    1fbc:	90 91 86 01 	lds	r25, 0x0186
    1fc0:	23 e0       	ldi	r18, 0x03	; 3
    1fc2:	8c 3d       	cpi	r24, 0xDC	; 220
    1fc4:	92 07       	cpc	r25, r18
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <USB_Device_ProcessControlRequest+0x1b0>
    1fc8:	33 c0       	rjmp	.+102    	; 0x2030 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1fce:	8a e2       	ldi	r24, 0x2A	; 42
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fd2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1fd4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1fd6:	de 01       	movw	r26, r28
    1fd8:	15 96       	adiw	r26, 0x05	; 5
    1fda:	6e e0       	ldi	r22, 0x0E	; 14
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1fe0:	11 e2       	ldi	r17, 0x21	; 33
    1fe2:	e6 2f       	mov	r30, r22
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	10 93 57 00 	sts	0x0057, r17
    1fea:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1fec:	40 ff       	sbrs	r20, 0
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
    1ff0:	82 95       	swap	r24
    1ff2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1ff4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ff6:	8f 70       	andi	r24, 0x0F	; 15
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ffc:	8a 30       	cpi	r24, 0x0A	; 10
    1ffe:	18 f0       	brcs	.+6      	; 0x2006 <USB_Device_ProcessControlRequest+0x1ec>
    2000:	c9 01       	movw	r24, r18
    2002:	c7 96       	adiw	r24, 0x37	; 55
    2004:	02 c0       	rjmp	.+4      	; 0x200a <USB_Device_ProcessControlRequest+0x1f0>
    2006:	c9 01       	movw	r24, r18
    2008:	c0 96       	adiw	r24, 0x30	; 48
    200a:	8d 93       	st	X+, r24
    200c:	9d 93       	st	X+, r25
    200e:	4f 5f       	subi	r20, 0xFF	; 255
    2010:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2012:	44 31       	cpi	r20, 0x14	; 20
    2014:	51 05       	cpc	r21, r1
    2016:	29 f7       	brne	.-54     	; 0x1fe2 <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2018:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    201a:	80 91 e8 00 	lds	r24, 0x00E8
    201e:	87 7f       	andi	r24, 0xF7	; 247
    2020:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2024:	ce 01       	movw	r24, r28
    2026:	03 96       	adiw	r24, 0x03	; 3
    2028:	6a e2       	ldi	r22, 0x2A	; 42
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	98 db       	rcall	.-2256   	; 0x175e <Endpoint_Write_Control_Stream_LE>
    202e:	13 c0       	rjmp	.+38     	; 0x2056 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2030:	60 91 87 01 	lds	r22, 0x0187
    2034:	ae 01       	movw	r20, r28
    2036:	4f 5f       	subi	r20, 0xFF	; 255
    2038:	5f 4f       	sbci	r21, 0xFF	; 255
    203a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <CALLBACK_USB_GetDescriptor>
    203e:	bc 01       	movw	r22, r24
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	09 f4       	brne	.+2      	; 0x2046 <USB_Device_ProcessControlRequest+0x22c>
    2044:	3d c0       	rjmp	.+122    	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
    2046:	80 91 e8 00 	lds	r24, 0x00E8
    204a:	87 7f       	andi	r24, 0xF7	; 247
    204c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	34 dc       	rcall	.-1944   	; 0x18be <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2056:	80 91 e8 00 	lds	r24, 0x00E8
    205a:	8b 77       	andi	r24, 0x7B	; 123
    205c:	80 93 e8 00 	sts	0x00E8, r24
    2060:	2f c0       	rjmp	.+94     	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2062:	80 38       	cpi	r24, 0x80	; 128
    2064:	69 f5       	brne	.+90     	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2066:	80 91 e8 00 	lds	r24, 0x00E8
    206a:	87 7f       	andi	r24, 0xF7	; 247
    206c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2070:	80 91 7e 01 	lds	r24, 0x017E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2074:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2078:	80 91 e8 00 	lds	r24, 0x00E8
    207c:	8e 77       	andi	r24, 0x7E	; 126
    207e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2082:	4e dd       	rcall	.-1380   	; 0x1b20 <Endpoint_ClearStatusStage>
    2084:	1d c0       	rjmp	.+58     	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2086:	88 23       	and	r24, r24
    2088:	d9 f4       	brne	.+54     	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    208a:	90 91 85 01 	lds	r25, 0x0185
    208e:	92 30       	cpi	r25, 0x02	; 2
    2090:	b8 f4       	brcc	.+46     	; 0x20c0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2092:	80 91 e8 00 	lds	r24, 0x00E8
    2096:	87 7f       	andi	r24, 0xF7	; 247
    2098:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    209c:	90 93 7e 01 	sts	0x017E, r25

	Endpoint_ClearStatusStage();
    20a0:	3f dd       	rcall	.-1410   	; 0x1b20 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20a2:	80 91 7e 01 	lds	r24, 0x017E
    20a6:	88 23       	and	r24, r24
    20a8:	31 f4       	brne	.+12     	; 0x20b6 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20aa:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20ae:	87 fd       	sbrc	r24, 7
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <USB_Device_ProcessControlRequest+0x29c>
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <USB_Device_ProcessControlRequest+0x29e>
    20b6:	84 e0       	ldi	r24, 0x04	; 4
    20b8:	80 93 82 01 	sts	0x0182, r24

	EVENT_USB_Device_ConfigurationChanged();
    20bc:	0e 94 0c 05 	call	0xa18	; 0xa18 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20c0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20c4:	83 ff       	sbrs	r24, 3
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <USB_Device_ProcessControlRequest+0x2c2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c8:	80 91 e8 00 	lds	r24, 0x00E8
    20cc:	87 7f       	andi	r24, 0xF7	; 247
    20ce:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20d2:	80 91 eb 00 	lds	r24, 0x00EB
    20d6:	80 62       	ori	r24, 0x20	; 32
    20d8:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20dc:	ac 96       	adiw	r28, 0x2c	; 44
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	08 95       	ret

000020f0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    20f0:	08 95       	ret

000020f2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    20f2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    20f4:	80 91 82 01 	lds	r24, 0x0182
    20f8:	88 23       	and	r24, r24
    20fa:	71 f0       	breq	.+28     	; 0x2118 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20fc:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2100:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2104:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2108:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    210c:	83 ff       	sbrs	r24, 3
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    2110:	84 de       	rcall	.-760    	; 0x1e1a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2112:	1f 70       	andi	r17, 0x0F	; 15
    2114:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2118:	1f 91       	pop	r17
    211a:	08 95       	ret

0000211c <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    211c:	4f 92       	push	r4
    211e:	5f 92       	push	r5
    2120:	6f 92       	push	r6
    2122:	7f 92       	push	r7
    2124:	8f 92       	push	r8
    2126:	9f 92       	push	r9
    2128:	af 92       	push	r10
    212a:	bf 92       	push	r11
    212c:	cf 92       	push	r12
    212e:	df 92       	push	r13
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <HID_Device_USBTask+0x22>
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2146:	6d b6       	in	r6, 0x3d	; 61
    2148:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    214a:	80 91 82 01 	lds	r24, 0x0182
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	09 f0       	breq	.+2      	; 0x2154 <HID_Device_USBTask+0x38>
    2152:	9a c0       	rjmp	.+308    	; 0x2288 <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2154:	20 91 e4 00 	lds	r18, 0x00E4
    2158:	30 91 e5 00 	lds	r19, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    215c:	f7 01       	movw	r30, r14
    215e:	82 85       	ldd	r24, Z+10	; 0x0a
    2160:	93 85       	ldd	r25, Z+11	; 0x0b
    2162:	82 17       	cp	r24, r18
    2164:	93 07       	cpc	r25, r19
    2166:	09 f4       	brne	.+2      	; 0x216a <HID_Device_USBTask+0x4e>
    2168:	8f c0       	rjmp	.+286    	; 0x2288 <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    216a:	81 81       	ldd	r24, Z+1	; 0x01
    216c:	8f 70       	andi	r24, 0x0F	; 15
    216e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2172:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    2176:	85 ff       	sbrs	r24, 5
    2178:	87 c0       	rjmp	.+270    	; 0x2288 <HID_Device_USBTask+0x16c>
    217a:	5d b6       	in	r5, 0x3d	; 61
    217c:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    217e:	40 85       	ldd	r20, Z+8	; 0x08
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	8d b7       	in	r24, 0x3d	; 61
    2184:	9e b7       	in	r25, 0x3e	; 62
    2186:	84 1b       	sub	r24, r20
    2188:	95 0b       	sbc	r25, r21
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	9e bf       	out	0x3e, r25	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	8d bf       	out	0x3d, r24	; 61
    2194:	0d b7       	in	r16, 0x3d	; 61
    2196:	1e b7       	in	r17, 0x3e	; 62
    2198:	0f 5f       	subi	r16, 0xFF	; 255
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    219c:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    219e:	1b 82       	std	Y+3, r1	; 0x03
    21a0:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    21a2:	c0 2e       	mov	r12, r16
    21a4:	91 2e       	mov	r9, r17
    21a6:	c8 01       	movw	r24, r16
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	2a d3       	rcall	.+1620   	; 0x2804 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    21b0:	c7 01       	movw	r24, r14
    21b2:	be 01       	movw	r22, r28
    21b4:	6f 5f       	subi	r22, 0xFF	; 255
    21b6:	7f 4f       	sbci	r23, 0xFF	; 255
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	98 01       	movw	r18, r16
    21bc:	8e 01       	movw	r16, r28
    21be:	0e 5f       	subi	r16, 0xFE	; 254
    21c0:	1f 4f       	sbci	r17, 0xFF	; 255
    21c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CALLBACK_HID_Device_CreateHIDReport>
    21c6:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    21c8:	f7 01       	movw	r30, r14
    21ca:	84 85       	ldd	r24, Z+12	; 0x0c
    21cc:	95 85       	ldd	r25, Z+13	; 0x0d
    21ce:	89 2b       	or	r24, r25
    21d0:	19 f4       	brne	.+6      	; 0x21d8 <HID_Device_USBTask+0xbc>
    21d2:	aa 24       	eor	r10, r10
    21d4:	bb 24       	eor	r11, r11
    21d6:	0b c0       	rjmp	.+22     	; 0x21ee <HID_Device_USBTask+0xd2>
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	f7 01       	movw	r30, r14
    21dc:	86 85       	ldd	r24, Z+14	; 0x0e
    21de:	97 85       	ldd	r25, Z+15	; 0x0f
    21e0:	89 2b       	or	r24, r25
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <HID_Device_USBTask+0xca>
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	28 27       	eor	r18, r24
    21ea:	a2 2e       	mov	r10, r18
    21ec:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    21ee:	f7 01       	movw	r30, r14
    21f0:	06 81       	ldd	r16, Z+6	; 0x06
    21f2:	17 81       	ldd	r17, Z+7	; 0x07
    21f4:	01 15       	cp	r16, r1
    21f6:	11 05       	cpc	r17, r1
    21f8:	11 f4       	brne	.+4      	; 0x21fe <HID_Device_USBTask+0xe2>
    21fa:	dd 24       	eor	r13, r13
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <HID_Device_USBTask+0x106>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    21fe:	4a 81       	ldd	r20, Y+2	; 0x02
    2200:	5b 81       	ldd	r21, Y+3	; 0x03
    2202:	8c 2d       	mov	r24, r12
    2204:	99 2d       	mov	r25, r9
    2206:	b8 01       	movw	r22, r16
    2208:	e7 d2       	rcall	.+1486   	; 0x27d8 <memcmp>
    220a:	dd 24       	eor	r13, r13
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	11 f0       	breq	.+4      	; 0x2214 <HID_Device_USBTask+0xf8>
    2210:	dd 24       	eor	r13, r13
    2212:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2214:	f7 01       	movw	r30, r14
    2216:	40 85       	ldd	r20, Z+8	; 0x08
    2218:	c8 01       	movw	r24, r16
    221a:	6c 2d       	mov	r22, r12
    221c:	79 2d       	mov	r23, r9
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	e8 d2       	rcall	.+1488   	; 0x27f2 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	89 2b       	or	r24, r25
    2228:	01 f1       	breq	.+64     	; 0x226a <HID_Device_USBTask+0x14e>
    222a:	88 20       	and	r8, r8
    222c:	21 f4       	brne	.+8      	; 0x2236 <HID_Device_USBTask+0x11a>
    222e:	dd 20       	and	r13, r13
    2230:	11 f4       	brne	.+4      	; 0x2236 <HID_Device_USBTask+0x11a>
    2232:	ab 28       	or	r10, r11
    2234:	d1 f0       	breq	.+52     	; 0x226a <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2236:	f7 01       	movw	r30, r14
    2238:	84 85       	ldd	r24, Z+12	; 0x0c
    223a:	95 85       	ldd	r25, Z+13	; 0x0d
    223c:	97 87       	std	Z+15, r25	; 0x0f
    223e:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2240:	81 81       	ldd	r24, Z+1	; 0x01
    2242:	8f 70       	andi	r24, 0x0F	; 15
    2244:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	88 23       	and	r24, r24
    224c:	11 f0       	breq	.+4      	; 0x2252 <HID_Device_USBTask+0x136>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    224e:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2252:	6a 81       	ldd	r22, Y+2	; 0x02
    2254:	7b 81       	ldd	r23, Y+3	; 0x03
    2256:	8c 2d       	mov	r24, r12
    2258:	99 2d       	mov	r25, r9
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	9a db       	rcall	.-2252   	; 0x1994 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2260:	80 91 e8 00 	lds	r24, 0x00E8
    2264:	8e 77       	andi	r24, 0x7E	; 126
    2266:	80 93 e8 00 	sts	0x00E8, r24
    226a:	80 91 e4 00 	lds	r24, 0x00E4
    226e:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2272:	f7 01       	movw	r30, r14
    2274:	93 87       	std	Z+11, r25	; 0x0b
    2276:	82 87       	std	Z+10, r24	; 0x0a
    2278:	25 2d       	mov	r18, r5
    227a:	34 2d       	mov	r19, r4
    227c:	c9 01       	movw	r24, r18
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	9e bf       	out	0x3e, r25	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	8d bf       	out	0x3d, r24	; 61
	}
}
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	7e be       	out	0x3e, r7	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	6d be       	out	0x3d, r6	; 61
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	ff 90       	pop	r15
    22a2:	ef 90       	pop	r14
    22a4:	df 90       	pop	r13
    22a6:	cf 90       	pop	r12
    22a8:	bf 90       	pop	r11
    22aa:	af 90       	pop	r10
    22ac:	9f 90       	pop	r9
    22ae:	8f 90       	pop	r8
    22b0:	7f 90       	pop	r7
    22b2:	6f 90       	pop	r6
    22b4:	5f 90       	pop	r5
    22b6:	4f 90       	pop	r4
    22b8:	08 95       	ret

000022ba <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    22c0:	09 96       	adiw	r24, 0x09	; 9
    22c2:	fc 01       	movw	r30, r24
    22c4:	87 e0       	ldi	r24, 0x07	; 7
    22c6:	ef 01       	movw	r28, r30
    22c8:	19 92       	st	Y+, r1
    22ca:	8a 95       	dec	r24
    22cc:	e9 f7       	brne	.-6      	; 0x22c8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	19 96       	adiw	r26, 0x09	; 9
    22d2:	8c 93       	st	X, r24
    22d4:	19 97       	sbiw	r26, 0x09	; 9
	HIDInterfaceInfo->State.IdleCount           = 500;
    22d6:	84 ef       	ldi	r24, 0xF4	; 244
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	1d 96       	adiw	r26, 0x0d	; 13
    22dc:	9c 93       	st	X, r25
    22de:	8e 93       	st	-X, r24
    22e0:	1c 97       	sbiw	r26, 0x0c	; 12

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	14 96       	adiw	r26, 0x04	; 4
    22e6:	8c 93       	st	X, r24
    22e8:	14 97       	sbiw	r26, 0x04	; 4

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    22ea:	cd 01       	movw	r24, r26
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	db db       	rcall	.-2122   	; 0x1aa8 <Endpoint_ConfigureEndpointTable>
    22f2:	81 11       	cpse	r24, r1
    22f4:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <HID_Device_ProcessControlRequest+0x1e>
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    2322:	6d b6       	in	r6, 0x3d	; 61
    2324:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2326:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    232a:	83 ff       	sbrs	r24, 3
    232c:	1a c1       	rjmp	.+564    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    232e:	f6 01       	movw	r30, r12
    2330:	80 81       	ld	r24, Z
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	20 91 87 01 	lds	r18, 0x0187
    2338:	30 91 88 01 	lds	r19, 0x0188
    233c:	28 17       	cp	r18, r24
    233e:	39 07       	cpc	r19, r25
    2340:	09 f0       	breq	.+2      	; 0x2344 <HID_Device_ProcessControlRequest+0x48>
    2342:	0f c1       	rjmp	.+542    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
	  return;

	switch (USB_ControlRequest.bRequest)
    2344:	80 91 84 01 	lds	r24, 0x0184
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	09 f4       	brne	.+2      	; 0x234e <HID_Device_ProcessControlRequest+0x52>
    234c:	b2 c0       	rjmp	.+356    	; 0x24b2 <HID_Device_ProcessControlRequest+0x1b6>
    234e:	84 30       	cpi	r24, 0x04	; 4
    2350:	30 f4       	brcc	.+12     	; 0x235e <HID_Device_ProcessControlRequest+0x62>
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	71 f0       	breq	.+28     	; 0x2372 <HID_Device_ProcessControlRequest+0x76>
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	09 f0       	breq	.+2      	; 0x235c <HID_Device_ProcessControlRequest+0x60>
    235a:	03 c1       	rjmp	.+518    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    235c:	e6 c0       	rjmp	.+460    	; 0x252a <HID_Device_ProcessControlRequest+0x22e>
    235e:	8a 30       	cpi	r24, 0x0A	; 10
    2360:	09 f4       	brne	.+2      	; 0x2364 <HID_Device_ProcessControlRequest+0x68>
    2362:	cb c0       	rjmp	.+406    	; 0x24fa <HID_Device_ProcessControlRequest+0x1fe>
    2364:	8b 30       	cpi	r24, 0x0B	; 11
    2366:	09 f4       	brne	.+2      	; 0x236a <HID_Device_ProcessControlRequest+0x6e>
    2368:	b5 c0       	rjmp	.+362    	; 0x24d4 <HID_Device_ProcessControlRequest+0x1d8>
    236a:	89 30       	cpi	r24, 0x09	; 9
    236c:	09 f0       	breq	.+2      	; 0x2370 <HID_Device_ProcessControlRequest+0x74>
    236e:	f9 c0       	rjmp	.+498    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    2370:	5c c0       	rjmp	.+184    	; 0x242a <HID_Device_ProcessControlRequest+0x12e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2372:	80 91 83 01 	lds	r24, 0x0183
    2376:	81 3a       	cpi	r24, 0xA1	; 161
    2378:	09 f0       	breq	.+2      	; 0x237c <HID_Device_ProcessControlRequest+0x80>
    237a:	f3 c0       	rjmp	.+486    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    237c:	9d b6       	in	r9, 0x3d	; 61
    237e:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2380:	1b 82       	std	Y+3, r1	; 0x03
    2382:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2384:	80 91 85 01 	lds	r24, 0x0185
    2388:	10 91 86 01 	lds	r17, 0x0186
    238c:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    238e:	f6 01       	movw	r30, r12
    2390:	40 85       	ldd	r20, Z+8	; 0x08
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	8d b7       	in	r24, 0x3d	; 61
    2396:	9e b7       	in	r25, 0x3e	; 62
    2398:	84 1b       	sub	r24, r20
    239a:	95 0b       	sbc	r25, r21
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	9e bf       	out	0x3e, r25	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	8d bf       	out	0x3d, r24	; 61
    23a6:	ed b6       	in	r14, 0x3d	; 61
    23a8:	fe b6       	in	r15, 0x3e	; 62
    23aa:	08 94       	sec
    23ac:	e1 1c       	adc	r14, r1
    23ae:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    23b0:	be 2c       	mov	r11, r14
    23b2:	af 2c       	mov	r10, r15
    23b4:	c7 01       	movw	r24, r14
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	23 d2       	rcall	.+1094   	; 0x2804 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    23be:	11 50       	subi	r17, 0x01	; 1
    23c0:	c6 01       	movw	r24, r12
    23c2:	be 01       	movw	r22, r28
    23c4:	6f 5f       	subi	r22, 0xFF	; 255
    23c6:	7f 4f       	sbci	r23, 0xFF	; 255
    23c8:	41 2f       	mov	r20, r17
    23ca:	97 01       	movw	r18, r14
    23cc:	8e 01       	movw	r16, r28
    23ce:	0e 5f       	subi	r16, 0xFE	; 254
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    23d6:	f6 01       	movw	r30, r12
    23d8:	26 81       	ldd	r18, Z+6	; 0x06
    23da:	37 81       	ldd	r19, Z+7	; 0x07
    23dc:	21 15       	cp	r18, r1
    23de:	31 05       	cpc	r19, r1
    23e0:	29 f0       	breq	.+10     	; 0x23ec <HID_Device_ProcessControlRequest+0xf0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    23e2:	40 85       	ldd	r20, Z+8	; 0x08
    23e4:	c9 01       	movw	r24, r18
    23e6:	b7 01       	movw	r22, r14
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	03 d2       	rcall	.+1030   	; 0x27f2 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23ec:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23f0:	80 91 e8 00 	lds	r24, 0x00E8
    23f4:	87 7f       	andi	r24, 0xF7	; 247
    23f6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	88 23       	and	r24, r24
    23fe:	11 f0       	breq	.+4      	; 0x2404 <HID_Device_ProcessControlRequest+0x108>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2400:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2404:	6a 81       	ldd	r22, Y+2	; 0x02
    2406:	7b 81       	ldd	r23, Y+3	; 0x03
    2408:	8b 2d       	mov	r24, r11
    240a:	9a 2d       	mov	r25, r10
    240c:	a8 d9       	rcall	.-3248   	; 0x175e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    240e:	80 91 e8 00 	lds	r24, 0x00E8
    2412:	8b 77       	andi	r24, 0x7B	; 123
    2414:	80 93 e8 00 	sts	0x00E8, r24
    2418:	29 2d       	mov	r18, r9
    241a:	38 2d       	mov	r19, r8
    241c:	c9 01       	movw	r24, r18
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	9e bf       	out	0x3e, r25	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	8d bf       	out	0x3d, r24	; 61
    2428:	9c c0       	rjmp	.+312    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    242a:	80 91 83 01 	lds	r24, 0x0183
    242e:	81 32       	cpi	r24, 0x21	; 33
    2430:	09 f0       	breq	.+2      	; 0x2434 <HID_Device_ProcessControlRequest+0x138>
    2432:	97 c0       	rjmp	.+302    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    2434:	9d b6       	in	r9, 0x3d	; 61
    2436:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    2438:	00 91 89 01 	lds	r16, 0x0189
    243c:	10 91 8a 01 	lds	r17, 0x018A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2440:	a0 90 85 01 	lds	r10, 0x0185
    2444:	b0 90 86 01 	lds	r11, 0x0186
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2448:	8d b7       	in	r24, 0x3d	; 61
    244a:	9e b7       	in	r25, 0x3e	; 62
    244c:	80 1b       	sub	r24, r16
    244e:	91 0b       	sbc	r25, r17
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	9e bf       	out	0x3e, r25	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	8d bf       	out	0x3d, r24	; 61
    245a:	ed b6       	in	r14, 0x3d	; 61
    245c:	fe b6       	in	r15, 0x3e	; 62
    245e:	08 94       	sec
    2460:	e1 1c       	adc	r14, r1
    2462:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2464:	80 91 e8 00 	lds	r24, 0x00E8
    2468:	87 7f       	andi	r24, 0xF7	; 247
    246a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    246e:	c7 01       	movw	r24, r14
    2470:	b8 01       	movw	r22, r16
    2472:	df d9       	rcall	.-3138   	; 0x1832 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2474:	80 91 e8 00 	lds	r24, 0x00E8
    2478:	8e 77       	andi	r24, 0x7E	; 126
    247a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	aa 20       	and	r10, r10
    2484:	11 f0       	breq	.+4      	; 0x248a <HID_Device_ProcessControlRequest+0x18e>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	ba 94       	dec	r11
    248c:	e8 0e       	add	r14, r24
    248e:	f9 1e       	adc	r15, r25
    2490:	08 1b       	sub	r16, r24
    2492:	19 0b       	sbc	r17, r25
    2494:	c6 01       	movw	r24, r12
    2496:	6a 2d       	mov	r22, r10
    2498:	4b 2d       	mov	r20, r11
    249a:	97 01       	movw	r18, r14
    249c:	0e 94 6b 07 	call	0xed6	; 0xed6 <CALLBACK_HID_Device_ProcessHIDReport>
    24a0:	89 2d       	mov	r24, r9
    24a2:	98 2d       	mov	r25, r8
    24a4:	9c 01       	movw	r18, r24
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	3e bf       	out	0x3e, r19	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	2d bf       	out	0x3d, r18	; 61
    24b0:	58 c0       	rjmp	.+176    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24b2:	80 91 83 01 	lds	r24, 0x0183
    24b6:	81 3a       	cpi	r24, 0xA1	; 161
    24b8:	09 f0       	breq	.+2      	; 0x24bc <HID_Device_ProcessControlRequest+0x1c0>
    24ba:	53 c0       	rjmp	.+166    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24bc:	80 91 e8 00 	lds	r24, 0x00E8
    24c0:	87 7f       	andi	r24, 0xF7	; 247
    24c2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24c6:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    24ca:	80 ff       	sbrs	r24, 0
    24cc:	fc cf       	rjmp	.-8      	; 0x24c6 <HID_Device_ProcessControlRequest+0x1ca>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    24ce:	f6 01       	movw	r30, r12
    24d0:	81 85       	ldd	r24, Z+9	; 0x09
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <HID_Device_ProcessControlRequest+0x256>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24d4:	80 91 83 01 	lds	r24, 0x0183
    24d8:	81 32       	cpi	r24, 0x21	; 33
    24da:	09 f0       	breq	.+2      	; 0x24de <HID_Device_ProcessControlRequest+0x1e2>
    24dc:	42 c0       	rjmp	.+132    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24de:	80 91 e8 00 	lds	r24, 0x00E8
    24e2:	87 7f       	andi	r24, 0xF7	; 247
    24e4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24e8:	1b db       	rcall	.-2506   	; 0x1b20 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	80 91 85 01 	lds	r24, 0x0185
    24f0:	81 11       	cpse	r24, r1
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	f6 01       	movw	r30, r12
    24f6:	91 87       	std	Z+9, r25	; 0x09
    24f8:	34 c0       	rjmp	.+104    	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24fa:	80 91 83 01 	lds	r24, 0x0183
    24fe:	81 32       	cpi	r24, 0x21	; 33
    2500:	81 f5       	brne	.+96     	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    2502:	80 91 e8 00 	lds	r24, 0x00E8
    2506:	87 7f       	andi	r24, 0xF7	; 247
    2508:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    250c:	09 db       	rcall	.-2542   	; 0x1b20 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    250e:	80 91 85 01 	lds	r24, 0x0185
    2512:	90 91 86 01 	lds	r25, 0x0186
    2516:	80 70       	andi	r24, 0x00	; 0
    2518:	36 e0       	ldi	r19, 0x06	; 6
    251a:	96 95       	lsr	r25
    251c:	87 95       	ror	r24
    251e:	3a 95       	dec	r19
    2520:	e1 f7       	brne	.-8      	; 0x251a <HID_Device_ProcessControlRequest+0x21e>
    2522:	f6 01       	movw	r30, r12
    2524:	95 87       	std	Z+13, r25	; 0x0d
    2526:	84 87       	std	Z+12, r24	; 0x0c
    2528:	1c c0       	rjmp	.+56     	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    252a:	80 91 83 01 	lds	r24, 0x0183
    252e:	81 3a       	cpi	r24, 0xA1	; 161
    2530:	c1 f4       	brne	.+48     	; 0x2562 <HID_Device_ProcessControlRequest+0x266>
    2532:	80 91 e8 00 	lds	r24, 0x00E8
    2536:	87 7f       	andi	r24, 0xF7	; 247
    2538:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    253c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2540:	80 ff       	sbrs	r24, 0
    2542:	fc cf       	rjmp	.-8      	; 0x253c <HID_Device_ProcessControlRequest+0x240>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2544:	f6 01       	movw	r30, r12
    2546:	84 85       	ldd	r24, Z+12	; 0x0c
    2548:	95 85       	ldd	r25, Z+13	; 0x0d
    254a:	96 95       	lsr	r25
    254c:	87 95       	ror	r24
    254e:	96 95       	lsr	r25
    2550:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2552:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2556:	80 91 e8 00 	lds	r24, 0x00E8
    255a:	8e 77       	andi	r24, 0x7E	; 126
    255c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2560:	df da       	rcall	.-2626   	; 0x1b20 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	7e be       	out	0x3e, r7	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	6d be       	out	0x3d, r6	; 61
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	df 90       	pop	r13
    2580:	cf 90       	pop	r12
    2582:	bf 90       	pop	r11
    2584:	af 90       	pop	r10
    2586:	9f 90       	pop	r9
    2588:	8f 90       	pop	r8
    258a:	7f 90       	pop	r7
    258c:	6f 90       	pop	r6
    258e:	08 95       	ret

00002590 <__mulsi3>:
    2590:	62 9f       	mul	r22, r18
    2592:	d0 01       	movw	r26, r0
    2594:	73 9f       	mul	r23, r19
    2596:	f0 01       	movw	r30, r0
    2598:	82 9f       	mul	r24, r18
    259a:	e0 0d       	add	r30, r0
    259c:	f1 1d       	adc	r31, r1
    259e:	64 9f       	mul	r22, r20
    25a0:	e0 0d       	add	r30, r0
    25a2:	f1 1d       	adc	r31, r1
    25a4:	92 9f       	mul	r25, r18
    25a6:	f0 0d       	add	r31, r0
    25a8:	83 9f       	mul	r24, r19
    25aa:	f0 0d       	add	r31, r0
    25ac:	74 9f       	mul	r23, r20
    25ae:	f0 0d       	add	r31, r0
    25b0:	65 9f       	mul	r22, r21
    25b2:	f0 0d       	add	r31, r0
    25b4:	99 27       	eor	r25, r25
    25b6:	72 9f       	mul	r23, r18
    25b8:	b0 0d       	add	r27, r0
    25ba:	e1 1d       	adc	r30, r1
    25bc:	f9 1f       	adc	r31, r25
    25be:	63 9f       	mul	r22, r19
    25c0:	b0 0d       	add	r27, r0
    25c2:	e1 1d       	adc	r30, r1
    25c4:	f9 1f       	adc	r31, r25
    25c6:	bd 01       	movw	r22, r26
    25c8:	cf 01       	movw	r24, r30
    25ca:	11 24       	eor	r1, r1
    25cc:	08 95       	ret

000025ce <malloc>:
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	bc 01       	movw	r22, r24
    25d4:	82 30       	cpi	r24, 0x02	; 2
    25d6:	91 05       	cpc	r25, r1
    25d8:	10 f4       	brcc	.+4      	; 0x25de <malloc+0x10>
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	a0 91 8d 01 	lds	r26, 0x018D
    25e2:	b0 91 8e 01 	lds	r27, 0x018E
    25e6:	ed 01       	movw	r28, r26
    25e8:	e0 e0       	ldi	r30, 0x00	; 0
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	21 c0       	rjmp	.+66     	; 0x2634 <malloc+0x66>
    25f2:	88 81       	ld	r24, Y
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	86 17       	cp	r24, r22
    25f8:	97 07       	cpc	r25, r23
    25fa:	69 f4       	brne	.+26     	; 0x2616 <malloc+0x48>
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	19 f0       	breq	.+6      	; 0x260a <malloc+0x3c>
    2604:	93 83       	std	Z+3, r25	; 0x03
    2606:	82 83       	std	Z+2, r24	; 0x02
    2608:	04 c0       	rjmp	.+8      	; 0x2612 <malloc+0x44>
    260a:	90 93 8e 01 	sts	0x018E, r25
    260e:	80 93 8d 01 	sts	0x018D, r24
    2612:	fe 01       	movw	r30, r28
    2614:	34 c0       	rjmp	.+104    	; 0x267e <malloc+0xb0>
    2616:	68 17       	cp	r22, r24
    2618:	79 07       	cpc	r23, r25
    261a:	38 f4       	brcc	.+14     	; 0x262a <malloc+0x5c>
    261c:	41 15       	cp	r20, r1
    261e:	51 05       	cpc	r21, r1
    2620:	19 f0       	breq	.+6      	; 0x2628 <malloc+0x5a>
    2622:	84 17       	cp	r24, r20
    2624:	95 07       	cpc	r25, r21
    2626:	08 f4       	brcc	.+2      	; 0x262a <malloc+0x5c>
    2628:	ac 01       	movw	r20, r24
    262a:	fe 01       	movw	r30, r28
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	9b 81       	ldd	r25, Y+3	; 0x03
    2630:	9c 01       	movw	r18, r24
    2632:	e9 01       	movw	r28, r18
    2634:	20 97       	sbiw	r28, 0x00	; 0
    2636:	e9 f6       	brne	.-70     	; 0x25f2 <malloc+0x24>
    2638:	41 15       	cp	r20, r1
    263a:	51 05       	cpc	r21, r1
    263c:	a9 f1       	breq	.+106    	; 0x26a8 <malloc+0xda>
    263e:	ca 01       	movw	r24, r20
    2640:	86 1b       	sub	r24, r22
    2642:	97 0b       	sbc	r25, r23
    2644:	04 97       	sbiw	r24, 0x04	; 4
    2646:	08 f4       	brcc	.+2      	; 0x264a <malloc+0x7c>
    2648:	ba 01       	movw	r22, r20
    264a:	e0 e0       	ldi	r30, 0x00	; 0
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	2a c0       	rjmp	.+84     	; 0x26a4 <malloc+0xd6>
    2650:	8d 91       	ld	r24, X+
    2652:	9c 91       	ld	r25, X
    2654:	11 97       	sbiw	r26, 0x01	; 1
    2656:	84 17       	cp	r24, r20
    2658:	95 07       	cpc	r25, r21
    265a:	f9 f4       	brne	.+62     	; 0x269a <malloc+0xcc>
    265c:	64 17       	cp	r22, r20
    265e:	75 07       	cpc	r23, r21
    2660:	81 f4       	brne	.+32     	; 0x2682 <malloc+0xb4>
    2662:	12 96       	adiw	r26, 0x02	; 2
    2664:	8d 91       	ld	r24, X+
    2666:	9c 91       	ld	r25, X
    2668:	13 97       	sbiw	r26, 0x03	; 3
    266a:	30 97       	sbiw	r30, 0x00	; 0
    266c:	19 f0       	breq	.+6      	; 0x2674 <malloc+0xa6>
    266e:	93 83       	std	Z+3, r25	; 0x03
    2670:	82 83       	std	Z+2, r24	; 0x02
    2672:	04 c0       	rjmp	.+8      	; 0x267c <malloc+0xae>
    2674:	90 93 8e 01 	sts	0x018E, r25
    2678:	80 93 8d 01 	sts	0x018D, r24
    267c:	fd 01       	movw	r30, r26
    267e:	32 96       	adiw	r30, 0x02	; 2
    2680:	4f c0       	rjmp	.+158    	; 0x2720 <malloc+0x152>
    2682:	ca 01       	movw	r24, r20
    2684:	86 1b       	sub	r24, r22
    2686:	97 0b       	sbc	r25, r23
    2688:	fd 01       	movw	r30, r26
    268a:	e8 0f       	add	r30, r24
    268c:	f9 1f       	adc	r31, r25
    268e:	61 93       	st	Z+, r22
    2690:	71 93       	st	Z+, r23
    2692:	02 97       	sbiw	r24, 0x02	; 2
    2694:	8d 93       	st	X+, r24
    2696:	9c 93       	st	X, r25
    2698:	43 c0       	rjmp	.+134    	; 0x2720 <malloc+0x152>
    269a:	fd 01       	movw	r30, r26
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	9c 01       	movw	r18, r24
    26a2:	d9 01       	movw	r26, r18
    26a4:	10 97       	sbiw	r26, 0x00	; 0
    26a6:	a1 f6       	brne	.-88     	; 0x2650 <malloc+0x82>
    26a8:	80 91 8b 01 	lds	r24, 0x018B
    26ac:	90 91 8c 01 	lds	r25, 0x018C
    26b0:	89 2b       	or	r24, r25
    26b2:	41 f4       	brne	.+16     	; 0x26c4 <malloc+0xf6>
    26b4:	80 91 36 01 	lds	r24, 0x0136
    26b8:	90 91 37 01 	lds	r25, 0x0137
    26bc:	90 93 8c 01 	sts	0x018C, r25
    26c0:	80 93 8b 01 	sts	0x018B, r24
    26c4:	40 91 38 01 	lds	r20, 0x0138
    26c8:	50 91 39 01 	lds	r21, 0x0139
    26cc:	41 15       	cp	r20, r1
    26ce:	51 05       	cpc	r21, r1
    26d0:	41 f4       	brne	.+16     	; 0x26e2 <malloc+0x114>
    26d2:	4d b7       	in	r20, 0x3d	; 61
    26d4:	5e b7       	in	r21, 0x3e	; 62
    26d6:	80 91 34 01 	lds	r24, 0x0134
    26da:	90 91 35 01 	lds	r25, 0x0135
    26de:	48 1b       	sub	r20, r24
    26e0:	59 0b       	sbc	r21, r25
    26e2:	20 91 8b 01 	lds	r18, 0x018B
    26e6:	30 91 8c 01 	lds	r19, 0x018C
    26ea:	24 17       	cp	r18, r20
    26ec:	35 07       	cpc	r19, r21
    26ee:	b0 f4       	brcc	.+44     	; 0x271c <malloc+0x14e>
    26f0:	ca 01       	movw	r24, r20
    26f2:	82 1b       	sub	r24, r18
    26f4:	93 0b       	sbc	r25, r19
    26f6:	86 17       	cp	r24, r22
    26f8:	97 07       	cpc	r25, r23
    26fa:	80 f0       	brcs	.+32     	; 0x271c <malloc+0x14e>
    26fc:	ab 01       	movw	r20, r22
    26fe:	4e 5f       	subi	r20, 0xFE	; 254
    2700:	5f 4f       	sbci	r21, 0xFF	; 255
    2702:	84 17       	cp	r24, r20
    2704:	95 07       	cpc	r25, r21
    2706:	50 f0       	brcs	.+20     	; 0x271c <malloc+0x14e>
    2708:	42 0f       	add	r20, r18
    270a:	53 1f       	adc	r21, r19
    270c:	50 93 8c 01 	sts	0x018C, r21
    2710:	40 93 8b 01 	sts	0x018B, r20
    2714:	f9 01       	movw	r30, r18
    2716:	61 93       	st	Z+, r22
    2718:	71 93       	st	Z+, r23
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <malloc+0x152>
    271c:	e0 e0       	ldi	r30, 0x00	; 0
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	cf 01       	movw	r24, r30
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <free>:
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	09 f4       	brne	.+2      	; 0x2732 <free+0xa>
    2730:	50 c0       	rjmp	.+160    	; 0x27d2 <free+0xaa>
    2732:	ec 01       	movw	r28, r24
    2734:	22 97       	sbiw	r28, 0x02	; 2
    2736:	1b 82       	std	Y+3, r1	; 0x03
    2738:	1a 82       	std	Y+2, r1	; 0x02
    273a:	a0 91 8d 01 	lds	r26, 0x018D
    273e:	b0 91 8e 01 	lds	r27, 0x018E
    2742:	10 97       	sbiw	r26, 0x00	; 0
    2744:	09 f1       	breq	.+66     	; 0x2788 <free+0x60>
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	ac 17       	cp	r26, r28
    274c:	bd 07       	cpc	r27, r29
    274e:	08 f1       	brcs	.+66     	; 0x2792 <free+0x6a>
    2750:	bb 83       	std	Y+3, r27	; 0x03
    2752:	aa 83       	std	Y+2, r26	; 0x02
    2754:	fe 01       	movw	r30, r28
    2756:	21 91       	ld	r18, Z+
    2758:	31 91       	ld	r19, Z+
    275a:	e2 0f       	add	r30, r18
    275c:	f3 1f       	adc	r31, r19
    275e:	ae 17       	cp	r26, r30
    2760:	bf 07       	cpc	r27, r31
    2762:	79 f4       	brne	.+30     	; 0x2782 <free+0x5a>
    2764:	8d 91       	ld	r24, X+
    2766:	9c 91       	ld	r25, X
    2768:	11 97       	sbiw	r26, 0x01	; 1
    276a:	28 0f       	add	r18, r24
    276c:	39 1f       	adc	r19, r25
    276e:	2e 5f       	subi	r18, 0xFE	; 254
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	39 83       	std	Y+1, r19	; 0x01
    2774:	28 83       	st	Y, r18
    2776:	12 96       	adiw	r26, 0x02	; 2
    2778:	8d 91       	ld	r24, X+
    277a:	9c 91       	ld	r25, X
    277c:	13 97       	sbiw	r26, 0x03	; 3
    277e:	9b 83       	std	Y+3, r25	; 0x03
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	41 15       	cp	r20, r1
    2784:	51 05       	cpc	r21, r1
    2786:	71 f4       	brne	.+28     	; 0x27a4 <free+0x7c>
    2788:	d0 93 8e 01 	sts	0x018E, r29
    278c:	c0 93 8d 01 	sts	0x018D, r28
    2790:	20 c0       	rjmp	.+64     	; 0x27d2 <free+0xaa>
    2792:	12 96       	adiw	r26, 0x02	; 2
    2794:	8d 91       	ld	r24, X+
    2796:	9c 91       	ld	r25, X
    2798:	13 97       	sbiw	r26, 0x03	; 3
    279a:	ad 01       	movw	r20, r26
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	11 f0       	breq	.+4      	; 0x27a4 <free+0x7c>
    27a0:	dc 01       	movw	r26, r24
    27a2:	d3 cf       	rjmp	.-90     	; 0x274a <free+0x22>
    27a4:	fa 01       	movw	r30, r20
    27a6:	d3 83       	std	Z+3, r29	; 0x03
    27a8:	c2 83       	std	Z+2, r28	; 0x02
    27aa:	21 91       	ld	r18, Z+
    27ac:	31 91       	ld	r19, Z+
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	ce 17       	cp	r28, r30
    27b4:	df 07       	cpc	r29, r31
    27b6:	69 f4       	brne	.+26     	; 0x27d2 <free+0xaa>
    27b8:	88 81       	ld	r24, Y
    27ba:	99 81       	ldd	r25, Y+1	; 0x01
    27bc:	28 0f       	add	r18, r24
    27be:	39 1f       	adc	r19, r25
    27c0:	2e 5f       	subi	r18, 0xFE	; 254
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	fa 01       	movw	r30, r20
    27c6:	31 83       	std	Z+1, r19	; 0x01
    27c8:	20 83       	st	Z, r18
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	93 83       	std	Z+3, r25	; 0x03
    27d0:	82 83       	std	Z+2, r24	; 0x02
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	08 95       	ret

000027d8 <memcmp>:
    27d8:	fb 01       	movw	r30, r22
    27da:	dc 01       	movw	r26, r24
    27dc:	04 c0       	rjmp	.+8      	; 0x27e6 <memcmp+0xe>
    27de:	8d 91       	ld	r24, X+
    27e0:	01 90       	ld	r0, Z+
    27e2:	80 19       	sub	r24, r0
    27e4:	21 f4       	brne	.+8      	; 0x27ee <memcmp+0x16>
    27e6:	41 50       	subi	r20, 0x01	; 1
    27e8:	50 40       	sbci	r21, 0x00	; 0
    27ea:	c8 f7       	brcc	.-14     	; 0x27de <memcmp+0x6>
    27ec:	88 1b       	sub	r24, r24
    27ee:	99 0b       	sbc	r25, r25
    27f0:	08 95       	ret

000027f2 <memcpy>:
    27f2:	fb 01       	movw	r30, r22
    27f4:	dc 01       	movw	r26, r24
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <memcpy+0xa>
    27f8:	01 90       	ld	r0, Z+
    27fa:	0d 92       	st	X+, r0
    27fc:	41 50       	subi	r20, 0x01	; 1
    27fe:	50 40       	sbci	r21, 0x00	; 0
    2800:	d8 f7       	brcc	.-10     	; 0x27f8 <memcpy+0x6>
    2802:	08 95       	ret

00002804 <memset>:
    2804:	dc 01       	movw	r26, r24
    2806:	01 c0       	rjmp	.+2      	; 0x280a <memset+0x6>
    2808:	6d 93       	st	X+, r22
    280a:	41 50       	subi	r20, 0x01	; 1
    280c:	50 40       	sbci	r21, 0x00	; 0
    280e:	e0 f7       	brcc	.-8      	; 0x2808 <memset+0x4>
    2810:	08 95       	ret

00002812 <__eerd_block_m32u4>:
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22

00002816 <__eerd_blraw_m32u4>:
    2816:	fc 01       	movw	r30, r24
    2818:	f9 99       	sbic	0x1f, 1	; 31
    281a:	fe cf       	rjmp	.-4      	; 0x2818 <__eerd_blraw_m32u4+0x2>
    281c:	06 c0       	rjmp	.+12     	; 0x282a <__eerd_blraw_m32u4+0x14>
    281e:	f2 bd       	out	0x22, r31	; 34
    2820:	e1 bd       	out	0x21, r30	; 33
    2822:	f8 9a       	sbi	0x1f, 0	; 31
    2824:	31 96       	adiw	r30, 0x01	; 1
    2826:	00 b4       	in	r0, 0x20	; 32
    2828:	0d 92       	st	X+, r0
    282a:	41 50       	subi	r20, 0x01	; 1
    282c:	50 40       	sbci	r21, 0x00	; 0
    282e:	b8 f7       	brcc	.-18     	; 0x281e <__eerd_blraw_m32u4+0x8>
    2830:	08 95       	ret

00002832 <__eerd_byte_m32u4>:
    2832:	f9 99       	sbic	0x1f, 1	; 31
    2834:	fe cf       	rjmp	.-4      	; 0x2832 <__eerd_byte_m32u4>
    2836:	92 bd       	out	0x22, r25	; 34
    2838:	81 bd       	out	0x21, r24	; 33
    283a:	f8 9a       	sbi	0x1f, 0	; 31
    283c:	99 27       	eor	r25, r25
    283e:	80 b5       	in	r24, 0x20	; 32
    2840:	08 95       	ret

00002842 <__eewr_block_m32u4>:
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	02 c0       	rjmp	.+4      	; 0x284c <__eewr_block_m32u4+0xa>
    2848:	2d 91       	ld	r18, X+
    284a:	05 d0       	rcall	.+10     	; 0x2856 <__eewr_r18_m32u4>
    284c:	41 50       	subi	r20, 0x01	; 1
    284e:	50 40       	sbci	r21, 0x00	; 0
    2850:	d8 f7       	brcc	.-10     	; 0x2848 <__eewr_block_m32u4+0x6>
    2852:	08 95       	ret

00002854 <__eewr_byte_m32u4>:
    2854:	26 2f       	mov	r18, r22

00002856 <__eewr_r18_m32u4>:
    2856:	f9 99       	sbic	0x1f, 1	; 31
    2858:	fe cf       	rjmp	.-4      	; 0x2856 <__eewr_r18_m32u4>
    285a:	1f ba       	out	0x1f, r1	; 31
    285c:	92 bd       	out	0x22, r25	; 34
    285e:	81 bd       	out	0x21, r24	; 33
    2860:	20 bd       	out	0x20, r18	; 32
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	fa 9a       	sbi	0x1f, 2	; 31
    2868:	f9 9a       	sbi	0x1f, 1	; 31
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	08 95       	ret

00002870 <_exit>:
    2870:	f8 94       	cli

00002872 <__stop_program>:
    2872:	ff cf       	rjmp	.-2      	; 0x2872 <__stop_program>
